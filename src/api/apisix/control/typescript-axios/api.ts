/* tslint:disable */
/* eslint-disable */
/**
 * APISIX Control API
 * APISIX Control API is used to get the internal state of APISIX. In addition to the endpoints listed below, certain [plugins](/apisix/key-concepts/plugins), such as `server-info`, can add additional endpoints to control API.
 *
 * The version of the OpenAPI document: 3.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface V1DiscoveryServiceDumpGet404Response
 */
export interface V1DiscoveryServiceDumpGet404Response {
  /**
   *
   * @type {string}
   * @memberof V1DiscoveryServiceDumpGet404Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface V1DiscoveryServiceShowDumpFileGet503Response
 */
export interface V1DiscoveryServiceShowDumpFileGet503Response {
  /**
   *
   * @type {string}
   * @memberof V1DiscoveryServiceShowDumpFileGet503Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface V1HealthcheckSrcTypeSrcIdGet400Response
 */
export interface V1HealthcheckSrcTypeSrcIdGet400Response {
  /**
   *
   * @type {string}
   * @memberof V1HealthcheckSrcTypeSrcIdGet400Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface V1HealthcheckSrcTypeSrcIdGet404Response
 */
export interface V1HealthcheckSrcTypeSrcIdGet404Response {
  /**
   *
   * @type {string}
   * @memberof V1HealthcheckSrcTypeSrcIdGet404Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface V1PluginMetadataPluginNameGet404Response
 */
export interface V1PluginMetadataPluginNameGet404Response {
  /**
   *
   * @type {string}
   * @memberof V1PluginMetadataPluginNameGet404Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface V1RoutesIdGet404Response
 */
export interface V1RoutesIdGet404Response {
  /**
   *
   * @type {string}
   * @memberof V1RoutesIdGet404Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface V1SchemaGet200Response
 */
export interface V1SchemaGet200Response {
  /**
   *
   * @type {string}
   * @memberof V1SchemaGet200Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface V1SchemaGet400Response
 */
export interface V1SchemaGet400Response {
  /**
   *
   * @type {string}
   * @memberof V1SchemaGet400Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface V1ServicesIdGet404Response
 */
export interface V1ServicesIdGet404Response {
  /**
   *
   * @type {string}
   * @memberof V1ServicesIdGet404Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface V1UpstreamsIdGet404Response
 */
export interface V1UpstreamsIdGet404Response {
  /**
   *
   * @type {string}
   * @memberof V1UpstreamsIdGet404Response
   */
  message?: string;
}

/**
 * GarbageCollectionApi - axios parameter creator
 * @export
 */
export const GarbageCollectionApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Trigger a full garbage collection (GC) in the HTTP subsystem. Note that a request to this endpoint would not trigger a garbage collection in the stream subsystem because the subsystems are run in the separate Lua VM.
     * @summary Trigger Garbage Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GcPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/gc`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GarbageCollectionApi - functional programming interface
 * @export
 */
export const GarbageCollectionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GarbageCollectionApiAxiosParamCreator(configuration);
  return {
    /**
     * Trigger a full garbage collection (GC) in the HTTP subsystem. Note that a request to this endpoint would not trigger a garbage collection in the stream subsystem because the subsystems are run in the separate Lua VM.
     * @summary Trigger Garbage Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1GcPost(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1GcPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GarbageCollectionApi.v1GcPost']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GarbageCollectionApi - factory interface
 * @export
 */
export const GarbageCollectionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GarbageCollectionApiFp(configuration);
  return {
    /**
     * Trigger a full garbage collection (GC) in the HTTP subsystem. Note that a request to this endpoint would not trigger a garbage collection in the stream subsystem because the subsystems are run in the separate Lua VM.
     * @summary Trigger Garbage Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1GcPost(options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.v1GcPost(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * GarbageCollectionApi - interface
 * @export
 * @interface GarbageCollectionApi
 */
export interface GarbageCollectionApiInterface {
  /**
   * Trigger a full garbage collection (GC) in the HTTP subsystem. Note that a request to this endpoint would not trigger a garbage collection in the stream subsystem because the subsystems are run in the separate Lua VM.
   * @summary Trigger Garbage Collection
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GarbageCollectionApiInterface
   */
  v1GcPost(options?: RawAxiosRequestConfig): AxiosPromise<object>;
}

/**
 * GarbageCollectionApi - object-oriented interface
 * @export
 * @class GarbageCollectionApi
 * @extends {BaseAPI}
 */
export class GarbageCollectionApi extends BaseAPI implements GarbageCollectionApiInterface {
  /**
   * Trigger a full garbage collection (GC) in the HTTP subsystem. Note that a request to this endpoint would not trigger a garbage collection in the stream subsystem because the subsystems are run in the separate Lua VM.
   * @summary Trigger Garbage Collection
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GarbageCollectionApi
   */
  public v1GcPost(options?: RawAxiosRequestConfig) {
    return GarbageCollectionApiFp(this.configuration)
      .v1GcPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get health check information of the APISIX instance. You need to initiate a request to the route to generate Control API health check information.
     * @summary Get Health Check Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1HealthcheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/healthcheck`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get health status of a specified resource.
     * @summary Get Health Status By Type and ID
     * @param {V1HealthcheckSrcTypeSrcIdGetSrcTypeEnum} srcType The specified resource type.
     * @param {string} srcId The specified node ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1HealthcheckSrcTypeSrcIdGet: async (
      srcType: V1HealthcheckSrcTypeSrcIdGetSrcTypeEnum,
      srcId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'srcType' is not null or undefined
      assertParamExists('v1HealthcheckSrcTypeSrcIdGet', 'srcType', srcType);
      // verify required parameter 'srcId' is not null or undefined
      assertParamExists('v1HealthcheckSrcTypeSrcIdGet', 'srcId', srcId);
      const localVarPath = `/v1/healthcheck/{src_type}/{src_id}`
        .replace(`{${'src_type'}}`, encodeURIComponent(String(srcType)))
        .replace(`{${'src_id'}}`, encodeURIComponent(String(srcId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration);
  return {
    /**
     * Get health check information of the APISIX instance. You need to initiate a request to the route to generate Control API health check information.
     * @summary Get Health Check Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1HealthcheckGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1HealthcheckGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HealthCheckApi.v1HealthcheckGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get health status of a specified resource.
     * @summary Get Health Status By Type and ID
     * @param {V1HealthcheckSrcTypeSrcIdGetSrcTypeEnum} srcType The specified resource type.
     * @param {string} srcId The specified node ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1HealthcheckSrcTypeSrcIdGet(
      srcType: V1HealthcheckSrcTypeSrcIdGetSrcTypeEnum,
      srcId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1HealthcheckSrcTypeSrcIdGet(srcType, srcId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HealthCheckApi.v1HealthcheckSrcTypeSrcIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = HealthCheckApiFp(configuration);
  return {
    /**
     * Get health check information of the APISIX instance. You need to initiate a request to the route to generate Control API health check information.
     * @summary Get Health Check Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1HealthcheckGet(options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.v1HealthcheckGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Get health status of a specified resource.
     * @summary Get Health Status By Type and ID
     * @param {HealthCheckApiV1HealthcheckSrcTypeSrcIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1HealthcheckSrcTypeSrcIdGet(
      requestParameters: HealthCheckApiV1HealthcheckSrcTypeSrcIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<object> {
      return localVarFp
        .v1HealthcheckSrcTypeSrcIdGet(requestParameters.srcType, requestParameters.srcId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HealthCheckApi - interface
 * @export
 * @interface HealthCheckApi
 */
export interface HealthCheckApiInterface {
  /**
   * Get health check information of the APISIX instance. You need to initiate a request to the route to generate Control API health check information.
   * @summary Get Health Check Information
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthCheckApiInterface
   */
  v1HealthcheckGet(options?: RawAxiosRequestConfig): AxiosPromise<object>;

  /**
   * Get health status of a specified resource.
   * @summary Get Health Status By Type and ID
   * @param {V1HealthcheckSrcTypeSrcIdGetSrcTypeEnum} srcType The specified resource type.
   * @param {string} srcId The specified node ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthCheckApiInterface
   */
  v1HealthcheckSrcTypeSrcIdGet(
    srcType: V1HealthcheckSrcTypeSrcIdGetSrcTypeEnum,
    srcId: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<object>;
}

/**
 * Request parameters for v1HealthcheckSrcTypeSrcIdGet operation in HealthCheckApi.
 * @export
 * @interface HealthCheckApiV1HealthcheckSrcTypeSrcIdGetRequest
 */
export interface HealthCheckApiV1HealthcheckSrcTypeSrcIdGetRequest {
  /**
   * The specified resource type.
   * @type {'routes' | 'services' | 'upstreams'}
   * @memberof HealthCheckApiV1HealthcheckSrcTypeSrcIdGet
   */
  readonly srcType: V1HealthcheckSrcTypeSrcIdGetSrcTypeEnum;

  /**
   * The specified node ID.
   * @type {string}
   * @memberof HealthCheckApiV1HealthcheckSrcTypeSrcIdGet
   */
  readonly srcId: string;
}

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI implements HealthCheckApiInterface {
  /**
   * Get health check information of the APISIX instance. You need to initiate a request to the route to generate Control API health check information.
   * @summary Get Health Check Information
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthCheckApi
   */
  public v1HealthcheckGet(options?: RawAxiosRequestConfig) {
    return HealthCheckApiFp(this.configuration)
      .v1HealthcheckGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get health status of a specified resource.
   * @summary Get Health Status By Type and ID
   * @param {HealthCheckApiV1HealthcheckSrcTypeSrcIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthCheckApi
   */
  public v1HealthcheckSrcTypeSrcIdGet(
    requestParameters: HealthCheckApiV1HealthcheckSrcTypeSrcIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return HealthCheckApiFp(this.configuration)
      .v1HealthcheckSrcTypeSrcIdGet(requestParameters.srcType, requestParameters.srcId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const V1HealthcheckSrcTypeSrcIdGetSrcTypeEnum = {
  Routes: 'routes',
  Services: 'services',
  Upstreams: 'upstreams',
} as const;
export type V1HealthcheckSrcTypeSrcIdGetSrcTypeEnum =
  (typeof V1HealthcheckSrcTypeSrcIdGetSrcTypeEnum)[keyof typeof V1HealthcheckSrcTypeSrcIdGetSrcTypeEnum];

/**
 * PluginApi - axios parameter creator
 * @export
 */
export const PluginApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Hot reload plugins for changes to the plugin list in [configuration files](/apisix/reference/configuration-files#config-defaultyaml-and-configyaml) or plugin source files to take effect.
     * @summary Reload All Plugins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PluginsReloadPut: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/plugins/reload`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PluginApi - functional programming interface
 * @export
 */
export const PluginApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PluginApiAxiosParamCreator(configuration);
  return {
    /**
     * Hot reload plugins for changes to the plugin list in [configuration files](/apisix/reference/configuration-files#config-defaultyaml-and-configyaml) or plugin source files to take effect.
     * @summary Reload All Plugins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1PluginsReloadPut(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1PluginsReloadPut(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginApi.v1PluginsReloadPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PluginApi - factory interface
 * @export
 */
export const PluginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PluginApiFp(configuration);
  return {
    /**
     * Hot reload plugins for changes to the plugin list in [configuration files](/apisix/reference/configuration-files#config-defaultyaml-and-configyaml) or plugin source files to take effect.
     * @summary Reload All Plugins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PluginsReloadPut(options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.v1PluginsReloadPut(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PluginApi - interface
 * @export
 * @interface PluginApi
 */
export interface PluginApiInterface {
  /**
   * Hot reload plugins for changes to the plugin list in [configuration files](/apisix/reference/configuration-files#config-defaultyaml-and-configyaml) or plugin source files to take effect.
   * @summary Reload All Plugins
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginApiInterface
   */
  v1PluginsReloadPut(options?: RawAxiosRequestConfig): AxiosPromise<object>;
}

/**
 * PluginApi - object-oriented interface
 * @export
 * @class PluginApi
 * @extends {BaseAPI}
 */
export class PluginApi extends BaseAPI implements PluginApiInterface {
  /**
   * Hot reload plugins for changes to the plugin list in [configuration files](/apisix/reference/configuration-files#config-defaultyaml-and-configyaml) or plugin source files to take effect.
   * @summary Reload All Plugins
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginApi
   */
  public v1PluginsReloadPut(options?: RawAxiosRequestConfig) {
    return PluginApiFp(this.configuration)
      .v1PluginsReloadPut(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PluginMetadataApi - axios parameter creator
 * @export
 */
export const PluginMetadataApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all plugin metadata.
     * @summary Get All Plugin Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PluginMetadataGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/plugin_metadata`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get plugin metadata by the plugin name.
     * @summary Get Plugin Metadata by Name
     * @param {string} pluginName The specified plugin name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PluginMetadataPluginNameGet: async (
      pluginName: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'pluginName' is not null or undefined
      assertParamExists('v1PluginMetadataPluginNameGet', 'pluginName', pluginName);
      const localVarPath = `/v1/plugin_metadata/{plugin_name}`.replace(
        `{${'plugin_name'}}`,
        encodeURIComponent(String(pluginName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PluginMetadataApi - functional programming interface
 * @export
 */
export const PluginMetadataApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PluginMetadataApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all plugin metadata.
     * @summary Get All Plugin Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1PluginMetadataGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1PluginMetadataGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginMetadataApi.v1PluginMetadataGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get plugin metadata by the plugin name.
     * @summary Get Plugin Metadata by Name
     * @param {string} pluginName The specified plugin name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1PluginMetadataPluginNameGet(
      pluginName: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1PluginMetadataPluginNameGet(pluginName, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginMetadataApi.v1PluginMetadataPluginNameGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PluginMetadataApi - factory interface
 * @export
 */
export const PluginMetadataApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PluginMetadataApiFp(configuration);
  return {
    /**
     * Get all plugin metadata.
     * @summary Get All Plugin Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PluginMetadataGet(options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.v1PluginMetadataGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Get plugin metadata by the plugin name.
     * @summary Get Plugin Metadata by Name
     * @param {PluginMetadataApiV1PluginMetadataPluginNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PluginMetadataPluginNameGet(
      requestParameters: PluginMetadataApiV1PluginMetadataPluginNameGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<object> {
      return localVarFp
        .v1PluginMetadataPluginNameGet(requestParameters.pluginName, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PluginMetadataApi - interface
 * @export
 * @interface PluginMetadataApi
 */
export interface PluginMetadataApiInterface {
  /**
   * Get all plugin metadata.
   * @summary Get All Plugin Metadata
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApiInterface
   */
  v1PluginMetadataGet(options?: RawAxiosRequestConfig): AxiosPromise<object>;

  /**
   * Get plugin metadata by the plugin name.
   * @summary Get Plugin Metadata by Name
   * @param {string} pluginName The specified plugin name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApiInterface
   */
  v1PluginMetadataPluginNameGet(pluginName: string, options?: RawAxiosRequestConfig): AxiosPromise<object>;
}

/**
 * Request parameters for v1PluginMetadataPluginNameGet operation in PluginMetadataApi.
 * @export
 * @interface PluginMetadataApiV1PluginMetadataPluginNameGetRequest
 */
export interface PluginMetadataApiV1PluginMetadataPluginNameGetRequest {
  /**
   * The specified plugin name.
   * @type {string}
   * @memberof PluginMetadataApiV1PluginMetadataPluginNameGet
   */
  readonly pluginName: string;
}

/**
 * PluginMetadataApi - object-oriented interface
 * @export
 * @class PluginMetadataApi
 * @extends {BaseAPI}
 */
export class PluginMetadataApi extends BaseAPI implements PluginMetadataApiInterface {
  /**
   * Get all plugin metadata.
   * @summary Get All Plugin Metadata
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApi
   */
  public v1PluginMetadataGet(options?: RawAxiosRequestConfig) {
    return PluginMetadataApiFp(this.configuration)
      .v1PluginMetadataGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get plugin metadata by the plugin name.
   * @summary Get Plugin Metadata by Name
   * @param {PluginMetadataApiV1PluginMetadataPluginNameGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApi
   */
  public v1PluginMetadataPluginNameGet(
    requestParameters: PluginMetadataApiV1PluginMetadataPluginNameGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PluginMetadataApiFp(this.configuration)
      .v1PluginMetadataPluginNameGet(requestParameters.pluginName, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RouteApi - axios parameter creator
 * @export
 */
export const RouteApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured routes.
     * @summary Get All Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RoutesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/routes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a route by ID.
     * @summary Get Route by ID
     * @param {string} id The specified route ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RoutesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('v1RoutesIdGet', 'id', id);
      const localVarPath = `/v1/routes/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RouteApi - functional programming interface
 * @export
 */
export const RouteApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RouteApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured routes.
     * @summary Get All Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1RoutesGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1RoutesGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RouteApi.v1RoutesGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a route by ID.
     * @summary Get Route by ID
     * @param {string} id The specified route ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1RoutesIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1RoutesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RouteApi.v1RoutesIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * RouteApi - factory interface
 * @export
 */
export const RouteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = RouteApiFp(configuration);
  return {
    /**
     * Get all configured routes.
     * @summary Get All Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RoutesGet(options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.v1RoutesGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Get a route by ID.
     * @summary Get Route by ID
     * @param {RouteApiV1RoutesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RoutesIdGet(
      requestParameters: RouteApiV1RoutesIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<object> {
      return localVarFp.v1RoutesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * RouteApi - interface
 * @export
 * @interface RouteApi
 */
export interface RouteApiInterface {
  /**
   * Get all configured routes.
   * @summary Get All Routes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApiInterface
   */
  v1RoutesGet(options?: RawAxiosRequestConfig): AxiosPromise<object>;

  /**
   * Get a route by ID.
   * @summary Get Route by ID
   * @param {string} id The specified route ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApiInterface
   */
  v1RoutesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<object>;
}

/**
 * Request parameters for v1RoutesIdGet operation in RouteApi.
 * @export
 * @interface RouteApiV1RoutesIdGetRequest
 */
export interface RouteApiV1RoutesIdGetRequest {
  /**
   * The specified route ID.
   * @type {string}
   * @memberof RouteApiV1RoutesIdGet
   */
  readonly id: string;
}

/**
 * RouteApi - object-oriented interface
 * @export
 * @class RouteApi
 * @extends {BaseAPI}
 */
export class RouteApi extends BaseAPI implements RouteApiInterface {
  /**
   * Get all configured routes.
   * @summary Get All Routes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApi
   */
  public v1RoutesGet(options?: RawAxiosRequestConfig) {
    return RouteApiFp(this.configuration)
      .v1RoutesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a route by ID.
   * @summary Get Route by ID
   * @param {RouteApiV1RoutesIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApi
   */
  public v1RoutesIdGet(requestParameters: RouteApiV1RoutesIdGetRequest, options?: RawAxiosRequestConfig) {
    return RouteApiFp(this.configuration)
      .v1RoutesIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SchemaApi - axios parameter creator
 * @export
 */
export const SchemaApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get JSON schema that is used by the APISIX instance.
     * @summary Get JSON Schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SchemaGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/schema`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SchemaApi - functional programming interface
 * @export
 */
export const SchemaApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SchemaApiAxiosParamCreator(configuration);
  return {
    /**
     * Get JSON schema that is used by the APISIX instance.
     * @summary Get JSON Schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1SchemaGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1SchemaGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchemaGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SchemaApi.v1SchemaGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SchemaApi - factory interface
 * @export
 */
export const SchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = SchemaApiFp(configuration);
  return {
    /**
     * Get JSON schema that is used by the APISIX instance.
     * @summary Get JSON Schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SchemaGet(options?: RawAxiosRequestConfig): AxiosPromise<V1SchemaGet200Response> {
      return localVarFp.v1SchemaGet(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * SchemaApi - interface
 * @export
 * @interface SchemaApi
 */
export interface SchemaApiInterface {
  /**
   * Get JSON schema that is used by the APISIX instance.
   * @summary Get JSON Schema
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SchemaApiInterface
   */
  v1SchemaGet(options?: RawAxiosRequestConfig): AxiosPromise<V1SchemaGet200Response>;
}

/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
export class SchemaApi extends BaseAPI implements SchemaApiInterface {
  /**
   * Get JSON schema that is used by the APISIX instance.
   * @summary Get JSON Schema
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SchemaApi
   */
  public v1SchemaGet(options?: RawAxiosRequestConfig) {
    return SchemaApiFp(this.configuration)
      .v1SchemaGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ServiceApi - axios parameter creator
 * @export
 */
export const ServiceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured services.
     * @summary Get All Services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ServicesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/services`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a service by ID.
     * @summary Get Service by ID
     * @param {string} id The pecified service ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ServicesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('v1ServicesIdGet', 'id', id);
      const localVarPath = `/v1/services/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ServiceApi - functional programming interface
 * @export
 */
export const ServiceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ServiceApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured services.
     * @summary Get All Services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ServicesGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ServicesGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ServiceApi.v1ServicesGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a service by ID.
     * @summary Get Service by ID
     * @param {string} id The pecified service ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1ServicesIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1ServicesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ServiceApi.v1ServicesIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ServiceApi - factory interface
 * @export
 */
export const ServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ServiceApiFp(configuration);
  return {
    /**
     * Get all configured services.
     * @summary Get All Services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ServicesGet(options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.v1ServicesGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Get a service by ID.
     * @summary Get Service by ID
     * @param {ServiceApiV1ServicesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ServicesIdGet(
      requestParameters: ServiceApiV1ServicesIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<object> {
      return localVarFp.v1ServicesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * ServiceApi - interface
 * @export
 * @interface ServiceApi
 */
export interface ServiceApiInterface {
  /**
   * Get all configured services.
   * @summary Get All Services
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApiInterface
   */
  v1ServicesGet(options?: RawAxiosRequestConfig): AxiosPromise<object>;

  /**
   * Get a service by ID.
   * @summary Get Service by ID
   * @param {string} id The pecified service ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApiInterface
   */
  v1ServicesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<object>;
}

/**
 * Request parameters for v1ServicesIdGet operation in ServiceApi.
 * @export
 * @interface ServiceApiV1ServicesIdGetRequest
 */
export interface ServiceApiV1ServicesIdGetRequest {
  /**
   * The pecified service ID.
   * @type {string}
   * @memberof ServiceApiV1ServicesIdGet
   */
  readonly id: string;
}

/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
export class ServiceApi extends BaseAPI implements ServiceApiInterface {
  /**
   * Get all configured services.
   * @summary Get All Services
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public v1ServicesGet(options?: RawAxiosRequestConfig) {
    return ServiceApiFp(this.configuration)
      .v1ServicesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a service by ID.
   * @summary Get Service by ID
   * @param {ServiceApiV1ServicesIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public v1ServicesIdGet(requestParameters: ServiceApiV1ServicesIdGetRequest, options?: RawAxiosRequestConfig) {
    return ServiceApiFp(this.configuration)
      .v1ServicesIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ServiceDiscoveryApi - axios parameter creator
 * @export
 */
export const ServiceDiscoveryApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get service and configuration details.
     * @summary Get Memory Dump
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DiscoveryServiceDumpGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/discovery/{service}/dump`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get configured services details.
     * @summary Get Dump File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DiscoveryServiceShowDumpFileGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/discovery/{service}/show_dump_file`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ServiceDiscoveryApi - functional programming interface
 * @export
 */
export const ServiceDiscoveryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ServiceDiscoveryApiAxiosParamCreator(configuration);
  return {
    /**
     * Get service and configuration details.
     * @summary Get Memory Dump
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1DiscoveryServiceDumpGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1DiscoveryServiceDumpGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ServiceDiscoveryApi.v1DiscoveryServiceDumpGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get configured services details.
     * @summary Get Dump File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1DiscoveryServiceShowDumpFileGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1DiscoveryServiceShowDumpFileGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ServiceDiscoveryApi.v1DiscoveryServiceShowDumpFileGet']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ServiceDiscoveryApi - factory interface
 * @export
 */
export const ServiceDiscoveryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ServiceDiscoveryApiFp(configuration);
  return {
    /**
     * Get service and configuration details.
     * @summary Get Memory Dump
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DiscoveryServiceDumpGet(options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.v1DiscoveryServiceDumpGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Get configured services details.
     * @summary Get Dump File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DiscoveryServiceShowDumpFileGet(options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.v1DiscoveryServiceShowDumpFileGet(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * ServiceDiscoveryApi - interface
 * @export
 * @interface ServiceDiscoveryApi
 */
export interface ServiceDiscoveryApiInterface {
  /**
   * Get service and configuration details.
   * @summary Get Memory Dump
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceDiscoveryApiInterface
   */
  v1DiscoveryServiceDumpGet(options?: RawAxiosRequestConfig): AxiosPromise<object>;

  /**
   * Get configured services details.
   * @summary Get Dump File
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceDiscoveryApiInterface
   */
  v1DiscoveryServiceShowDumpFileGet(options?: RawAxiosRequestConfig): AxiosPromise<object>;
}

/**
 * ServiceDiscoveryApi - object-oriented interface
 * @export
 * @class ServiceDiscoveryApi
 * @extends {BaseAPI}
 */
export class ServiceDiscoveryApi extends BaseAPI implements ServiceDiscoveryApiInterface {
  /**
   * Get service and configuration details.
   * @summary Get Memory Dump
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceDiscoveryApi
   */
  public v1DiscoveryServiceDumpGet(options?: RawAxiosRequestConfig) {
    return ServiceDiscoveryApiFp(this.configuration)
      .v1DiscoveryServiceDumpGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get configured services details.
   * @summary Get Dump File
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceDiscoveryApi
   */
  public v1DiscoveryServiceShowDumpFileGet(options?: RawAxiosRequestConfig) {
    return ServiceDiscoveryApiFp(this.configuration)
      .v1DiscoveryServiceShowDumpFileGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UpstreamApi - axios parameter creator
 * @export
 */
export const UpstreamApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured upstreams.
     * @summary Get All Upstreams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpstreamsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/upstreams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get an upstream by ID.
     * @summary Get Upstream by ID
     * @param {string} id The specified upstream ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpstreamsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('v1UpstreamsIdGet', 'id', id);
      const localVarPath = `/v1/upstreams/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UpstreamApi - functional programming interface
 * @export
 */
export const UpstreamApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UpstreamApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured upstreams.
     * @summary Get All Upstreams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpstreamsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpstreamsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UpstreamApi.v1UpstreamsGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get an upstream by ID.
     * @summary Get Upstream by ID
     * @param {string} id The specified upstream ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UpstreamsIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1UpstreamsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UpstreamApi.v1UpstreamsIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UpstreamApi - factory interface
 * @export
 */
export const UpstreamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UpstreamApiFp(configuration);
  return {
    /**
     * Get all configured upstreams.
     * @summary Get All Upstreams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpstreamsGet(options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.v1UpstreamsGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Get an upstream by ID.
     * @summary Get Upstream by ID
     * @param {UpstreamApiV1UpstreamsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UpstreamsIdGet(
      requestParameters: UpstreamApiV1UpstreamsIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<object> {
      return localVarFp.v1UpstreamsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UpstreamApi - interface
 * @export
 * @interface UpstreamApi
 */
export interface UpstreamApiInterface {
  /**
   * Get all configured upstreams.
   * @summary Get All Upstreams
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApiInterface
   */
  v1UpstreamsGet(options?: RawAxiosRequestConfig): AxiosPromise<object>;

  /**
   * Get an upstream by ID.
   * @summary Get Upstream by ID
   * @param {string} id The specified upstream ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApiInterface
   */
  v1UpstreamsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<object>;
}

/**
 * Request parameters for v1UpstreamsIdGet operation in UpstreamApi.
 * @export
 * @interface UpstreamApiV1UpstreamsIdGetRequest
 */
export interface UpstreamApiV1UpstreamsIdGetRequest {
  /**
   * The specified upstream ID.
   * @type {string}
   * @memberof UpstreamApiV1UpstreamsIdGet
   */
  readonly id: string;
}

/**
 * UpstreamApi - object-oriented interface
 * @export
 * @class UpstreamApi
 * @extends {BaseAPI}
 */
export class UpstreamApi extends BaseAPI implements UpstreamApiInterface {
  /**
   * Get all configured upstreams.
   * @summary Get All Upstreams
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApi
   */
  public v1UpstreamsGet(options?: RawAxiosRequestConfig) {
    return UpstreamApiFp(this.configuration)
      .v1UpstreamsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get an upstream by ID.
   * @summary Get Upstream by ID
   * @param {UpstreamApiV1UpstreamsIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApi
   */
  public v1UpstreamsIdGet(requestParameters: UpstreamApiV1UpstreamsIdGetRequest, options?: RawAxiosRequestConfig) {
    return UpstreamApiFp(this.configuration)
      .v1UpstreamsIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
