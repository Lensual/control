/* tslint:disable */
/* eslint-disable */
/**
 * APISIX Admin API
 * APISIX Admin API is a RESTful API that allows you to create and manage APISIX resources.
 *
 * The version of the OpenAPI document: 3.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface ApisixAdminConsumerGroupsGet200Response
 */
export interface ApisixAdminConsumerGroupsGet200Response {
  /**
   *
   * @type {Array<ApisixAdminConsumerGroupsGet200ResponseListInner>}
   * @memberof ApisixAdminConsumerGroupsGet200Response
   */
  list?: Array<ApisixAdminConsumerGroupsGet200ResponseListInner>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminConsumerGroupsGet200Response
   */
  total?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminConsumerGroupsGet200ResponseListInner
 */
export interface ApisixAdminConsumerGroupsGet200ResponseListInner {
  /**
   *
   * @type {ApisixAdminConsumerGroupsGet200ResponseListInnerValue}
   * @memberof ApisixAdminConsumerGroupsGet200ResponseListInner
   */
  value?: ApisixAdminConsumerGroupsGet200ResponseListInnerValue;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumerGroupsGet200ResponseListInner
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminConsumerGroupsGet200ResponseListInner
   */
  modifiedIndex?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminConsumerGroupsGet200ResponseListInner
   */
  createdIndex?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminConsumerGroupsGet200ResponseListInnerValue
 */
export interface ApisixAdminConsumerGroupsGet200ResponseListInnerValue {
  /**
   *
   * @type {object}
   * @memberof ApisixAdminConsumerGroupsGet200ResponseListInnerValue
   */
  plugins: object;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumerGroupsGet200ResponseListInnerValue
   */
  desc?: string;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminConsumerGroupsGet200ResponseListInnerValue
   */
  labels?: object;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminConsumerGroupsGet200ResponseListInnerValue
   */
  id: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminConsumerGroupsGet200ResponseListInnerValue
   */
  update_time?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminConsumerGroupsGet200ResponseListInnerValue
   */
  create_time?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminConsumerGroupsIdPut201Response
 */
export interface ApisixAdminConsumerGroupsIdPut201Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumerGroupsIdPut201Response
   */
  key?: string;
  /**
   *
   * @type {ApisixAdminConsumerGroupsGet200ResponseListInnerValue}
   * @memberof ApisixAdminConsumerGroupsIdPut201Response
   */
  value?: ApisixAdminConsumerGroupsGet200ResponseListInnerValue;
}
/**
 *
 * @export
 * @interface ApisixAdminConsumerGroupsIdPutRequest
 */
export interface ApisixAdminConsumerGroupsIdPutRequest {
  /**
   *
   * @type {object}
   * @memberof ApisixAdminConsumerGroupsIdPutRequest
   */
  plugins: object;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumerGroupsIdPutRequest
   */
  desc?: string;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminConsumerGroupsIdPutRequest
   */
  labels?: object;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminConsumerGroupsIdPutRequest
   */
  id: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
}
/**
 *
 * @export
 * @interface ApisixAdminConsumersGet200Response
 */
export interface ApisixAdminConsumersGet200Response {
  /**
   *
   * @type {Array<ApisixAdminConsumersGet200ResponseListInner>}
   * @memberof ApisixAdminConsumersGet200Response
   */
  list?: Array<ApisixAdminConsumersGet200ResponseListInner>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminConsumersGet200Response
   */
  total?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminConsumersGet200ResponseListInner
 */
export interface ApisixAdminConsumersGet200ResponseListInner {
  /**
   *
   * @type {ApisixAdminConsumersGet200ResponseListInnerValue}
   * @memberof ApisixAdminConsumersGet200ResponseListInner
   */
  value?: ApisixAdminConsumersGet200ResponseListInnerValue;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumersGet200ResponseListInner
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminConsumersGet200ResponseListInner
   */
  modifiedIndex?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminConsumersGet200ResponseListInner
   */
  createdIndex?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminConsumersGet200ResponseListInnerValue
 */
export interface ApisixAdminConsumersGet200ResponseListInnerValue {
  /**
   *
   * @type {object}
   * @memberof ApisixAdminConsumersGet200ResponseListInnerValue
   */
  plugins?: object;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumersGet200ResponseListInnerValue
   */
  username: string;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminConsumersGet200ResponseListInnerValue
   */
  labels?: object;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumersGet200ResponseListInnerValue
   */
  desc?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminConsumersGet200ResponseListInnerValue
   */
  update_time?: number;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminConsumersGet200ResponseListInnerValue
   */
  group_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminConsumersGet200ResponseListInnerValue
   */
  create_time?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminConsumersPut201Response
 */
export interface ApisixAdminConsumersPut201Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumersPut201Response
   */
  key?: string;
  /**
   *
   * @type {ApisixAdminConsumersPut201ResponseValue}
   * @memberof ApisixAdminConsumersPut201Response
   */
  value?: ApisixAdminConsumersPut201ResponseValue;
}
/**
 *
 * @export
 * @interface ApisixAdminConsumersPut201ResponseValue
 */
export interface ApisixAdminConsumersPut201ResponseValue {
  /**
   *
   * @type {object}
   * @memberof ApisixAdminConsumersPut201ResponseValue
   */
  plugins?: object;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumersPut201ResponseValue
   */
  username?: string;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminConsumersPut201ResponseValue
   */
  labels?: object;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumersPut201ResponseValue
   */
  desc?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminConsumersPut201ResponseValue
   */
  group_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminConsumersPut201ResponseValue
   */
  create_time?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminConsumersPutRequest
 */
export interface ApisixAdminConsumersPutRequest {
  /**
   *
   * @type {object}
   * @memberof ApisixAdminConsumersPutRequest
   */
  plugins?: object;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumersPutRequest
   */
  username: string;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminConsumersPutRequest
   */
  labels?: object;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminConsumersPutRequest
   */
  desc?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminConsumersPutRequest
   */
  group_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
}
/**
 *
 * @export
 * @interface ApisixAdminGlobalRulesGet200Response
 */
export interface ApisixAdminGlobalRulesGet200Response {
  /**
   *
   * @type {Array<ApisixAdminGlobalRulesGet200ResponseListInner>}
   * @memberof ApisixAdminGlobalRulesGet200Response
   */
  list?: Array<ApisixAdminGlobalRulesGet200ResponseListInner>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminGlobalRulesGet200Response
   */
  total?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminGlobalRulesGet200ResponseListInner
 */
export interface ApisixAdminGlobalRulesGet200ResponseListInner {
  /**
   *
   * @type {ApisixAdminGlobalRulesGet200ResponseListInnerValue}
   * @memberof ApisixAdminGlobalRulesGet200ResponseListInner
   */
  value?: ApisixAdminGlobalRulesGet200ResponseListInnerValue;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminGlobalRulesGet200ResponseListInner
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminGlobalRulesGet200ResponseListInner
   */
  modifiedIndex?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminGlobalRulesGet200ResponseListInner
   */
  createdIndex?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminGlobalRulesGet200ResponseListInnerValue
 */
export interface ApisixAdminGlobalRulesGet200ResponseListInnerValue {
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminGlobalRulesGet200ResponseListInnerValue
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminGlobalRulesGet200ResponseListInnerValue
   */
  plugins: object;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminGlobalRulesGet200ResponseListInnerValue
   */
  update_time?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminGlobalRulesGet200ResponseListInnerValue
   */
  create_time?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminGlobalRulesIdPatchRequest
 */
export interface ApisixAdminGlobalRulesIdPatchRequest {
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminGlobalRulesIdPatchRequest
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminGlobalRulesIdPatchRequest
   */
  plugins: object;
}
/**
 *
 * @export
 * @interface ApisixAdminGlobalRulesIdPut201Response
 */
export interface ApisixAdminGlobalRulesIdPut201Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminGlobalRulesIdPut201Response
   */
  key?: string;
  /**
   *
   * @type {ApisixAdminGlobalRulesGet200ResponseListInnerValue}
   * @memberof ApisixAdminGlobalRulesIdPut201Response
   */
  value?: ApisixAdminGlobalRulesGet200ResponseListInnerValue;
}
/**
 *
 * @export
 * @interface ApisixAdminGlobalRulesIdPutRequest
 */
export interface ApisixAdminGlobalRulesIdPutRequest {
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminGlobalRulesIdPutRequest
   */
  id: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminGlobalRulesIdPutRequest
   */
  plugins: object;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginMetadataGet200Response
 */
export interface ApisixAdminPluginMetadataGet200Response {
  /**
   *
   * @type {Array<ApisixAdminPluginMetadataGet200ResponseListInner>}
   * @memberof ApisixAdminPluginMetadataGet200Response
   */
  list?: Array<ApisixAdminPluginMetadataGet200ResponseListInner>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginMetadataGet200Response
   */
  total?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginMetadataGet200ResponseListInner
 */
export interface ApisixAdminPluginMetadataGet200ResponseListInner {
  /**
   *
   * @type {object}
   * @memberof ApisixAdminPluginMetadataGet200ResponseListInner
   */
  value?: object;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginMetadataGet200ResponseListInner
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginMetadataGet200ResponseListInner
   */
  modifiedIndex?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginMetadataGet200ResponseListInner
   */
  createdIndex?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginMetadataPluginNamePut201Response
 */
export interface ApisixAdminPluginMetadataPluginNamePut201Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginMetadataPluginNamePut201Response
   */
  key?: string;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminPluginMetadataPluginNamePut201Response
   */
  value?: object;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200Response
 */
export interface ApisixAdminPluginsGet200Response {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseMqttProxy}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'mqtt-proxy': ApisixAdminPluginsGet200ResponseMqttProxy;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslog}
   * @memberof ApisixAdminPluginsGet200Response
   */
  syslog: ApisixAdminPluginsGet200ResponseSyslog;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConn}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'limit-conn': ApisixAdminPluginsGet200ResponseLimitConn;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestriction}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'ip-restriction': ApisixAdminPluginsGet200ResponseIpRestriction;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestriction}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'referer-restriction': ApisixAdminPluginsGet200ResponseRefererRestriction;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWolfRbac}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'wolf-rbac': ApisixAdminPluginsGet200ResponseWolfRbac;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewrite}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'response-rewrite': ApisixAdminPluginsGet200ResponseResponseRewrite;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseServerInfo}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'server-info': ApisixAdminPluginsGet200ResponseServerInfo;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCache}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'proxy-cache': ApisixAdminPluginsGet200ResponseProxyCache;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCors}
   * @memberof ApisixAdminPluginsGet200Response
   */
  cors: ApisixAdminPluginsGet200ResponseCors;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLogger}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'kafka-logger': ApisixAdminPluginsGet200ResponseKafkaLogger;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGoogleCloudLogging}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'google-cloud-logging': ApisixAdminPluginsGet200ResponseGoogleCloudLogging;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLoggly}
   * @memberof ApisixAdminPluginsGet200Response
   */
  loggly: ApisixAdminPluginsGet200ResponseLoggly;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzCasbin}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'authz-casbin': ApisixAdminPluginsGet200ResponseAuthzCasbin;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCasAuth}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'cas-auth': ApisixAdminPluginsGet200ResponseCasAuth;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRequestId}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'request-id': ApisixAdminPluginsGet200ResponseRequestId;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExtPluginPostReq}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'ext-plugin-post-req': ApisixAdminPluginsGet200ResponseExtPluginPostReq;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjection}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'fault-injection': ApisixAdminPluginsGet200ResponseFaultInjection;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCsrf}
   * @memberof ApisixAdminPluginsGet200Response
   */
  csrf: ApisixAdminPluginsGet200ResponseCsrf;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenfunction}
   * @memberof ApisixAdminPluginsGet200Response
   */
  openfunction: ApisixAdminPluginsGet200ResponseOpenfunction;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFileLogger}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'file-logger': ApisixAdminPluginsGet200ResponseFileLogger;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenidConnect}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'openid-connect': ApisixAdminPluginsGet200ResponseOpenidConnect;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTencentCloudCls}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'tencent-cloud-cls': ApisixAdminPluginsGet200ResponseTencentCloudCls;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHmacAuth}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'hmac-auth': ApisixAdminPluginsGet200ResponseHmacAuth;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAzureFunctions}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'azure-functions': ApisixAdminPluginsGet200ResponseAzureFunctions;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBodyTransformer}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'body-transformer': ApisixAdminPluginsGet200ResponseBodyTransformer;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseDegraphql}
   * @memberof ApisixAdminPluginsGet200Response
   */
  degraphql: ApisixAdminPluginsGet200ResponseDegraphql;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSlsLogger}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'sls-logger': ApisixAdminPluginsGet200ResponseSlsLogger;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGrpcTranscode}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'grpc-transcode': ApisixAdminPluginsGet200ResponseGrpcTranscode;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitReq}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'limit-req': ApisixAdminPluginsGet200ResponseLimitReq;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSkywalkingLogger}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'skywalking-logger': ApisixAdminPluginsGet200ResponseSkywalkingLogger;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKeyAuth}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'key-auth': ApisixAdminPluginsGet200ResponseKeyAuth;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExtPluginPostReq}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'ext-plugin-pre-req': ApisixAdminPluginsGet200ResponseExtPluginPostReq;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRealIp}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'real-ip': ApisixAdminPluginsGet200ResponseRealIp;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitCount}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'limit-count': ApisixAdminPluginsGet200ResponseLimitCount;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseConsumerRestriction}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'consumer-restriction': ApisixAdminPluginsGet200ResponseConsumerRestriction;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseClientControl}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'client-control': ApisixAdminPluginsGet200ResponseClientControl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzCasdoor}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'authz-casdoor': ApisixAdminPluginsGet200ResponseAuthzCasdoor;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseZipkin}
   * @memberof ApisixAdminPluginsGet200Response
   */
  zipkin: ApisixAdminPluginsGet200ResponseZipkin;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseMocking}
   * @memberof ApisixAdminPluginsGet200Response
   */
  mocking: ApisixAdminPluginsGet200ResponseMocking;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRocketmqLogger}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'rocketmq-logger': ApisixAdminPluginsGet200ResponseRocketmqLogger;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBasicAuth}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'basic-auth': ApisixAdminPluginsGet200ResponseBasicAuth;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseInspect}
   * @memberof ApisixAdminPluginsGet200Response
   */
  inspect: ApisixAdminPluginsGet200ResponseInspect;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUaRestriction}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'ua-restriction': ApisixAdminPluginsGet200ResponseUaRestriction;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHttpLogger}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'http-logger': ApisixAdminPluginsGet200ResponseHttpLogger;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponsePublicApi}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'public-api': ApisixAdminPluginsGet200ResponsePublicApi;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAwsLambda}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'aws-lambda': ApisixAdminPluginsGet200ResponseAwsLambda;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRedirect}
   * @memberof ApisixAdminPluginsGet200Response
   */
  redirect: ApisixAdminPluginsGet200ResponseRedirect;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenwhisk}
   * @memberof ApisixAdminPluginsGet200Response
   */
  openwhisk: ApisixAdminPluginsGet200ResponseOpenwhisk;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLdapAuth}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'ldap-auth': ApisixAdminPluginsGet200ResponseLdapAuth;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseEcho}
   * @memberof ApisixAdminPluginsGet200Response
   */
  echo: ApisixAdminPluginsGet200ResponseEcho;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSplunkHecLogging}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'splunk-hec-logging': ApisixAdminPluginsGet200ResponseSplunkHecLogging;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyMirror}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'proxy-mirror': ApisixAdminPluginsGet200ResponseProxyMirror;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyRewrite}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'proxy-rewrite': ApisixAdminPluginsGet200ResponseProxyRewrite;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExamplePlugin}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'example-plugin': ApisixAdminPluginsGet200ResponseExamplePlugin;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponsePrometheus}
   * @memberof ApisixAdminPluginsGet200Response
   */
  prometheus: ApisixAdminPluginsGet200ResponsePrometheus;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpa}
   * @memberof ApisixAdminPluginsGet200Response
   */
  opa: ApisixAdminPluginsGet200ResponseOpa;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplit}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'traffic-split': ApisixAdminPluginsGet200ResponseTrafficSplit;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseInspect}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'grpc-web': ApisixAdminPluginsGet200ResponseInspect;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseServerlessPostFunction}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'serverless-post-function': ApisixAdminPluginsGet200ResponseServerlessPostFunction;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUriBlocker}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'uri-blocker': ApisixAdminPluginsGet200ResponseUriBlocker;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzKeycloak}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'authz-keycloak': ApisixAdminPluginsGet200ResponseAuthzKeycloak;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUdpLogger}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'udp-logger': ApisixAdminPluginsGet200ResponseUdpLogger;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRequestValidation}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'request-validation': ApisixAdminPluginsGet200ResponseRequestValidation;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAi}
   * @memberof ApisixAdminPluginsGet200Response
   */
  ai: ApisixAdminPluginsGet200ResponseAi;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseServerlessPostFunction}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'serverless-pre-function': ApisixAdminPluginsGet200ResponseServerlessPostFunction;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseForwardAuth}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'forward-auth': ApisixAdminPluginsGet200ResponseForwardAuth;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreaker}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'api-breaker': ApisixAdminPluginsGet200ResponseApiBreaker;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTcpLogger}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'tcp-logger': ApisixAdminPluginsGet200ResponseTcpLogger;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseElasticsearchLogger}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'elasticsearch-logger': ApisixAdminPluginsGet200ResponseElasticsearchLogger;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaProxy}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'kafka-proxy': ApisixAdminPluginsGet200ResponseKafkaProxy;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExtPluginPostReq}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'ext-plugin-post-resp': ApisixAdminPluginsGet200ResponseExtPluginPostReq;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseClickhouseLogger}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'clickhouse-logger': ApisixAdminPluginsGet200ResponseClickhouseLogger;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWorkflow}
   * @memberof ApisixAdminPluginsGet200Response
   */
  workflow: ApisixAdminPluginsGet200ResponseWorkflow;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGzip}
   * @memberof ApisixAdminPluginsGet200Response
   */
  gzip: ApisixAdminPluginsGet200ResponseGzip;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyControl}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'proxy-control': ApisixAdminPluginsGet200ResponseProxyControl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseDatadog}
   * @memberof ApisixAdminPluginsGet200Response
   */
  datadog: ApisixAdminPluginsGet200ResponseDatadog;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseJwtAuth}
   * @memberof ApisixAdminPluginsGet200Response
   */
  'jwt-auth': ApisixAdminPluginsGet200ResponseJwtAuth;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAi
 */
export interface ApisixAdminPluginsGet200ResponseAi {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAi
   */
  version: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAi
   */
  scope: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAiSchema}
   * @memberof ApisixAdminPluginsGet200ResponseAi
   */
  schema: ApisixAdminPluginsGet200ResponseAiSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAi
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAiSchema
 */
export interface ApisixAdminPluginsGet200ResponseAiSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAiSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseServerInfoSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAiSchema
   */
  properties: ApisixAdminPluginsGet200ResponseServerInfoSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreaker
 */
export interface ApisixAdminPluginsGet200ResponseApiBreaker {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreaker
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreakerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreaker
   */
  schema: ApisixAdminPluginsGet200ResponseApiBreakerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreaker
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreakerSchema
 */
export interface ApisixAdminPluginsGet200ResponseApiBreakerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreakerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseApiBreakerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaProperties
   */
  break_response_code: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaProperties
   */
  break_response_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeaders}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaProperties
   */
  break_response_headers: ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeaders;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaProperties
   */
  max_breaker_sec: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthy}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaProperties
   */
  healthy: ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthy;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthy}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaProperties
   */
  unhealthy: ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthy;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeaders
 */
export interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeaders {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItems}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeaders
   */
  items: ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItems;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeaders
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItems
 */
export interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItems {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItems
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItems
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItemsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItems
   */
  properties: ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItemsProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItemsProperties
 */
export interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItemsProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItemsProperties
   */
  value: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesBreakResponseHeadersItemsProperties
   */
  key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthy
 */
export interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthy {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthy
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyDefault}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthy
   */
  default: ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyDefault;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyProperties}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthy
   */
  properties: ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyDefault
 */
export interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyDefault {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyDefault
   */
  successes: number;
  /**
   *
   * @type {Array<number>}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyDefault
   */
  http_statuses: Array<number>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyProperties
 */
export interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyProperties
   */
  successes: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesHealthyProperties
   */
  http_statuses: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthy
 */
export interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthy {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthy
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyDefault}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthy
   */
  default: ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyDefault;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyProperties}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthy
   */
  properties: ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyDefault
 */
export interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyDefault {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyDefault
   */
  failures: number;
  /**
   *
   * @type {Array<number>}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyDefault
   */
  http_statuses: Array<number>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyProperties
 */
export interface ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyProperties
   */
  failures: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses}
   * @memberof ApisixAdminPluginsGet200ResponseApiBreakerSchemaPropertiesUnhealthyProperties
   */
  http_statuses: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzCasbin
 */
export interface ApisixAdminPluginsGet200ResponseAuthzCasbin {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbin
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbin
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzCasbinSchema}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbin
   */
  schema: ApisixAdminPluginsGet200ResponseAuthzCasbinSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbin
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchema
 */
export interface ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchema
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchema
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchema
   */
  properties: ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchemaProperties
   */
  policy: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinMetadataSchemaProperties
   */
  model: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzCasbinSchema
 */
export interface ApisixAdminPluginsGet200ResponseAuthzCasbinSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinSchema
   */
  oneOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzCasbinSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinSchema
   */
  properties: ApisixAdminPluginsGet200ResponseAuthzCasbinSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzCasbinSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseAuthzCasbinSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinSchemaProperties
   */
  model_path: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinSchemaProperties
   */
  policy_path: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinSchemaProperties
   */
  model: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinSchemaProperties
   */
  policy: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasbinSchemaProperties
   */
  username: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzCasdoor
 */
export interface ApisixAdminPluginsGet200ResponseAuthzCasdoor {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoor
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzCasdoorSchema}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoor
   */
  schema: ApisixAdminPluginsGet200ResponseAuthzCasdoorSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoor
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzCasdoorSchema
 */
export interface ApisixAdminPluginsGet200ResponseAuthzCasdoorSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoorSchema
   */
  required: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoorSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoorSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoorSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzCasdoorSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoorSchema
   */
  properties: ApisixAdminPluginsGet200ResponseAuthzCasdoorSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzCasdoorSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseAuthzCasdoorSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoorSchemaProperties
   */
  callback_url: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoorSchemaProperties
   */
  client_id: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoorSchemaProperties
   */
  endpoint_addr: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoorSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzCasdoorSchemaProperties
   */
  client_secret: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzKeycloak
 */
export interface ApisixAdminPluginsGet200ResponseAuthzKeycloak {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloak
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzKeycloakSchema}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloak
   */
  schema: ApisixAdminPluginsGet200ResponseAuthzKeycloakSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloak
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchema
 */
export interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchema
   */
  allOf: Array<ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInner>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchema
   */
  required: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchema
   */
  properties: ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInner
 */
export interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInner {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInner
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInner>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInner
 */
export interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInner {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInner
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInnerProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInner
   */
  properties: ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInnerProperties;
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInner
   */
  anyOf?: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInnerProperties
 */
export interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInnerProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInnerPropertiesLazyLoadPaths}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInnerProperties
   */
  lazy_load_paths: ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInnerPropertiesLazyLoadPaths;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInnerPropertiesLazyLoadPaths
 */
export interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInnerPropertiesLazyLoadPaths {
  /**
   *
   * @type {Array<boolean>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaAllOfInnerAnyOfInnerPropertiesLazyLoadPaths
   */
  enum: Array<boolean>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  keepalive: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  client_id: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  keepalive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  client_secret: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesGrantType}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  grant_type: ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesGrantType;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  token_endpoint: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  resource_registration_endpoint: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  policy_enforcement_mode: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  password_grant_token_generation_incoming_uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  access_token_expires_leeway: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  lazy_load_paths: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  http_method_as_scope: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  cache_ttl_seconds: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  access_denied_redirect_uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  access_token_expires_in: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesPermissions}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  permissions: ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesPermissions;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  refresh_token_expires_in: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  refresh_token_expires_leeway: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  keepalive_pool: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  discovery: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesGrantType
 */
export interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesGrantType {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesGrantType
   */
  enum: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesGrantType
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesGrantType
   */
  minLength: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesGrantType
   */
  maxLength: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesGrantType
   */
  default: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesPermissions
 */
export interface ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesPermissions {
  /**
   *
   * @type {object}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesPermissions
   */
  default: object;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesPermissions
   */
  type: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesPermissions
   */
  uniqueItems: boolean;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseAuthzKeycloakSchemaPropertiesPermissions
   */
  items: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAwsLambda
 */
export interface ApisixAdminPluginsGet200ResponseAwsLambda {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambda
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAwsLambdaSchema}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambda
   */
  schema: ApisixAdminPluginsGet200ResponseAwsLambdaSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambda
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAwsLambdaSchema
 */
export interface ApisixAdminPluginsGet200ResponseAwsLambdaSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchema
   */
  properties: ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties
   */
  keepalive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties
   */
  function_uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties
   */
  keepalive: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties
   */
  keepalive_pool: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorization}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties
   */
  authorization: ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorization;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorization
 */
export interface ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorization {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorization
   */
  properties: ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorization
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationProperties
 */
export interface ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIam}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationProperties
   */
  iam: ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIam;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationProperties
   */
  apikey: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIam
 */
export interface ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIam {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIam
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIam
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIamProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIam
   */
  properties: ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIamProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIamProperties
 */
export interface ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIamProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIamProperties
   */
  secretkey: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIamProperties
   */
  aws_region: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIamProperties
   */
  accesskey: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions}
   * @memberof ApisixAdminPluginsGet200ResponseAwsLambdaSchemaPropertiesAuthorizationPropertiesIamProperties
   */
  service: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAzureFunctions
 */
export interface ApisixAdminPluginsGet200ResponseAzureFunctions {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctions
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctions
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAzureFunctionsSchema}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctions
   */
  schema: ApisixAdminPluginsGet200ResponseAzureFunctionsSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctions
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchema
 */
export interface ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchema {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchema
   */
  properties: ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchemaProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchema
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchemaProperties
   */
  master_clientid: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsMetadataSchemaProperties
   */
  master_apikey: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAzureFunctionsSchema
 */
export interface ApisixAdminPluginsGet200ResponseAzureFunctionsSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchema
   */
  properties: ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties
   */
  keepalive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties
   */
  function_uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties
   */
  keepalive: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties
   */
  keepalive_pool: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorization}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties
   */
  authorization: ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorization;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorization
 */
export interface ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorization {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorizationProperties}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorization
   */
  properties: ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorizationProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorization
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorizationProperties
 */
export interface ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorizationProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorizationProperties
   */
  clientid: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseAzureFunctionsSchemaPropertiesAuthorizationProperties
   */
  apikey: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseBasicAuth
 */
export interface ApisixAdminPluginsGet200ResponseBasicAuth {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuth
   */
  priority: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuth
   */
  consumer_schema: ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchema;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuth
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBasicAuthSchema}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuth
   */
  schema: ApisixAdminPluginsGet200ResponseBasicAuthSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuth
   */
  version: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchema
 */
export interface ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchema
   */
  title: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchemaProperties
   */
  password: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchemaProperties
   */
  username: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseBasicAuthSchema
 */
export interface ApisixAdminPluginsGet200ResponseBasicAuthSchema {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBasicAuthSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthSchema
   */
  properties: ApisixAdminPluginsGet200ResponseBasicAuthSchemaProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthSchema
   */
  $comment: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthSchema
   */
  title: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseBasicAuthSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseBasicAuthSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthSchemaProperties
   */
  hide_credentials: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseBasicAuthSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseBodyTransformer
 */
export interface ApisixAdminPluginsGet200ResponseBodyTransformer {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformer
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBodyTransformerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformer
   */
  schema: ApisixAdminPluginsGet200ResponseBodyTransformerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformer
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseBodyTransformerSchema
 */
export interface ApisixAdminPluginsGet200ResponseBodyTransformerSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchema
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBodyTransformerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseBodyTransformerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseBodyTransformerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseBodyTransformerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponse}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchemaProperties
   */
  response: ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponse;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponse}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchemaProperties
   */
  request: ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponse;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponse
 */
export interface ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponse {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponse
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponse
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponseProperties}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponse
   */
  properties: ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponseProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponseProperties
 */
export interface ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponseProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponseProperties
   */
  template: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponsePropertiesInputFormat}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponseProperties
   */
  input_format: ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponsePropertiesInputFormat;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponsePropertiesInputFormat
 */
export interface ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponsePropertiesInputFormat {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponsePropertiesInputFormat
   */
  enum: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseBodyTransformerSchemaPropertiesResponsePropertiesInputFormat
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCasAuth
 */
export interface ApisixAdminPluginsGet200ResponseCasAuth {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseCasAuth
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCasAuthSchema}
   * @memberof ApisixAdminPluginsGet200ResponseCasAuth
   */
  schema: ApisixAdminPluginsGet200ResponseCasAuthSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseCasAuth
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCasAuthSchema
 */
export interface ApisixAdminPluginsGet200ResponseCasAuthSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseCasAuthSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCasAuthSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCasAuthSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCasAuthSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseCasAuthSchema
   */
  properties: ApisixAdminPluginsGet200ResponseCasAuthSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCasAuthSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseCasAuthSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseCasAuthSchemaProperties
   */
  idp_uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseCasAuthSchemaProperties
   */
  cas_callback_uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseCasAuthSchemaProperties
   */
  logout_uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseCasAuthSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseClickhouseLogger
 */
export interface ApisixAdminPluginsGet200ResponseClickhouseLogger {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLogger
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLogger
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseClickhouseLoggerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLogger
   */
  schema: ApisixAdminPluginsGet200ResponseClickhouseLoggerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLogger
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseClickhouseLoggerSchema
 */
export interface ApisixAdminPluginsGet200ResponseClickhouseLoggerSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchema
   */
  oneOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  endpoint_addrs: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  endpoint_addr: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  user: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  include_resp_body_expr: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  include_resp_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  database: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  logtable: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  password: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  include_req_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  include_req_body_expr: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseClickhouseLoggerSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseClientControl
 */
export interface ApisixAdminPluginsGet200ResponseClientControl {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseClientControl
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseClientControlSchema}
   * @memberof ApisixAdminPluginsGet200ResponseClientControl
   */
  schema: ApisixAdminPluginsGet200ResponseClientControlSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseClientControl
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseClientControlSchema
 */
export interface ApisixAdminPluginsGet200ResponseClientControlSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseClientControlSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseClientControlSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseClientControlSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseClientControlSchema
   */
  properties: ApisixAdminPluginsGet200ResponseClientControlSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseClientControlSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseClientControlSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst}
   * @memberof ApisixAdminPluginsGet200ResponseClientControlSchemaProperties
   */
  max_body_size: ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseClientControlSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseConsumerRestriction
 */
export interface ApisixAdminPluginsGet200ResponseConsumerRestriction {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestriction
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseConsumerRestrictionSchema}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestriction
   */
  schema: ApisixAdminPluginsGet200ResponseConsumerRestrictionSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestriction
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchema
 */
export interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchema
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchema
   */
  properties: ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaProperties
   */
  blacklist: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaProperties
   */
  rejected_msg: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaProperties
   */
  rejected_code: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaProperties
   */
  type: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethods}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaProperties
   */
  allowed_by_methods: ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethods;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaProperties
   */
  whitelist: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethods
 */
export interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethods {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItems}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethods
   */
  items: ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItems;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethods
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItems
 */
export interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItems {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItems
   */
  properties: ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItems
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsProperties
 */
export interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsProperties
   */
  user: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsPropertiesMethods}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsProperties
   */
  methods: ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsPropertiesMethods;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsPropertiesMethods
 */
export interface ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsPropertiesMethods {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsPropertiesMethods
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsPropertiesMethods
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems}
   * @memberof ApisixAdminPluginsGet200ResponseConsumerRestrictionSchemaPropertiesAllowedByMethodsItemsPropertiesMethods
   */
  items: ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCors
 */
export interface ApisixAdminPluginsGet200ResponseCors {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseCors
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseCorsMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseCors
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsSchema}
   * @memberof ApisixAdminPluginsGet200ResponseCors
   */
  schema: ApisixAdminPluginsGet200ResponseCorsSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseCors
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCorsMetadataSchema
 */
export interface ApisixAdminPluginsGet200ResponseCorsMetadataSchema {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsMetadataSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseCorsMetadataSchema
   */
  properties: ApisixAdminPluginsGet200ResponseCorsMetadataSchemaProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsMetadataSchema
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCorsMetadataSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseCorsMetadataSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsMetadataSchemaPropertiesAllowOrigins}
   * @memberof ApisixAdminPluginsGet200ResponseCorsMetadataSchemaProperties
   */
  allow_origins: ApisixAdminPluginsGet200ResponseCorsMetadataSchemaPropertiesAllowOrigins;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCorsMetadataSchemaPropertiesAllowOrigins
 */
export interface ApisixAdminPluginsGet200ResponseCorsMetadataSchemaPropertiesAllowOrigins {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseCorsMetadataSchemaPropertiesAllowOrigins
   */
  additionalProperties: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsMetadataSchemaPropertiesAllowOrigins
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCorsSchema
 */
export interface ApisixAdminPluginsGet200ResponseCorsSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchema
   */
  properties: ApisixAdminPluginsGet200ResponseCorsSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCorsSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseCorsSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaProperties
   */
  expose_headers: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaProperties
   */
  allow_credential: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOrigins}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaProperties
   */
  allow_origins: ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOrigins;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaProperties
   */
  max_age: ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOriginsByRegex}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaProperties
   */
  allow_origins_by_regex: ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOriginsByRegex;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaProperties
   */
  allow_methods: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOriginsByRegex}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaProperties
   */
  allow_origins_by_metadata: ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOriginsByRegex;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaProperties
   */
  allow_headers: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOrigins
 */
export interface ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOrigins {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOrigins
   */
  pattern: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOrigins
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOrigins
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOrigins
   */
  default: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOriginsByRegex
 */
export interface ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOriginsByRegex {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOriginsByRegex
   */
  items: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOriginsByRegex
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOriginsByRegex
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOriginsByRegex
   */
  description: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesAllowOriginsByRegex
   */
  uniqueItems: boolean;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge
 */
export interface ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge
   */
  description: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge
   */
  default: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCsrf
 */
export interface ApisixAdminPluginsGet200ResponseCsrf {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseCsrf
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCsrfSchema}
   * @memberof ApisixAdminPluginsGet200ResponseCsrf
   */
  schema: ApisixAdminPluginsGet200ResponseCsrfSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseCsrf
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCsrfSchema
 */
export interface ApisixAdminPluginsGet200ResponseCsrfSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseCsrfSchema
   */
  required: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseCsrfSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCsrfSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseCsrfSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCsrfSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseCsrfSchema
   */
  properties: ApisixAdminPluginsGet200ResponseCsrfSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseCsrfSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseCsrfSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseCsrfSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge}
   * @memberof ApisixAdminPluginsGet200ResponseCsrfSchemaProperties
   */
  expires: ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseCsrfSchemaProperties
   */
  key: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions}
   * @memberof ApisixAdminPluginsGet200ResponseCsrfSchemaProperties
   */
  name: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseDatadog
 */
export interface ApisixAdminPluginsGet200ResponseDatadog {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseDatadogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseDatadog
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseDatadogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseDatadog
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseDatadogSchema}
   * @memberof ApisixAdminPluginsGet200ResponseDatadog
   */
  schema: ApisixAdminPluginsGet200ResponseDatadogSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseDatadog
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseDatadogMetadataSchema
 */
export interface ApisixAdminPluginsGet200ResponseDatadogMetadataSchema {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogMetadataSchema
   */
  properties: ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogMetadataSchema
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaPropertiesConstantTags}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaProperties
   */
  constant_tags: ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaPropertiesConstantTags;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaProperties
   */
  host: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaProperties
   */
  namespace: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaProperties
   */
  port: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaPropertiesConstantTags
 */
export interface ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaPropertiesConstantTags {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaPropertiesConstantTags
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaPropertiesConstantTags
   */
  default: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogMetadataSchemaPropertiesConstantTags
   */
  items: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseDatadogSchema
 */
export interface ApisixAdminPluginsGet200ResponseDatadogSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseDatadogSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogSchema
   */
  properties: ApisixAdminPluginsGet200ResponseDatadogSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseDatadogSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseDatadogSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseDatadogSchemaProperties
   */
  prefer_name: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseDegraphql
 */
export interface ApisixAdminPluginsGet200ResponseDegraphql {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseDegraphql
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseDegraphqlSchema}
   * @memberof ApisixAdminPluginsGet200ResponseDegraphql
   */
  schema: ApisixAdminPluginsGet200ResponseDegraphqlSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseDegraphql
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseDegraphqlSchema
 */
export interface ApisixAdminPluginsGet200ResponseDegraphqlSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseDegraphqlSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseDegraphqlSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseDegraphqlSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseDegraphqlSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseDegraphqlSchema
   */
  properties: ApisixAdminPluginsGet200ResponseDegraphqlSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseDegraphqlSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseDegraphqlSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseDegraphqlSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseDegraphqlSchemaProperties
   */
  variables: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseDegraphqlSchemaProperties
   */
  query: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseDegraphqlSchemaProperties
   */
  operation_name: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseEcho
 */
export interface ApisixAdminPluginsGet200ResponseEcho {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseEcho
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseEchoSchema}
   * @memberof ApisixAdminPluginsGet200ResponseEcho
   */
  schema: ApisixAdminPluginsGet200ResponseEchoSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseEcho
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseEchoSchema
 */
export interface ApisixAdminPluginsGet200ResponseEchoSchema {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchema
   */
  minProperties: number;
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchema
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseEchoSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchema
   */
  properties: ApisixAdminPluginsGet200ResponseEchoSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseEchoSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseEchoSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseEchoSchemaPropertiesHeaders}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchemaProperties
   */
  headers: ApisixAdminPluginsGet200ResponseEchoSchemaPropertiesHeaders;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchemaProperties
   */
  after_body: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchemaProperties
   */
  body: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchemaProperties
   */
  before_body: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseEchoSchemaPropertiesHeaders
 */
export interface ApisixAdminPluginsGet200ResponseEchoSchemaPropertiesHeaders {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchemaPropertiesHeaders
   */
  minProperties: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchemaPropertiesHeaders
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseEchoSchemaPropertiesHeaders
   */
  description: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseElasticsearchLogger
 */
export interface ApisixAdminPluginsGet200ResponseElasticsearchLogger {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLogger
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLogger
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLogger
   */
  schema: ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLogger
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchema
 */
export interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchema
   */
  oneOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  endpoint_addrs: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  endpoint_addr: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesField}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  field: ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesField;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuth}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  auth: ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuth;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuth
 */
export interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuth {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuth
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuth
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuthProperties}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuth
   */
  properties: ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuthProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuthProperties
 */
export interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuthProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuthProperties
   */
  password: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesAuthProperties
   */
  username: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesField
 */
export interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesField {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesField
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesField
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesFieldProperties}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesField
   */
  properties: ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesFieldProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesFieldProperties
 */
export interface ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesFieldProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesFieldProperties
   */
  type: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseElasticsearchLoggerSchemaPropertiesFieldProperties
   */
  index: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExamplePlugin
 */
export interface ApisixAdminPluginsGet200ResponseExamplePlugin {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePlugin
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePlugin
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExamplePluginSchema}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePlugin
   */
  schema: ApisixAdminPluginsGet200ResponseExamplePluginSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePlugin
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchema
 */
export interface ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchema
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchema
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchema
   */
  properties: ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchemaProperties
   */
  ikey: ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginMetadataSchemaProperties
   */
  skey: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExamplePluginSchema
 */
export interface ApisixAdminPluginsGet200ResponseExamplePluginSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExamplePluginSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchema
   */
  properties: ApisixAdminPluginsGet200ResponseExamplePluginSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExamplePluginSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseExamplePluginSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchemaProperties
   */
  i: ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchemaProperties
   */
  ip: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExamplePluginSchemaPropertiesT}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchemaProperties
   */
  t: ApisixAdminPluginsGet200ResponseExamplePluginSchemaPropertiesT;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchemaProperties
   */
  s: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchemaProperties
   */
  port: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExamplePluginSchemaPropertiesT
 */
export interface ApisixAdminPluginsGet200ResponseExamplePluginSchemaPropertiesT {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchemaPropertiesT
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseExamplePluginSchemaPropertiesT
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExtPluginPostReq
 */
export interface ApisixAdminPluginsGet200ResponseExtPluginPostReq {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReq
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExtPluginPostReqSchema}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReq
   */
  schema: ApisixAdminPluginsGet200ResponseExtPluginPostReqSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReq
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExtPluginPostReqSchema
 */
export interface ApisixAdminPluginsGet200ResponseExtPluginPostReqSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchema
   */
  properties: ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConf}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaProperties
   */
  conf: ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConf;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaProperties
   */
  allow_degradation: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConf
 */
export interface ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConf {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConf
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConf
   */
  minItems: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItems}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConf
   */
  items: ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItems
 */
export interface ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItems {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItems
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItems
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItemsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItems
   */
  properties: ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItemsProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItemsProperties
 */
export interface ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItemsProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItemsProperties
   */
  value: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseExtPluginPostReqSchemaPropertiesConfItemsProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFaultInjection
 */
export interface ApisixAdminPluginsGet200ResponseFaultInjection {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjection
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchema}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjection
   */
  schema: ApisixAdminPluginsGet200ResponseFaultInjectionSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjection
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFaultInjectionSchema
 */
export interface ApisixAdminPluginsGet200ResponseFaultInjectionSchema {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchema
   */
  minProperties: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchema
   */
  properties: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbort}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaProperties
   */
  abort: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbort;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelay}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaProperties
   */
  delay: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelay;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbort
 */
export interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbort {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbort
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbort
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortProperties}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbort
   */
  properties: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortProperties
 */
export interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesVars}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortProperties
   */
  vars: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesVars;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortProperties
   */
  percentage: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortProperties
   */
  http_status: ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortProperties
   */
  body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage
 */
export interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage
   */
  minimum: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage
   */
  maximum: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesVars
 */
export interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesVars {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesVars
   */
  maxItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesVars
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesVars
   */
  items: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelay
 */
export interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelay {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelay
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelay
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelayProperties}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelay
   */
  properties: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelayProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelayProperties
 */
export interface ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelayProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelayProperties
   */
  percentage: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelayProperties
   */
  duration: ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesVars}
   * @memberof ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesDelayProperties
   */
  vars: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesVars;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFileLogger
 */
export interface ApisixAdminPluginsGet200ResponseFileLogger {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseFileLogger
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseFileLogger
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFileLoggerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseFileLogger
   */
  schema: ApisixAdminPluginsGet200ResponseFileLoggerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseFileLogger
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFileLoggerSchema
 */
export interface ApisixAdminPluginsGet200ResponseFileLoggerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseFileLoggerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseFileLoggerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseFileLoggerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFileLoggerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseFileLoggerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseFileLoggerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseFileLoggerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseFileLoggerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseFileLoggerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseFileLoggerSchemaProperties
   */
  include_resp_body_expr: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseFileLoggerSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseFileLoggerSchemaProperties
   */
  path: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseFileLoggerSchemaProperties
   */
  include_resp_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseForwardAuth
 */
export interface ApisixAdminPluginsGet200ResponseForwardAuth {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuth
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseForwardAuthSchema}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuth
   */
  schema: ApisixAdminPluginsGet200ResponseForwardAuthSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuth
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseForwardAuthSchema
 */
export interface ApisixAdminPluginsGet200ResponseForwardAuthSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchema
   */
  properties: ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
   */
  upstream_headers: ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
   */
  keepalive: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
   */
  keepalive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
   */
  request_method: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
   */
  request_headers: ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
   */
  uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
   */
  keepalive_pool: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
   */
  client_headers: ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaProperties
   */
  timeout: ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders
 */
export interface ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders
   */
  items: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders
   */
  description: string;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminPluginsGet200ResponseForwardAuthSchemaPropertiesUpstreamHeaders
   */
  default: object;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGoogleCloudLogging
 */
export interface ApisixAdminPluginsGet200ResponseGoogleCloudLogging {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLogging
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLogging
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchema}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLogging
   */
  schema: ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLogging
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchema
 */
export interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchema
   */
  oneOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchema
   */
  properties: ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResource}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  resource: ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResource;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  auth_file: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  log_id: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfig}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  auth_config: ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfig;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfig
 */
export interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfig {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfig
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfig
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigProperties}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfig
   */
  properties: ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigProperties
 */
export interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigProperties
   */
  private_key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigProperties
   */
  project_id: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigProperties
   */
  token_uri: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigPropertiesScopes}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigProperties
   */
  scopes: ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigPropertiesScopes;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigProperties
   */
  entries_uri: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigPropertiesScopes
 */
export interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigPropertiesScopes {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigPropertiesScopes
   */
  items: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigPropertiesScopes
   */
  default: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigPropertiesScopes
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigPropertiesScopes
   */
  minItems: number;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesAuthConfigPropertiesScopes
   */
  uniqueItems: boolean;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResource
 */
export interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResource {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResource
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResource
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResource
   */
  default: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResourceProperties}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResource
   */
  properties: ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResourceProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResourceProperties
 */
export interface ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResourceProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResourceProperties
   */
  labels: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseGoogleCloudLoggingSchemaPropertiesResourceProperties
   */
  type: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGrpcTranscode
 */
export interface ApisixAdminPluginsGet200ResponseGrpcTranscode {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscode
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGrpcTranscodeSchema}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscode
   */
  schema: ApisixAdminPluginsGet200ResponseGrpcTranscodeSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscode
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchema
 */
export interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchema
   */
  $comment: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchema
   */
  type: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchema
   */
  additionalProperties: boolean;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchema
   */
  properties: ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties
   */
  status_detail_type: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoId}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties
   */
  proto_id: ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoId;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties
   */
  method: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties
   */
  deadline: ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOption}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties
   */
  pb_option: ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOption;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties
   */
  show_status_in_body: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaProperties
   */
  service: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOption
 */
export interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOption {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOption
   */
  default: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOption
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOption
   */
  minItems: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOptionItems}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOption
   */
  items: ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOptionItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOptionItems
 */
export interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOptionItems {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems>}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOptionItems
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesPbOptionItems
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoId
 */
export interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoId {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoIdAnyOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoId
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoIdAnyOfInner>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoIdAnyOfInner
 */
export interface ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoIdAnyOfInner {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoIdAnyOfInner
   */
  pattern?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoIdAnyOfInner
   */
  minLength?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoIdAnyOfInner
   */
  maxLength?: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoIdAnyOfInner
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoIdAnyOfInner
   */
  minimum?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGzip
 */
export interface ApisixAdminPluginsGet200ResponseGzip {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGzip
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGzipSchema}
   * @memberof ApisixAdminPluginsGet200ResponseGzip
   */
  schema: ApisixAdminPluginsGet200ResponseGzipSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGzip
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGzipSchema
 */
export interface ApisixAdminPluginsGet200ResponseGzipSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGzipSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchema
   */
  properties: ApisixAdminPluginsGet200ResponseGzipSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGzipSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseGzipSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypes}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaProperties
   */
  types: ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypes;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaProperties
   */
  vary: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffers}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaProperties
   */
  buffers: ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffers;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaProperties
   */
  comp_level: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesHttpVersion}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaProperties
   */
  http_version: ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesHttpVersion;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaProperties
   */
  min_length: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffers
 */
export interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffers {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffers
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersDefault}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffers
   */
  default: ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersDefault;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersProperties}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffers
   */
  properties: ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersDefault
 */
export interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersDefault {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersDefault
   */
  number: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersDefault
   */
  size: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersProperties
 */
export interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersProperties
   */
  number: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesBuffersProperties
   */
  size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesHttpVersion
 */
export interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesHttpVersion {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesHttpVersion
   */
  default: number;
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesHttpVersionEnumInner>}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesHttpVersion
   */
  enum: Array<ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesHttpVersionEnumInner>;
}
/**
 * @type ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesHttpVersionEnumInner
 * @export
 */
export type ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesHttpVersionEnumInner = number;

/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypes
 */
export interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypes {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypes
   */
  default: Array<string>;
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypesAnyOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypes
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypesAnyOfInner>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypesAnyOfInner
 */
export interface ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypesAnyOfInner {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypesAnyOfInner
   */
  minItems?: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypesAnyOfInner
   */
  type?: string;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypesAnyOfInner
   */
  items?: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseGzipSchemaPropertiesTypesAnyOfInner
   */
  enum?: Array<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseHmacAuth
 */
export interface ApisixAdminPluginsGet200ResponseHmacAuth {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuth
   */
  priority: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuth
   */
  consumer_schema: ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchema;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuth
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHmacAuthSchema}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuth
   */
  schema: ApisixAdminPluginsGet200ResponseHmacAuthSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuth
   */
  version: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchema
 */
export interface ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchema
   */
  title: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties
   */
  algorithm: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties
   */
  clock_skew: ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesSignedHeaders}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties
   */
  signed_headers: ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesSignedHeaders;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties
   */
  secret_key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesEncodeUriParams}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties
   */
  encode_uri_params: ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesEncodeUriParams;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesEncodeUriParams}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties
   */
  validate_request_body: ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesEncodeUriParams;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesMaxReqBody}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties
   */
  max_req_body: ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesMaxReqBody;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties
   */
  access_key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesEncodeUriParams}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaProperties
   */
  keep_headers: ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesEncodeUriParams;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesEncodeUriParams
 */
export interface ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesEncodeUriParams {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesEncodeUriParams
   */
  type: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesEncodeUriParams
   */
  default: boolean;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesEncodeUriParams
   */
  title: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesMaxReqBody
 */
export interface ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesMaxReqBody {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesMaxReqBody
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesMaxReqBody
   */
  default: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesMaxReqBody
   */
  title: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesSignedHeaders
 */
export interface ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesSignedHeaders {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesSignedHeaders
   */
  items: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthConsumerSchemaPropertiesSignedHeaders
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseHmacAuthSchema
 */
export interface ApisixAdminPluginsGet200ResponseHmacAuthSchema {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseServerInfoSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthSchema
   */
  properties: ApisixAdminPluginsGet200ResponseServerInfoSchemaProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthSchema
   */
  $comment: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHmacAuthSchema
   */
  title: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseHttpLogger
 */
export interface ApisixAdminPluginsGet200ResponseHttpLogger {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLogger
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLogger
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHttpLoggerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLogger
   */
  schema: ApisixAdminPluginsGet200ResponseHttpLoggerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLogger
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseHttpLoggerSchema
 */
export interface ApisixAdminPluginsGet200ResponseHttpLoggerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  include_req_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  concat_method: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  uri: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  auth_header: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  include_resp_body_expr: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseHttpLoggerSchemaProperties
   */
  include_resp_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseInspect
 */
export interface ApisixAdminPluginsGet200ResponseInspect {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseInspect
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseServerInfoSchema}
   * @memberof ApisixAdminPluginsGet200ResponseInspect
   */
  schema: ApisixAdminPluginsGet200ResponseServerInfoSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseInspect
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseIpRestriction
 */
export interface ApisixAdminPluginsGet200ResponseIpRestriction {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestriction
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchema}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestriction
   */
  schema: ApisixAdminPluginsGet200ResponseIpRestrictionSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestriction
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseIpRestrictionSchema
 */
export interface ApisixAdminPluginsGet200ResponseIpRestrictionSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchema
   */
  oneOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchema
   */
  properties: ApisixAdminPluginsGet200ResponseIpRestrictionSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner
 */
export interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner
   */
  required: Array<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaProperties
   */
  blacklist: ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklist;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaProperties
   */
  message: ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaProperties
   */
  whitelist: ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklist;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklist
 */
export interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklist {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklist
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklist
   */
  minItems: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklist
   */
  items: ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItems
 */
export interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItems {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItemsAnyOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItems
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItemsAnyOfInner>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItemsAnyOfInner
 */
export interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItemsAnyOfInner {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItemsAnyOfInner
   */
  format: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItemsAnyOfInner
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItemsAnyOfInner
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklistItemsAnyOfInner
   */
  pattern: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage
 */
export interface ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage
   */
  minLength: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage
   */
  maxLength: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage
   */
  default: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseJwtAuth
 */
export interface ApisixAdminPluginsGet200ResponseJwtAuth {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuth
   */
  priority: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuth
   */
  consumer_schema: ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchema;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuth
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseJwtAuthSchema}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuth
   */
  schema: ApisixAdminPluginsGet200ResponseJwtAuthSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuth
   */
  version: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchema
 */
export interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchema {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependencies}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchema
   */
  dependencies: ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependencies;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchema
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependencies
 */
export interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependencies {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithm}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependencies
   */
  algorithm: ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithm;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithm
 */
export interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithm {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithm
   */
  oneOf: Array<ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInner>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInner
 */
export interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInner {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerProperties}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInner
   */
  properties: ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerProperties;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInner
   */
  required?: Array<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerProperties
 */
export interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerPropertiesAlgorithm}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerProperties
   */
  algorithm: ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerPropertiesAlgorithm;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerProperties
   */
  public_key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerProperties
   */
  private_key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerPropertiesAlgorithm
 */
export interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerPropertiesAlgorithm {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerPropertiesAlgorithm
   */
  default?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaDependenciesAlgorithmOneOfInnerPropertiesAlgorithm
   */
  enum: Array<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaProperties
   */
  exp: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaProperties
   */
  algorithm: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaProperties
   */
  base64_secret: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaProperties
   */
  secret: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaProperties
   */
  lifetime_grace_period: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthConsumerSchemaProperties
   */
  key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseJwtAuthSchema
 */
export interface ApisixAdminPluginsGet200ResponseJwtAuthSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseJwtAuthSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthSchema
   */
  properties: ApisixAdminPluginsGet200ResponseJwtAuthSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseJwtAuthSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseJwtAuthSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthSchemaProperties
   */
  cookie: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthSchemaProperties
   */
  header: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthSchemaProperties
   */
  query: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseJwtAuthSchemaProperties
   */
  hide_credentials: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLogger
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLogger {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLogger
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLogger
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLogger
   */
  schema: ApisixAdminPluginsGet200ResponseKafkaLoggerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLogger
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchema
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchema
   */
  oneOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokers}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  brokers: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokers;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  meta_format: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  kafka_topic: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  producer_type: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesRequiredAcks}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  required_acks: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesRequiredAcks;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  cluster_name: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  producer_batch_num: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  producer_batch_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  producer_max_buffering: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  include_resp_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  meta_refresh_interval: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  include_resp_body_expr: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  producer_time_linger: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  include_req_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerList}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  broker_list: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerList;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  include_req_body_expr: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerList
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerList {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerList
   */
  minProperties: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerList
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerListPatternProperties}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerList
   */
  patternProperties: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerListPatternProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerListPatternProperties
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerListPatternProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokerListPatternProperties
   */
  '.*': ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokers
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokers {
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokers
   */
  uniqueItems: boolean;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokers
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokers
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItems}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokers
   */
  items: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItems
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItems {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItems
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItems
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItems
   */
  properties: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsProperties
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsProperties
   */
  host: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfig}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsProperties
   */
  sasl_config: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfig;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsProperties
   */
  port: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfig
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfig {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfig
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfig
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfig
   */
  description: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfigProperties}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfig
   */
  properties: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfigProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfigProperties
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfigProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfigProperties
   */
  mechanism: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfigProperties
   */
  password: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesBrokersItemsPropertiesSaslConfigProperties
   */
  user: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr
   */
  items: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesRequiredAcks
 */
export interface ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesRequiredAcks {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesRequiredAcks
   */
  type: string;
  /**
   *
   * @type {Array<number>}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesRequiredAcks
   */
  enum: Array<number>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesRequiredAcks
   */
  default: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaProxy
 */
export interface ApisixAdminPluginsGet200ResponseKafkaProxy {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxy
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaProxySchema}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxy
   */
  schema: ApisixAdminPluginsGet200ResponseKafkaProxySchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxy
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaProxySchema
 */
export interface ApisixAdminPluginsGet200ResponseKafkaProxySchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxySchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxySchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxySchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaProxySchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxySchema
   */
  properties: ApisixAdminPluginsGet200ResponseKafkaProxySchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaProxySchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseKafkaProxySchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxySchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaProxySchemaPropertiesSasl}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxySchemaProperties
   */
  sasl: ApisixAdminPluginsGet200ResponseKafkaProxySchemaPropertiesSasl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKafkaProxySchemaPropertiesSasl
 */
export interface ApisixAdminPluginsGet200ResponseKafkaProxySchemaPropertiesSasl {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxySchemaPropertiesSasl
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxySchemaPropertiesSasl
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseKafkaProxySchemaPropertiesSasl
   */
  properties: ApisixAdminPluginsGet200ResponseBasicAuthConsumerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKeyAuth
 */
export interface ApisixAdminPluginsGet200ResponseKeyAuth {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuth
   */
  priority: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuth
   */
  consumer_schema: ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchema;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuth
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKeyAuthSchema}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuth
   */
  schema: ApisixAdminPluginsGet200ResponseKeyAuthSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuth
   */
  version: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchema
 */
export interface ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchema
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthConsumerSchemaProperties
   */
  key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKeyAuthSchema
 */
export interface ApisixAdminPluginsGet200ResponseKeyAuthSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKeyAuthSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthSchema
   */
  properties: ApisixAdminPluginsGet200ResponseKeyAuthSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseKeyAuthSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseKeyAuthSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthSchemaProperties
   */
  hide_credentials: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthSchemaProperties
   */
  header: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseKeyAuthSchemaProperties
   */
  query: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLdapAuth
 */
export interface ApisixAdminPluginsGet200ResponseLdapAuth {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuth
   */
  priority: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuth
   */
  consumer_schema: ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchema;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuth
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLdapAuthSchema}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuth
   */
  schema: ApisixAdminPluginsGet200ResponseLdapAuthSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuth
   */
  version: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchema
 */
export interface ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchema
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchemaProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchema
   */
  title: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthConsumerSchemaProperties
   */
  user_dn: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLdapAuthSchema
 */
export interface ApisixAdminPluginsGet200ResponseLdapAuthSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthSchema
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLdapAuthSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthSchema
   */
  properties: ApisixAdminPluginsGet200ResponseLdapAuthSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLdapAuthSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseLdapAuthSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthSchemaProperties
   */
  ldap_uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthSchemaProperties
   */
  uid: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthSchemaProperties
   */
  tls_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthSchemaProperties
   */
  use_tls: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseLdapAuthSchemaProperties
   */
  base_dn: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLimitConn
 */
export interface ApisixAdminPluginsGet200ResponseLimitConn {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConn
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchema}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConn
   */
  schema: ApisixAdminPluginsGet200ResponseLimitConnSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConn
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLimitConnSchema
 */
export interface ApisixAdminPluginsGet200ResponseLimitConnSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchema
   */
  properties: ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties
   */
  default_conn_delay: ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties
   */
  only_use_default_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties
   */
  key_type: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties
   */
  burst: ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties
   */
  key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties
   */
  conn: ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties
   */
  rejected_msg: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties
   */
  rejected_code: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaProperties
   */
  allow_degradation: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst
 */
export interface ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst
   */
  minimum: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLimitCount
 */
export interface ApisixAdminPluginsGet200ResponseLimitCount {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLimitCount
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200Response}
   * @memberof ApisixAdminPluginsGet200ResponseLimitCount
   */
  schema: ApisixAdminPluginsPluginNameGet200Response;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLimitCount
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLimitReq
 */
export interface ApisixAdminPluginsGet200ResponseLimitReq {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReq
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitReqSchema}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReq
   */
  schema: ApisixAdminPluginsGet200ResponseLimitReqSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReq
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLimitReqSchema
 */
export interface ApisixAdminPluginsGet200ResponseLimitReqSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchema
   */
  properties: ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties
   */
  rejected_code: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties
   */
  rejected_msg: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties
   */
  key_type: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties
   */
  burst: ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties
   */
  nodelay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties
   */
  key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties
   */
  rate: ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseLimitReqSchemaProperties
   */
  allow_degradation: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLoggly
 */
export interface ApisixAdminPluginsGet200ResponseLoggly {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLogglyMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseLoggly
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseLogglyMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLoggly
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLogglySchema}
   * @memberof ApisixAdminPluginsGet200ResponseLoggly
   */
  schema: ApisixAdminPluginsGet200ResponseLogglySchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLoggly
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLogglyMetadataSchema
 */
export interface ApisixAdminPluginsGet200ResponseLogglyMetadataSchema {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLogglyMetadataSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseLogglyMetadataSchema
   */
  properties: ApisixAdminPluginsGet200ResponseLogglyMetadataSchemaProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLogglyMetadataSchema
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLogglyMetadataSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseLogglyMetadataSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseLogglyMetadataSchemaProperties
   */
  protocol: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseLogglyMetadataSchemaProperties
   */
  host: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseLogglyMetadataSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit}
   * @memberof ApisixAdminPluginsGet200ResponseLogglyMetadataSchemaProperties
   */
  port: ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseLogglyMetadataSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLogglySchema
 */
export interface ApisixAdminPluginsGet200ResponseLogglySchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLogglySchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchema
   */
  properties: ApisixAdminPluginsGet200ResponseLogglySchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLogglySchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseLogglySchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  include_req_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  customer_token: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesTags}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  tags: ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesTags;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMap}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  severity_map: ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMap;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  include_resp_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  include_resp_body_expr: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaProperties
   */
  severity: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMap
 */
export interface ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMap {
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMap
   */
  additionalProperties: boolean;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMap
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMap
   */
  description: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMapPatternProperties}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMap
   */
  patternProperties: ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMapPatternProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMapPatternProperties
 */
export interface ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMapPatternProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesSeverityMapPatternProperties
   */
  '^[1-5][0-9]{2}$': ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesTags
 */
export interface ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesTags {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesTags
   */
  default: Array<string>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesTags
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesTags
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseLogglySchemaPropertiesTags
   */
  items: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseMocking
 */
export interface ApisixAdminPluginsGet200ResponseMocking {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseMocking
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseMockingSchema}
   * @memberof ApisixAdminPluginsGet200ResponseMocking
   */
  schema: ApisixAdminPluginsGet200ResponseMockingSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseMocking
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseMockingSchema
 */
export interface ApisixAdminPluginsGet200ResponseMockingSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseMockingSchema
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseMockingSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseMockingSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseMockingSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseMockingSchema
   */
  properties: ApisixAdminPluginsGet200ResponseMockingSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseMockingSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseMockingSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseMockingSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseMockingSchemaProperties
   */
  response_status: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseMockingSchemaProperties
   */
  response_schema: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseMockingSchemaProperties
   */
  with_mock_header: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseMockingSchemaProperties
   */
  content_type: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit}
   * @memberof ApisixAdminPluginsGet200ResponseMockingSchemaProperties
   */
  delay: ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseMockingSchemaProperties
   */
  response_example: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseMqttProxy
 */
export interface ApisixAdminPluginsGet200ResponseMqttProxy {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseMqttProxy
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseMqttProxySchema}
   * @memberof ApisixAdminPluginsGet200ResponseMqttProxy
   */
  schema: ApisixAdminPluginsGet200ResponseMqttProxySchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseMqttProxy
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseMqttProxySchema
 */
export interface ApisixAdminPluginsGet200ResponseMqttProxySchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseMqttProxySchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseMqttProxySchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseMqttProxySchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseMqttProxySchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseMqttProxySchema
   */
  properties: ApisixAdminPluginsGet200ResponseMqttProxySchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseMqttProxySchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseMqttProxySchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseMqttProxySchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseMqttProxySchemaProperties
   */
  protocol_name: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseMqttProxySchemaProperties
   */
  protocol_level: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpa
 */
export interface ApisixAdminPluginsGet200ResponseOpa {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpa
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpaSchema}
   * @memberof ApisixAdminPluginsGet200ResponseOpa
   */
  schema: ApisixAdminPluginsGet200ResponseOpaSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpa
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpaSchema
 */
export interface ApisixAdminPluginsGet200ResponseOpaSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpaSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchema
   */
  properties: ApisixAdminPluginsGet200ResponseOpaSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpaSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseOpaSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchemaProperties
   */
  with_route: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchemaProperties
   */
  with_service: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchemaProperties
   */
  keepalive: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchemaProperties
   */
  keepalive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchemaProperties
   */
  host: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchemaProperties
   */
  with_consumer: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchemaProperties
   */
  keepalive_pool: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchemaProperties
   */
  policy: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseOpaSchemaProperties
   */
  timeout: ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenfunction
 */
export interface ApisixAdminPluginsGet200ResponseOpenfunction {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunction
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenfunctionSchema}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunction
   */
  schema: ApisixAdminPluginsGet200ResponseOpenfunctionSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunction
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenfunctionSchema
 */
export interface ApisixAdminPluginsGet200ResponseOpenfunctionSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchema
   */
  properties: ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties
   */
  keepalive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties
   */
  function_uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties
   */
  keepalive: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties
   */
  keepalive_pool: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenfunctionSchemaPropertiesAuthorization}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties
   */
  authorization: ApisixAdminPluginsGet200ResponseOpenfunctionSchemaPropertiesAuthorization;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenfunctionSchemaPropertiesAuthorization
 */
export interface ApisixAdminPluginsGet200ResponseOpenfunctionSchemaPropertiesAuthorization {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpenfunctionSchemaPropertiesAuthorization
   */
  service_token: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenidConnect
 */
export interface ApisixAdminPluginsGet200ResponseOpenidConnect {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnect
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenidConnectSchema}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnect
   */
  schema: ApisixAdminPluginsGet200ResponseOpenidConnectSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnect
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenidConnectSchema
 */
export interface ApisixAdminPluginsGet200ResponseOpenidConnectSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchema
   */
  required: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchema
   */
  properties: ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  public_key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  introspection_endpoint: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  introspection_endpoint_auth_method: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  client_id: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  realm: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  client_secret: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  post_logout_redirect_uri: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  unauth_action: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  token_signing_alg_values_expected: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  use_pkce: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  set_access_token_header: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  redirect_uri: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  access_token_in_authorization_header: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  logout_path: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  timeout: ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  set_id_token_header: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  scope: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  discovery: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  set_userinfo_header: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  bearer_only: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  set_refresh_token_header: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSession}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaProperties
   */
  session: ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSession;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSession
 */
export interface ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSession {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSession
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSession
   */
  type: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSession
   */
  additionalProperties: boolean;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSessionProperties}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSession
   */
  properties: ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSessionProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSessionProperties
 */
export interface ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSessionProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesRegex}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesSessionProperties
   */
  secret: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesRegex;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesTimeout
 */
export interface ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesTimeout {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesTimeout
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesTimeout
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesTimeout
   */
  minimum: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesTimeout
   */
  default: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenwhisk
 */
export interface ApisixAdminPluginsGet200ResponseOpenwhisk {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhisk
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenwhiskSchema}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhisk
   */
  schema: ApisixAdminPluginsGet200ResponseOpenwhiskSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhisk
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenwhiskSchema
 */
export interface ApisixAdminPluginsGet200ResponseOpenwhiskSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchema
   */
  properties: ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  service_token: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  keepalive: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  keepalive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  keepalive_pool: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  api_host: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesNamespace}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  namespace: ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesNamespace;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  result: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesNamespace}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  package: ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesNamespace;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesNamespace}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  action: ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesNamespace;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaProperties
   */
  timeout: ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesNamespace
 */
export interface ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesNamespace {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesNamespace
   */
  pattern: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesNamespace
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesNamespace
   */
  maxLength: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout
 */
export interface ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout
   */
  maximum: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout
   */
  minimum: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseOpenwhiskSchemaPropertiesTimeout
   */
  default: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponsePrometheus
 */
export interface ApisixAdminPluginsGet200ResponsePrometheus {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponsePrometheus
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponsePrometheusSchema}
   * @memberof ApisixAdminPluginsGet200ResponsePrometheus
   */
  schema: ApisixAdminPluginsGet200ResponsePrometheusSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponsePrometheus
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponsePrometheusSchema
 */
export interface ApisixAdminPluginsGet200ResponsePrometheusSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponsePrometheusSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponsePrometheusSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponsePrometheusSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponsePrometheusSchema
   */
  properties: ApisixAdminPluginsGet200ResponsePrometheusSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponsePrometheusSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponsePrometheusSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponsePrometheusSchemaProperties
   */
  prefer_name: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponsePrometheusSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyCache
 */
export interface ApisixAdminPluginsGet200ResponseProxyCache {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCache
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchema}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCache
   */
  schema: ApisixAdminPluginsGet200ResponseProxyCacheSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCache
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyCacheSchema
 */
export interface ApisixAdminPluginsGet200ResponseProxyCacheSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchema
   */
  properties: ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
   */
  cache_zone: ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
   */
  cache_strategy: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKey}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
   */
  cache_key: ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKey;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheHttpStatus}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
   */
  cache_http_status: ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheHttpStatus;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethod}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
   */
  cache_method: ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethod;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
   */
  cache_ttl: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
   */
  hide_cache_headers: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
   */
  cache_control: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
   */
  cache_bypass: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaProperties
   */
  no_cache: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheHttpStatus
 */
export interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheHttpStatus {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheHttpStatus
   */
  items: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode;
  /**
   *
   * @type {Array<number>}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheHttpStatus
   */
  default: Array<number>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheHttpStatus
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheHttpStatus
   */
  type: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheHttpStatus
   */
  uniqueItems: boolean;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKey
 */
export interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKey {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKey
   */
  default: Array<string>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKey
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKey
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKeyItems}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKey
   */
  items: ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKeyItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKeyItems
 */
export interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKeyItems {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKeyItems
   */
  pattern: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKeyItems
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKeyItems
   */
  description: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethod
 */
export interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethod {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethod
   */
  items: ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethod
   */
  default: Array<string>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethod
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethod
   */
  type: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethod
   */
  uniqueItems: boolean;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems
 */
export interface ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems
   */
  description: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems
   */
  enum: Array<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyControl
 */
export interface ApisixAdminPluginsGet200ResponseProxyControl {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyControl
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyControlSchema}
   * @memberof ApisixAdminPluginsGet200ResponseProxyControl
   */
  schema: ApisixAdminPluginsGet200ResponseProxyControlSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyControl
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyControlSchema
 */
export interface ApisixAdminPluginsGet200ResponseProxyControlSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyControlSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyControlSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyControlSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseProxyControlSchema
   */
  properties: ApisixAdminPluginsGet200ResponseProxyControlSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyControlSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseProxyControlSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseProxyControlSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseProxyControlSchemaProperties
   */
  request_buffering: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyMirror
 */
export interface ApisixAdminPluginsGet200ResponseProxyMirror {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirror
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyMirrorSchema}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirror
   */
  schema: ApisixAdminPluginsGet200ResponseProxyMirrorSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirror
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyMirrorSchema
 */
export interface ApisixAdminPluginsGet200ResponseProxyMirrorSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirrorSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirrorSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirrorSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyMirrorSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirrorSchema
   */
  properties: ApisixAdminPluginsGet200ResponseProxyMirrorSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyMirrorSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseProxyMirrorSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirrorSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirrorSchemaProperties
   */
  host: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirrorSchemaProperties
   */
  path_concat_mode: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirrorSchemaProperties
   */
  path: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaPropertiesSampleRatio}
   * @memberof ApisixAdminPluginsGet200ResponseProxyMirrorSchemaProperties
   */
  sample_ratio: ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaPropertiesSampleRatio;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyRewrite
 */
export interface ApisixAdminPluginsGet200ResponseProxyRewrite {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewrite
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyRewriteSchema}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewrite
   */
  schema: ApisixAdminPluginsGet200ResponseProxyRewriteSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewrite
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyRewriteSchema
 */
export interface ApisixAdminPluginsGet200ResponseProxyRewriteSchema {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchema
   */
  minProperties: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyRewriteSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchema
   */
  properties: ApisixAdminPluginsGet200ResponseProxyRewriteSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyRewriteSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseProxyRewriteSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeaders}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaProperties
   */
  headers: ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeaders;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKeyItems}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaProperties
   */
  host: ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKeyItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaProperties
   */
  method: ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheMethodItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesRegexUri}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaProperties
   */
  regex_uri: ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesRegexUri;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaProperties
   */
  use_real_request_uri_unsafe: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesUri}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaProperties
   */
  uri: ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesUri;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeaders
 */
export interface ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeaders {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeaders
   */
  description: string;
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeaders
   */
  oneOf: Array<ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInner>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInner
 */
export interface ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInner {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInner
   */
  minProperties: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInner
   */
  type: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInner
   */
  additionalProperties?: boolean;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInnerProperties}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInner
   */
  properties?: ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInnerProperties;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPatternProperties}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInner
   */
  patternProperties?: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPatternProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInnerProperties
 */
export interface ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInnerProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPropertiesSet}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInnerProperties
   */
  add: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPropertiesSet;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPropertiesSet}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInnerProperties
   */
  set: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPropertiesSet;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesHeadersOneOfInnerProperties
   */
  remove: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesUri
 */
export interface ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesUri {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesUri
   */
  minLength: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesUri
   */
  pattern: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesUri
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesUri
   */
  maxLength: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesUri
   */
  description: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponsePublicApi
 */
export interface ApisixAdminPluginsGet200ResponsePublicApi {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponsePublicApi
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponsePublicApiSchema}
   * @memberof ApisixAdminPluginsGet200ResponsePublicApi
   */
  schema: ApisixAdminPluginsGet200ResponsePublicApiSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponsePublicApi
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponsePublicApiSchema
 */
export interface ApisixAdminPluginsGet200ResponsePublicApiSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponsePublicApiSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponsePublicApiSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponsePublicApiSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponsePublicApiSchema
   */
  properties: ApisixAdminPluginsGet200ResponsePublicApiSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponsePublicApiSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponsePublicApiSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponsePublicApiSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponsePublicApiSchemaProperties
   */
  uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRealIp
 */
export interface ApisixAdminPluginsGet200ResponseRealIp {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRealIp
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRealIpSchema}
   * @memberof ApisixAdminPluginsGet200ResponseRealIp
   */
  schema: ApisixAdminPluginsGet200ResponseRealIpSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRealIp
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRealIpSchema
 */
export interface ApisixAdminPluginsGet200ResponseRealIpSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseRealIpSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRealIpSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRealIpSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRealIpSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseRealIpSchema
   */
  properties: ApisixAdminPluginsGet200ResponseRealIpSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRealIpSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseRealIpSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseRealIpSchemaProperties
   */
  trusted_addresses: ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesBlacklist;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseRealIpSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsGet200ResponseRealIpSchemaProperties
   */
  source: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseRealIpSchemaProperties
   */
  recursive: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRedirect
 */
export interface ApisixAdminPluginsGet200ResponseRedirect {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRedirect
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRedirectSchema}
   * @memberof ApisixAdminPluginsGet200ResponseRedirect
   */
  schema: ApisixAdminPluginsGet200ResponseRedirectSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRedirect
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRedirectSchema
 */
export interface ApisixAdminPluginsGet200ResponseRedirectSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchema
   */
  oneOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRedirectSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchema
   */
  properties: ApisixAdminPluginsGet200ResponseRedirectSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRedirectSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseRedirectSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaProperties
   */
  http_to_https: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaProperties
   */
  encode_uri: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaProperties
   */
  append_query_string: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaProperties
   */
  ret_code: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesRegexUri}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaProperties
   */
  regex_uri: ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesRegexUri;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesUri}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaProperties
   */
  uri: ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesUri;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesRegexUri
 */
export interface ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesRegexUri {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesRegexUri
   */
  maxItems: number;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesRegexUri
   */
  items: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesRegexUri
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesRegexUri
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesRegexUri
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesUri
 */
export interface ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesUri {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesUri
   */
  pattern: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesUri
   */
  minLength: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRedirectSchemaPropertiesUri
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRefererRestriction
 */
export interface ApisixAdminPluginsGet200ResponseRefererRestriction {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestriction
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchema}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestriction
   */
  schema: ApisixAdminPluginsGet200ResponseRefererRestrictionSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestriction
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRefererRestrictionSchema
 */
export interface ApisixAdminPluginsGet200ResponseRefererRestrictionSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchema
   */
  oneOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchema
   */
  properties: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaProperties
   */
  blacklist: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaProperties
   */
  message: ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaProperties
   */
  bypass_missing: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaProperties
   */
  whitelist: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist
 */
export interface ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist
   */
  minItems: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist
   */
  items: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems
 */
export interface ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems
   */
  pattern: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRequestId
 */
export interface ApisixAdminPluginsGet200ResponseRequestId {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRequestId
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRequestIdSchema}
   * @memberof ApisixAdminPluginsGet200ResponseRequestId
   */
  schema: ApisixAdminPluginsGet200ResponseRequestIdSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRequestId
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRequestIdSchema
 */
export interface ApisixAdminPluginsGet200ResponseRequestIdSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRequestIdSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchema
   */
  properties: ApisixAdminPluginsGet200ResponseRequestIdSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRequestIdSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseRequestIdSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaProperties
   */
  include_in_response: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaProperties
   */
  algorithm: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeId}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaProperties
   */
  range_id: ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeId;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaProperties
   */
  header_name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeId
 */
export interface ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeId {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdProperties}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeId
   */
  properties: ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeId
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdProperties
 */
export interface ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdPropertiesCharSet}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdProperties
   */
  char_set: ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdPropertiesCharSet;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdProperties
   */
  length: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdPropertiesCharSet
 */
export interface ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdPropertiesCharSet {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdPropertiesCharSet
   */
  minLength: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdPropertiesCharSet
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRequestIdSchemaPropertiesRangeIdPropertiesCharSet
   */
  default: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRequestValidation
 */
export interface ApisixAdminPluginsGet200ResponseRequestValidation {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidation
   */
  version: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidation
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRequestValidationSchema}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidation
   */
  schema: ApisixAdminPluginsGet200ResponseRequestValidationSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidation
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRequestValidationSchema
 */
export interface ApisixAdminPluginsGet200ResponseRequestValidationSchema {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidationSchema
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidationSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidationSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRequestValidationSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidationSchema
   */
  properties: ApisixAdminPluginsGet200ResponseRequestValidationSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRequestValidationSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseRequestValidationSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidationSchemaProperties
   */
  rejected_code: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidationSchemaProperties
   */
  rejected_msg: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidationSchemaProperties
   */
  header_schema: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidationSchemaProperties
   */
  body_schema: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseRequestValidationSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewrite
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewrite {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewrite
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchema}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewrite
   */
  schema: ApisixAdminPluginsGet200ResponseResponseRewriteSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewrite
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchema
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchema {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependencies}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchema
   */
  dependencies: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependencies;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchema
   */
  properties: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependencies
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependencies {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependenciesFilters}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependencies
   */
  filters: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependenciesFilters;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependenciesFilters}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependencies
   */
  body: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependenciesFilters;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependenciesFilters
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependenciesFilters {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependenciesFilters
   */
  not: ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeaders}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaProperties
   */
  headers: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeaders;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaProperties
   */
  status_code: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaProperties
   */
  body: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFilters}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaProperties
   */
  filters: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFilters;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaProperties
   */
  vars: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaProperties
   */
  body_base64: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64 {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64
   */
  description: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64
   */
  default: boolean;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFilters
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFilters {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFilters
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFilters
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFilters
   */
  description: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItems}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFilters
   */
  items: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItems
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItems {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItems
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItems
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItems
   */
  description: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItems
   */
  properties: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsProperties
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesRegex}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsProperties
   */
  regex: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesRegex;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsProperties
   */
  scope: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsProperties
   */
  options: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsProperties
   */
  replace: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions
   */
  default: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesRegex
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesRegex {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesRegex
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesRegex
   */
  description: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesRegex
   */
  minLength: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope
   */
  default: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope
   */
  description: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope
   */
  enum: Array<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeaders
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeaders {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeaders
   */
  description: string;
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeaders
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInner>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInner
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInner {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInner
   */
  minProperties?: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInner
   */
  type?: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPatternProperties}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInner
   */
  patternProperties?: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPatternProperties;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerProperties}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInner
   */
  properties?: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPatternProperties
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPatternProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesErrorResponse}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPatternProperties
   */
  '^[^:]+$': ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesErrorResponse;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerProperties
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerProperties
   */
  add: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPropertiesSet}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerProperties
   */
  set: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPropertiesSet;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerProperties
   */
  remove: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklist;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPropertiesSet
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPropertiesSet {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPropertiesSet
   */
  minProperties: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPropertiesSet
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPatternProperties}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPropertiesSet
   */
  patternProperties: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesHeadersAnyOfInnerPatternProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode
 */
export interface ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode
   */
  maximum: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode
   */
  description: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesStatusCode
   */
  minimum: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRocketmqLogger
 */
export interface ApisixAdminPluginsGet200ResponseRocketmqLogger {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLogger
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLogger
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRocketmqLoggerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLogger
   */
  schema: ApisixAdminPluginsGet200ResponseRocketmqLoggerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLogger
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRocketmqLoggerSchema
 */
export interface ApisixAdminPluginsGet200ResponseRocketmqLoggerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  meta_format: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  secret_key: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  topic: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  include_resp_body_expr: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  access_key: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  include_resp_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  tag: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  nameserver_list: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  use_tls: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  include_req_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  include_req_body_expr: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseRocketmqLoggerSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseServerInfo
 */
export interface ApisixAdminPluginsGet200ResponseServerInfo {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseServerInfo
   */
  version: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseServerInfo
   */
  scope: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseServerInfoSchema}
   * @memberof ApisixAdminPluginsGet200ResponseServerInfo
   */
  schema: ApisixAdminPluginsGet200ResponseServerInfoSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseServerInfo
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseServerInfoSchema
 */
export interface ApisixAdminPluginsGet200ResponseServerInfoSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseServerInfoSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseServerInfoSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseServerInfoSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseServerInfoSchema
   */
  properties: ApisixAdminPluginsGet200ResponseServerInfoSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseServerInfoSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseServerInfoSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseServerInfoSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseServerlessPostFunction
 */
export interface ApisixAdminPluginsGet200ResponseServerlessPostFunction {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseServerlessPostFunction
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchema}
   * @memberof ApisixAdminPluginsGet200ResponseServerlessPostFunction
   */
  schema: ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseServerlessPostFunction
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchema
 */
export interface ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchema
   */
  properties: ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchemaProperties
   */
  phase: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr}
   * @memberof ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchemaProperties
   */
  functions: ApisixAdminPluginsGet200ResponseKafkaLoggerSchemaPropertiesIncludeRespBodyExpr;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseServerlessPostFunctionSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSkywalkingLogger
 */
export interface ApisixAdminPluginsGet200ResponseSkywalkingLogger {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLogger
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLogger
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLogger
   */
  schema: ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLogger
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchema
 */
export interface ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  endpoint_addr: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  service_name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  include_req_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  service_instance_name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSkywalkingLoggerSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSlsLogger
 */
export interface ApisixAdminPluginsGet200ResponseSlsLogger {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLogger
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSlsLoggerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLogger
   */
  schema: ApisixAdminPluginsGet200ResponseSlsLoggerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLogger
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSlsLoggerSchema
 */
export interface ApisixAdminPluginsGet200ResponseSlsLoggerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  port: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  access_key_secret: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  project: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  logstore: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  access_key_id: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  host: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  include_req_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSlsLoggerSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSplunkHecLogging
 */
export interface ApisixAdminPluginsGet200ResponseSplunkHecLogging {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLogging
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLogging
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchema}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLogging
   */
  schema: ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLogging
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchema
 */
export interface ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchema
   */
  properties: ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties
   */
  ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpoint}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties
   */
  endpoint: ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpoint;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpoint
 */
export interface ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpoint {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpoint
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpoint
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpointProperties}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpoint
   */
  properties: ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpointProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpointProperties
 */
export interface ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpointProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpointProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpointProperties
   */
  channel: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpointProperties
   */
  uri: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSplunkHecLoggingSchemaPropertiesEndpointProperties
   */
  token: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSyslog
 */
export interface ApisixAdminPluginsGet200ResponseSyslog {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseSyslog
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseSyslog
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogSchema}
   * @memberof ApisixAdminPluginsGet200ResponseSyslog
   */
  schema: ApisixAdminPluginsGet200ResponseSyslogSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseSyslog
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSyslogMetadataSchema
 */
export interface ApisixAdminPluginsGet200ResponseSyslogMetadataSchema {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogMetadataSchema
   */
  properties: ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogMetadataSchema
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormat}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaProperties
   */
  log_format: ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormat;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormat
 */
export interface ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormat {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormatDefault}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormat
   */
  default: ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormatDefault;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormat
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormatDefault
 */
export interface ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormatDefault {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormatDefault
   */
  client_ip: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormatDefault
   */
  host: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogMetadataSchemaPropertiesLogFormatDefault
   */
  '@timestamp': string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSyslogSchema
 */
export interface ApisixAdminPluginsGet200ResponseSyslogSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchema
   */
  properties: ApisixAdminPluginsGet200ResponseSyslogSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseSyslogSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  drop_limit: ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  pool_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  sock_type: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  flush_limit: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  port: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  tls: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  host: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaProperties
   */
  include_req_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit
 */
export interface ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit
   */
  default: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTcpLogger
 */
export interface ApisixAdminPluginsGet200ResponseTcpLogger {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLogger
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLogger
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTcpLoggerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLogger
   */
  schema: ApisixAdminPluginsGet200ResponseTcpLoggerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLogger
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTcpLoggerSchema
 */
export interface ApisixAdminPluginsGet200ResponseTcpLoggerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  tls_options: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  tls: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  port: ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  host: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  include_req_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTcpLoggerSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTencentCloudCls
 */
export interface ApisixAdminPluginsGet200ResponseTencentCloudCls {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudCls
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudCls
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTencentCloudClsSchema}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudCls
   */
  schema: ApisixAdminPluginsGet200ResponseTencentCloudClsSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudCls
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTencentCloudClsSchema
 */
export interface ApisixAdminPluginsGet200ResponseTencentCloudClsSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchema
   */
  required: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchema
   */
  encrypt_fields: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchema
   */
  properties: ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  secret_id: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  secret_key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaPropertiesSampleRatio}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  sample_ratio: ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaPropertiesSampleRatio;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  cls_host: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  cls_topic: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  include_req_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  global_tag: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaProperties
   */
  include_resp_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaPropertiesSampleRatio
 */
export interface ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaPropertiesSampleRatio {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaPropertiesSampleRatio
   */
  maximum: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaPropertiesSampleRatio
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaPropertiesSampleRatio
   */
  minimum: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTencentCloudClsSchemaPropertiesSampleRatio
   */
  default: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplit
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplit {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplit
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchema}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplit
   */
  schema: ApisixAdminPluginsGet200ResponseTrafficSplitSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplit
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchema
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchema
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRules}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaProperties
   */
  rules: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRules;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRules
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRules {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRules
   */
  items: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItems;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRules
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItems
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItems {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItems
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItems
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreams}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsProperties
   */
  weighted_upstreams: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreams;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatch}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsProperties
   */
  match: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatch;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatch
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatch {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatchItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatch
   */
  items: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatchItems;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatch
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatchItems
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatchItems {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatchItemsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatchItems
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatchItemsProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatchItems
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatchItemsProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatchItemsProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesMatchItemsProperties
   */
  vars: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreams
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreams {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreams
   */
  maxItems: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreams
   */
  items: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItems;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreams
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreams
   */
  type: string;
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsDefaultInner>}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreams
   */
  default: Array<ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsDefaultInner>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsDefaultInner
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsDefaultInner {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsDefaultInner
   */
  weight?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItems
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItems {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItems
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItems
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstream}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsProperties
   */
  upstream: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstream;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsProperties
   */
  weight: ApisixAdminPluginsGet200ResponseOpenidConnectSchemaPropertiesTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoId}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsProperties
   */
  upstream_id: ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoId;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstream
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstream {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstream
   */
  oneOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstream
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstream
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodes}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  nodes: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodes;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgs}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  discovery_args: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgs;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  type: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesScheme}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  scheme: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesScheme;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoId}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  id: ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoId;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  create_time: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  retries: ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabels}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  labels: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabels;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  upstream_host: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTls}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  tls: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTls;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  update_time: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  key: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  hash_on: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDesc}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  desc: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDesc;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  service_name: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  pass_host: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesScope;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  timeout: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeout;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePool}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  keepalive_pool: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePool;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  retry_timeout: ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecks}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  checks: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecks;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamProperties
   */
  discovery_type: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecks
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecks {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecks
   */
  type: string;
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecks
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecks
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassive}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksProperties
   */
  passive: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassive;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActive}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksProperties
   */
  active: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActive;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActive
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActive {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActive
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActive
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeaders}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties
   */
  req_headers: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeaders;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties
   */
  type: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthy}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties
   */
  healthy: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthy;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties
   */
  port: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties
   */
  host: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties
   */
  concurrency: ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties
   */
  http_path: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties
   */
  https_verify_certificate: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthy}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties
   */
  unhealthy: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthy;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActiveProperties
   */
  timeout: ApisixAdminPluginsGet200ResponseSyslogSchemaPropertiesDropLimit;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthy
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthy {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthyProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthy
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthyProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthy
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthyProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthyProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthyProperties
   */
  http_statuses: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthyProperties
   */
  successes: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesHealthyProperties
   */
  interval: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeaders
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeaders {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeaders
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeaders
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeadersItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeaders
   */
  items: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeadersItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeadersItems
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeadersItems {
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeadersItems
   */
  uniqueItems: boolean;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesReqHeadersItems
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthy
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthy {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthyProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthy
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthyProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthy
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthyProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthyProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthyProperties
   */
  timeouts: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthyProperties
   */
  http_statuses: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthyProperties
   */
  interval: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthyProperties
   */
  http_failures: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesActivePropertiesUnhealthyProperties
   */
  tcp_failures: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassive
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassive {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassiveProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassive
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassiveProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassive
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassiveProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassiveProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassiveProperties
   */
  type: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthy}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassiveProperties
   */
  healthy: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthy;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthy}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassiveProperties
   */
  unhealthy: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthy;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthy
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthy {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthy
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthy
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyProperties
   */
  successes: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyProperties
   */
  http_statuses: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses
   */
  items: ApisixAdminPluginsGet200ResponseFaultInjectionSchemaPropertiesAbortPropertiesPercentage;
  /**
   *
   * @type {Array<number>}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses
   */
  default: Array<number>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses
   */
  type: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses
   */
  uniqueItems: boolean;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthy
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthy {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthyProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthy
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthyProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthy
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthyProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthyProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthyProperties
   */
  timeouts: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthyProperties
   */
  http_statuses: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesHealthyPropertiesHttpStatuses;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthyProperties
   */
  http_failures: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesChecksPropertiesPassivePropertiesUnhealthyProperties
   */
  tcp_failures: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDesc
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDesc {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDesc
   */
  maxLength: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDesc
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgs
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgs {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgs
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgsProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgs
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgsProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgsProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgsProperties
   */
  namespace_id: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesDiscoveryArgsProperties
   */
  group_name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePool
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePool {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePoolProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePool
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePoolProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePool
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePoolProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePoolProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePoolProperties
   */
  requests: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePoolProperties
   */
  idle_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesKeepalivePoolProperties
   */
  size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabels
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabels {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabels
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabels
   */
  description: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabelsPatternProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabels
   */
  patternProperties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabelsPatternProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabelsPatternProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabelsPatternProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesUri}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesLabelsPatternProperties
   */
  '.*': ApisixAdminPluginsGet200ResponseProxyRewriteSchemaPropertiesUri;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodes
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodes {
  /**
   *
   * @type {Array<ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInner>}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodes
   */
  anyOf: Array<ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInner>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInner
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInner {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerPatternProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInner
   */
  patternProperties?: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerPatternProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInner
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInner
   */
  items?: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItems
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItems {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItems
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItems
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItemsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItems
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItemsProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItemsProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItemsProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItemsProperties
   */
  host: ApisixAdminPluginsGet200ResponseRefererRestrictionSchemaPropertiesBlacklistItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItemsProperties
   */
  priority: ApisixAdminPluginsGet200ResponseCorsSchemaPropertiesMaxAge;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItemsProperties
   */
  metadata: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerPatternProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItemsProperties
   */
  weight: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerPatternProperties;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerPatternProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerItemsProperties
   */
  port: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerPatternProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerPatternProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerPatternProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerPatternProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerPatternProperties
   */
  '.*': ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesNodesAnyOfInnerPatternProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesScheme
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesScheme {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesScheme
   */
  default: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesScheme
   */
  description: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesScheme
   */
  enum: Array<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeout
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeout {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeout
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeout
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeoutProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeout
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeoutProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeoutProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeoutProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeoutProperties
   */
  send: ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeoutProperties
   */
  read: ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTimeoutProperties
   */
  connect: ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTls
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTls {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTls
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependencies}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTls
   */
  dependencies: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependencies;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTls
   */
  properties: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependencies
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependencies {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependenciesClientKey}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependencies
   */
  client_key: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependenciesClientKey;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependenciesFilters}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependencies
   */
  client_cert_id: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaDependenciesFilters;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependenciesClientKey}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependencies
   */
  client_cert: ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependenciesClientKey;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependenciesClientKey
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependenciesClientKey {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependenciesClientKey
   */
  not: ApisixAdminPluginsGet200ResponseIpRestrictionSchemaOneOfInner;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsDependenciesClientKey
   */
  required: Array<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsProperties
 */
export interface ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsProperties
   */
  client_key: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsProperties
   */
  verify: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesBodyBase64;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoId}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsProperties
   */
  client_cert_id: ApisixAdminPluginsGet200ResponseGrpcTranscodeSchemaPropertiesProtoId;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseTrafficSplitSchemaPropertiesRulesItemsPropertiesWeightedUpstreamsItemsPropertiesUpstreamPropertiesTlsProperties
   */
  client_cert: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseUaRestriction
 */
export interface ApisixAdminPluginsGet200ResponseUaRestriction {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestriction
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUaRestrictionSchema}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestriction
   */
  schema: ApisixAdminPluginsGet200ResponseUaRestrictionSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestriction
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseUaRestrictionSchema
 */
export interface ApisixAdminPluginsGet200ResponseUaRestrictionSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestrictionSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestrictionSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUaRestrictionSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestrictionSchema
   */
  properties: ApisixAdminPluginsGet200ResponseUaRestrictionSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseUaRestrictionSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseUaRestrictionSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestrictionSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestrictionSchemaProperties
   */
  message: ApisixAdminPluginsGet200ResponseIpRestrictionSchemaPropertiesMessage;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUaRestrictionSchemaPropertiesAllowlist}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestrictionSchemaProperties
   */
  allowlist: ApisixAdminPluginsGet200ResponseUaRestrictionSchemaPropertiesAllowlist;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestrictionSchemaProperties
   */
  bypass_missing: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUaRestrictionSchemaPropertiesAllowlist}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestrictionSchemaProperties
   */
  denylist: ApisixAdminPluginsGet200ResponseUaRestrictionSchemaPropertiesAllowlist;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseUaRestrictionSchemaPropertiesAllowlist
 */
export interface ApisixAdminPluginsGet200ResponseUaRestrictionSchemaPropertiesAllowlist {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestrictionSchemaPropertiesAllowlist
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestrictionSchemaPropertiesAllowlist
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsGet200ResponseUaRestrictionSchemaPropertiesAllowlist
   */
  items: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseUdpLogger
 */
export interface ApisixAdminPluginsGet200ResponseUdpLogger {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseSyslogMetadataSchema}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLogger
   */
  metadata_schema: ApisixAdminPluginsGet200ResponseSyslogMetadataSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLogger
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUdpLoggerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLogger
   */
  schema: ApisixAdminPluginsGet200ResponseUdpLoggerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLogger
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseUdpLoggerSchema
 */
export interface ApisixAdminPluginsGet200ResponseUdpLoggerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  batch_max_size: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  include_req_body: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  port: ApisixAdminPluginsGet200ResponseLimitConnSchemaPropertiesBurst;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  name: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  host: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  max_retry_count: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  retry_delay: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  buffer_duration: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  log_format: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  inactive_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseUdpLoggerSchemaProperties
   */
  timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseUriBlocker
 */
export interface ApisixAdminPluginsGet200ResponseUriBlocker {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlocker
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUriBlockerSchema}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlocker
   */
  schema: ApisixAdminPluginsGet200ResponseUriBlockerSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlocker
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseUriBlockerSchema
 */
export interface ApisixAdminPluginsGet200ResponseUriBlockerSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUriBlockerSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchema
   */
  properties: ApisixAdminPluginsGet200ResponseUriBlockerSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseUriBlockerSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseUriBlockerSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchemaProperties
   */
  rejected_code: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchemaProperties
   */
  rejected_msg: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseUriBlockerSchemaPropertiesBlockRules}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchemaProperties
   */
  block_rules: ApisixAdminPluginsGet200ResponseUriBlockerSchemaPropertiesBlockRules;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchemaProperties
   */
  case_insensitive: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseUriBlockerSchemaPropertiesBlockRules
 */
export interface ApisixAdminPluginsGet200ResponseUriBlockerSchemaPropertiesBlockRules {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchemaPropertiesBlockRules
   */
  type: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchemaPropertiesBlockRules
   */
  uniqueItems: boolean;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsGet200ResponseUriBlockerSchemaPropertiesBlockRules
   */
  items: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWolfRbac
 */
export interface ApisixAdminPluginsGet200ResponseWolfRbac {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseWolfRbac
   */
  version: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseWolfRbac
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWolfRbacSchema}
   * @memberof ApisixAdminPluginsGet200ResponseWolfRbac
   */
  schema: ApisixAdminPluginsGet200ResponseWolfRbacSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseWolfRbac
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWolfRbacSchema
 */
export interface ApisixAdminPluginsGet200ResponseWolfRbacSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseWolfRbacSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseWolfRbacSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWolfRbacSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseWolfRbacSchema
   */
  properties: ApisixAdminPluginsGet200ResponseWolfRbacSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWolfRbacSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseWolfRbacSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseWolfRbacSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseWolfRbacSchemaProperties
   */
  header_prefix: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseWolfRbacSchemaProperties
   */
  server: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsGet200ResponseWolfRbacSchemaProperties
   */
  appid: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWorkflow
 */
export interface ApisixAdminPluginsGet200ResponseWorkflow {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflow
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWorkflowSchema}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflow
   */
  schema: ApisixAdminPluginsGet200ResponseWorkflowSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflow
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWorkflowSchema
 */
export interface ApisixAdminPluginsGet200ResponseWorkflowSchema {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWorkflowSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchema
   */
  properties: ApisixAdminPluginsGet200ResponseWorkflowSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWorkflowSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseWorkflowSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRules}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaProperties
   */
  rules: ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRules;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRules
 */
export interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRules {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItems}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRules
   */
  items: ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItems;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRules
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItems
 */
export interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItems {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItems
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItems
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsProperties}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItems
   */
  properties: ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsProperties
 */
export interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsProperties {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCase}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsProperties
   */
  case: ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCase;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesActions}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsProperties
   */
  actions: ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesActions;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesActions
 */
export interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesActions {
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseExamplePluginSchemaPropertiesT}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesActions
   */
  items: ApisixAdminPluginsGet200ResponseExamplePluginSchemaPropertiesT;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesActions
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCase
 */
export interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCase {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCase
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCase
   */
  minItems: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCaseItems}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCase
   */
  items: ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCaseItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCaseItems
 */
export interface ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCaseItems {
  /**
   *
   * @type {Array<ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName>}
   * @memberof ApisixAdminPluginsGet200ResponseWorkflowSchemaPropertiesRulesItemsPropertiesCaseItems
   */
  anyOf: Array<ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseZipkin
 */
export interface ApisixAdminPluginsGet200ResponseZipkin {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseZipkin
   */
  version: number;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseZipkinSchema}
   * @memberof ApisixAdminPluginsGet200ResponseZipkin
   */
  schema: ApisixAdminPluginsGet200ResponseZipkinSchema;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseZipkin
   */
  priority: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseZipkinSchema
 */
export interface ApisixAdminPluginsGet200ResponseZipkinSchema {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchema
   */
  required: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchema
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchema
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseZipkinSchemaProperties}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchema
   */
  properties: ApisixAdminPluginsGet200ResponseZipkinSchemaProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseZipkinSchemaProperties
 */
export interface ApisixAdminPluginsGet200ResponseZipkinSchemaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchemaProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchemaProperties
   */
  service_name: ApisixAdminPluginsGet200ResponseResponseRewriteSchemaPropertiesFiltersItemsPropertiesOptions;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchemaProperties
   */
  endpoint: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSampleRatio}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchemaProperties
   */
  sample_ratio: ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSampleRatio;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSpanVersion}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchemaProperties
   */
  span_version: ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSpanVersion;
  /**
   *
   * @type {ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKeyItems}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchemaProperties
   */
  server_addr: ApisixAdminPluginsGet200ResponseProxyCacheSchemaPropertiesCacheKeyItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSampleRatio
 */
export interface ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSampleRatio {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSampleRatio
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSampleRatio
   */
  minimum: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSampleRatio
   */
  maximum: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSpanVersion
 */
export interface ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSpanVersion {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSpanVersion
   */
  default: number;
  /**
   *
   * @type {Array<number>}
   * @memberof ApisixAdminPluginsGet200ResponseZipkinSchemaPropertiesSpanVersion
   */
  enum: Array<number>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200Response
 */
export interface ApisixAdminPluginsPluginNameGet200Response {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseIf}
   * @memberof ApisixAdminPluginsPluginNameGet200Response
   */
  if: ApisixAdminPluginsPluginNameGet200ResponseIf;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElse}
   * @memberof ApisixAdminPluginsPluginNameGet200Response
   */
  else: ApisixAdminPluginsPluginNameGet200ResponseElse;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsPluginNameGet200Response
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseThen}
   * @memberof ApisixAdminPluginsPluginNameGet200Response
   */
  then: ApisixAdminPluginsPluginNameGet200ResponseThen;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200Response
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200Response
   */
  $comment: string;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseProperties}
   * @memberof ApisixAdminPluginsPluginNameGet200Response
   */
  properties: ApisixAdminPluginsPluginNameGet200ResponseProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseElse
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseElse {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThen}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElse
   */
  then: ApisixAdminPluginsPluginNameGet200ResponseElseThen;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseIf}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElse
   */
  if: ApisixAdminPluginsPluginNameGet200ResponseIf;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseElseThen
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseElseThen {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThen
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenProperties}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThen
   */
  properties: ApisixAdminPluginsPluginNameGet200ResponseElseThenProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseElseThenProperties
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseElseThenProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenProperties
   */
  redis_password: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenProperties
   */
  redis_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodes}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenProperties
   */
  redis_cluster_nodes: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodes;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenProperties
   */
  redis_cluster_name: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenProperties
   */
  redis_cluster_ssl: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenProperties
   */
  redis_cluster_ssl_verify: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodes
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodes {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodes
   */
  minItems: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodes
   */
  type: string;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodes
   */
  items: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems
   */
  minLength: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems
   */
  maxLength: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterNodesItems
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl {
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl
   */
  default: boolean;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword
   */
  minLength: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout
   */
  minimum: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout
   */
  default: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseIf
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseIf {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseIfProperties}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseIf
   */
  properties: ApisixAdminPluginsPluginNameGet200ResponseIfProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseIfProperties
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseIfProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseIfPropertiesPolicy}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseIfProperties
   */
  policy: ApisixAdminPluginsPluginNameGet200ResponseIfPropertiesPolicy;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseIfPropertiesPolicy
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseIfPropertiesPolicy {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseIfPropertiesPolicy
   */
  enum: Array<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseProperties
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseProperties
   */
  rejected_code: ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseProperties
   */
  time_window: ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseProperties
   */
  group: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseProperties
   */
  key: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseProperties
   */
  count: ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseProperties
   */
  _meta: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseProperties
   */
  rejected_msg: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseProperties
   */
  key_type: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseProperties
   */
  show_limit_quota_header: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseProperties
   */
  policy: ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseProperties
   */
  allow_degradation: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterSsl;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey
 */
export interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey
   */
  default: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesKey
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType
 */
export interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType
   */
  default: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesKeyType
   */
  enum: Array<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta
 */
export interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaProperties}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta
   */
  properties: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaProperties;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesMeta
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaProperties
 */
export interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaProperties
   */
  filter: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesErrorResponse}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaProperties
   */
  error_response: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesErrorResponse;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaProperties
   */
  priority: ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaProperties
   */
  disable: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesErrorResponse
 */
export interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesErrorResponse {
  /**
   *
   * @type {Array<ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName>}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesErrorResponse
   */
  oneOf: Array<ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisClusterName>;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter
 */
export interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesMetaPropertiesFilter
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode
 */
export interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode
   */
  maximum: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode
   */
  type: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode
   */
  minimum: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesRejectedCode
   */
  default: number;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow
 */
export interface ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow
   */
  exclusiveMinimum: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponsePropertiesTimeWindow
   */
  type: string;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseThen
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseThen {
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseThen
   */
  required: Array<string>;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseThenProperties}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseThen
   */
  properties: ApisixAdminPluginsPluginNameGet200ResponseThenProperties;
}
/**
 *
 * @export
 * @interface ApisixAdminPluginsPluginNameGet200ResponseThenProperties
 */
export interface ApisixAdminPluginsPluginNameGet200ResponseThenProperties {
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseThenProperties
   */
  redis_password: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseThenProperties
   */
  redis_database: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseThenProperties
   */
  redis_timeout: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseThenProperties
   */
  redis_host: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisPassword;
  /**
   *
   * @type {ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout}
   * @memberof ApisixAdminPluginsPluginNameGet200ResponseThenProperties
   */
  redis_port: ApisixAdminPluginsPluginNameGet200ResponseElseThenPropertiesRedisTimeout;
}
/**
 *
 * @export
 * @interface ApisixAdminProtosGet200Response
 */
export interface ApisixAdminProtosGet200Response {
  /**
   *
   * @type {Array<ApisixAdminProtosIdGet200Response>}
   * @memberof ApisixAdminProtosGet200Response
   */
  list?: Array<ApisixAdminProtosIdGet200Response>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminProtosGet200Response
   */
  total?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminProtosIdGet200Response
 */
export interface ApisixAdminProtosIdGet200Response {
  /**
   *
   * @type {ApisixAdminProtosIdGet200ResponseValue}
   * @memberof ApisixAdminProtosIdGet200Response
   */
  value?: ApisixAdminProtosIdGet200ResponseValue;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminProtosIdGet200Response
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminProtosIdGet200Response
   */
  modifiedIndex?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminProtosIdGet200Response
   */
  createdIndex?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminProtosIdGet200ResponseValue
 */
export interface ApisixAdminProtosIdGet200ResponseValue {
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminProtosIdGet200ResponseValue
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminProtosIdGet200ResponseValue
   */
  desc?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminProtosIdGet200ResponseValue
   */
  content: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminProtosIdGet200ResponseValue
   */
  update_time?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminProtosIdGet200ResponseValue
   */
  create_time?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminProtosIdPut201Response
 */
export interface ApisixAdminProtosIdPut201Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminProtosIdPut201Response
   */
  key?: string;
  /**
   *
   * @type {ApisixAdminProtosIdGet200ResponseValue}
   * @memberof ApisixAdminProtosIdPut201Response
   */
  value?: ApisixAdminProtosIdGet200ResponseValue;
}
/**
 *
 * @export
 * @interface ApisixAdminProtosIdPutRequest
 */
export interface ApisixAdminProtosIdPutRequest {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminProtosIdPutRequest
   */
  content: string;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200Response
 */
export interface ApisixAdminRoutesGet200Response {
  /**
   *
   * @type {Array<ApisixAdminRoutesGet200ResponseListInner>}
   * @memberof ApisixAdminRoutesGet200Response
   */
  list?: Array<ApisixAdminRoutesGet200ResponseListInner>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200Response
   */
  total?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInner
 */
export interface ApisixAdminRoutesGet200ResponseListInner {
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValue}
   * @memberof ApisixAdminRoutesGet200ResponseListInner
   */
  value: ApisixAdminRoutesGet200ResponseListInnerValue;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInner
   */
  key: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInner
   */
  modifiedIndex: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInner
   */
  createdIndex: number;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValue
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValue {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  desc?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  plugin_config_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   * route status, 1 to enable, 0 to disable
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  status?: ApisixAdminRoutesGet200ResponseListInnerValueStatusEnum;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  enable_websocket?: boolean;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  service_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {Set<string>}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  methods?: Set<ApisixAdminRoutesGet200ResponseListInnerValueMethodsEnum>;
  /**
   *
   * @type {Set<string>}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  hosts?: Set<string>;
  /**
   *
   * @type {Set<ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner>}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  remote_addrs?: Set<ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  filter_func?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  vars?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  name?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  upstream_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  script_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  host?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  priority?: number;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstream}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  upstream?: ApisixAdminRoutesGet200ResponseListInnerValueUpstream | null;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  plugins?: object;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  remote_addr?: ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  labels?: object;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  timeout?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  script?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  uri?: string;
  /**
   *
   * @type {Set<string>}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValue
   */
  uris?: Set<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId {}
/**
 * client IP
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner {}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstream
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstream {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  desc?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  update_time?: number;
  /**
   * The key used with `hash_on` when `type` is `chash`. When `hash_on` is set to `header` or `cookie`, `key` is required. When `hash_on` is set to `consumer`, `key` is not required as the consumer name will be used as the key automatically.
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  retries?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  retry_timeout?: number;
  /**
   * Configure the host when the request is forwarded to the upstream. `pass` is used to pass the request\'s host to the upstream without modification. `node` sets the host to the the host of the upstream node. `rewrite` sets the host to the value of `upstream_host`.
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  pass_host?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamPassHostEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  upstream_host?: string;
  /**
   * Load balancing algorithm. Support weighted round robin, consistent hashing, exponentially weighted moving average, and least connections algorithms.
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  type?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTypeEnum;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecks}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  checks?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecks | null;
  /**
   * Type of value to hash on when `type` is `chash`.
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  hash_on?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamHashOnEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  name?: string;
  /**
   * Protocol to communicate with the upstream.
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  scheme?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamSchemeEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  service_name?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamKeepalivePool}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  keepalive_pool?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamKeepalivePool;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  timeout?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   * discovery type
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  discovery_type?: string;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  labels?: object;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamDiscoveryArgs}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  discovery_args?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamDiscoveryArgs;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodes}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  nodes?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodes;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  tls?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstream
   */
  create_time?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecks
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecks {
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecks
   */
  active?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassive}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecks
   */
  passive?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassive;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive
   */
  port?: number;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveHealthy}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive
   */
  healthy?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveHealthy;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive
   */
  http_path?: string;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive
   */
  https_verify_certificate?: boolean;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveUnhealthy}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive
   */
  unhealthy?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveUnhealthy;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive
   */
  req_headers?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive
   */
  timeout?: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive
   */
  type?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveTypeEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive
   */
  host?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActive
   */
  concurrency?: number;
}

export const ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveTypeEnum = {
  Http: 'http',
  Https: 'https',
  Tcp: 'tcp',
} as const;

export type ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveTypeEnum =
  (typeof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveTypeEnum)[keyof typeof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveTypeEnum];

/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveHealthy
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveHealthy {
  /**
   *
   * @type {Set<number>}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveHealthy
   */
  http_statuses?: Set<number>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveHealthy
   */
  interval?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveHealthy
   */
  successes?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveUnhealthy
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveUnhealthy {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveUnhealthy
   */
  interval?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveUnhealthy
   */
  tcp_failures?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveUnhealthy
   */
  timeouts?: number;
  /**
   *
   * @type {Set<number>}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveUnhealthy
   */
  http_statuses?: Set<number>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksActiveUnhealthy
   */
  http_failures?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassive
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassive {
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveHealthy}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassive
   */
  healthy?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveHealthy;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveUnhealthy}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassive
   */
  unhealthy?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveUnhealthy;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassive
   */
  type?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveTypeEnum;
}

export const ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveTypeEnum = {
  Http: 'http',
  Https: 'https',
  Tcp: 'tcp',
} as const;

export type ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveTypeEnum =
  (typeof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveTypeEnum)[keyof typeof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveTypeEnum];

/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveHealthy
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveHealthy {
  /**
   *
   * @type {Set<number>}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveHealthy
   */
  http_statuses?: Set<number>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveHealthy
   */
  successes?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveUnhealthy
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveUnhealthy {
  /**
   *
   * @type {Set<number>}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveUnhealthy
   */
  http_statuses?: Set<number>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveUnhealthy
   */
  http_failures?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveUnhealthy
   */
  tcp_failures?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecksPassiveUnhealthy
   */
  timeouts?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamDiscoveryArgs
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamDiscoveryArgs {
  /**
   * group name
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamDiscoveryArgs
   */
  group_name?: string;
  /**
   * namespace id
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamDiscoveryArgs
   */
  namespace_id?: string;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamKeepalivePool
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamKeepalivePool {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamKeepalivePool
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamKeepalivePool
   */
  idle_timeout?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamKeepalivePool
   */
  requests?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodes
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodes {}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodesAnyOfInner
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodesAnyOfInner {
  /**
   * weight of node
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodesAnyOfInner
   */
  weight: number;
  /**
   * port of node
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodesAnyOfInner
   */
  port: number;
  /**
   * metadata of node
   * @type {object}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodesAnyOfInner
   */
  metadata?: object;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodesAnyOfInner
   */
  host: string;
  /**
   * priority of node
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodesAnyOfInner
   */
  priority?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout
   */
  connect: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout
   */
  read: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout
   */
  send: number;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls
 */
export interface ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls {
  /**
   * Turn on server certificate verification, currently only kafka upstream is supported
   * @type {boolean}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls
   */
  verify?: boolean;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls
   */
  client_key?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls
   */
  client_cert?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls
   */
  client_cert_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesIdDelete200Response
 */
export interface ApisixAdminRoutesIdDelete200Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesIdDelete200Response
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesIdDelete200Response
   */
  deleted?: string;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesIdGet200Response
 */
export interface ApisixAdminRoutesIdGet200Response {
  /**
   *
   * @type {ApisixAdminRoutesPost201ResponseValue}
   * @memberof ApisixAdminRoutesIdGet200Response
   */
  value?: ApisixAdminRoutesPost201ResponseValue;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesIdGet200Response
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesIdGet200Response
   */
  modifiedIndex?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesIdGet200Response
   */
  createdIndex?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesPost201Response
 */
export interface ApisixAdminRoutesPost201Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPost201Response
   */
  key?: string;
  /**
   *
   * @type {ApisixAdminRoutesPost201ResponseValue}
   * @memberof ApisixAdminRoutesPost201Response
   */
  value?: ApisixAdminRoutesPost201ResponseValue;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesPost201ResponseValue
 */
export interface ApisixAdminRoutesPost201ResponseValue {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  desc?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  update_time?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  create_time?: number;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  plugin_config_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   * route status, 1 to enable, 0 to disable
   * @type {number}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  status?: ApisixAdminRoutesPost201ResponseValueStatusEnum;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  enable_websocket?: boolean;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  service_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {Set<string>}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  methods?: Set<ApisixAdminRoutesPost201ResponseValueMethodsEnum>;
  /**
   *
   * @type {Set<string>}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  hosts?: Set<string>;
  /**
   *
   * @type {Set<ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner>}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  remote_addrs?: Set<ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  filter_func?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  vars?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  name?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  upstream_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  script_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  host?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  priority?: number;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstream}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  upstream?: ApisixAdminRoutesGet200ResponseListInnerValueUpstream | null;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  plugins?: object;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  remote_addr?: ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  labels?: object;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  timeout?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  script?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  uri?: string;
  /**
   *
   * @type {Set<string>}
   * @memberof ApisixAdminRoutesPost201ResponseValue
   */
  uris?: Set<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesPostRequest
 */
export interface ApisixAdminRoutesPostRequest {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequest
   */
  desc?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesPostRequest
   */
  plugin_config_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   * route status, 1 to enable, 0 to disable
   * @type {number}
   * @memberof ApisixAdminRoutesPostRequest
   */
  status?: ApisixAdminRoutesPostRequestStatusEnum;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesPostRequest
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminRoutesPostRequest
   */
  enable_websocket?: boolean;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesPostRequest
   */
  service_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {Set<string>}
   * @memberof ApisixAdminRoutesPostRequest
   */
  methods?: Set<ApisixAdminRoutesPostRequestMethodsEnum>;
  /**
   *
   * @type {Set<string>}
   * @memberof ApisixAdminRoutesPostRequest
   */
  hosts?: Set<string>;
  /**
   *
   * @type {Set<ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner>}
   * @memberof ApisixAdminRoutesPostRequest
   */
  remote_addrs?: Set<ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequest
   */
  filter_func?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminRoutesPostRequest
   */
  vars?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequest
   */
  name?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesPostRequest
   */
  upstream_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesPostRequest
   */
  script_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequest
   */
  host?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesPostRequest
   */
  priority?: number;
  /**
   *
   * @type {ApisixAdminRoutesPostRequestUpstream}
   * @memberof ApisixAdminRoutesPostRequest
   */
  upstream?: ApisixAdminRoutesPostRequestUpstream | null;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminRoutesPostRequest
   */
  plugins?: object;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner}
   * @memberof ApisixAdminRoutesPostRequest
   */
  remote_addr?: ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminRoutesPostRequest
   */
  labels?: object;
  /**
   *
   * @type {ApisixAdminRoutesPostRequestUpstreamTimeout}
   * @memberof ApisixAdminRoutesPostRequest
   */
  timeout?: ApisixAdminRoutesPostRequestUpstreamTimeout;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequest
   */
  script?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequest
   */
  uri?: string;
  /**
   *
   * @type {Set<string>}
   * @memberof ApisixAdminRoutesPostRequest
   */
  uris?: Set<string>;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesPostRequestUpstream
 */
export interface ApisixAdminRoutesPostRequestUpstream {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  desc?: string;
  /**
   * The key used with `hash_on` when `type` is `chash`. When `hash_on` is set to `header` or `cookie`, `key` is required. When `hash_on` is set to `consumer`, `key` is not required as the consumer name will be used as the key automatically.
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  retries?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  retry_timeout?: number;
  /**
   * Configure the host when the request is forwarded to the upstream. `pass` is used to pass the request\'s host to the upstream without modification. `node` sets the host to the the host of the upstream node. `rewrite` sets the host to the value of `upstream_host`.
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  pass_host?: ApisixAdminRoutesPostRequestUpstreamPassHostEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  upstream_host?: string;
  /**
   * Load balancing algorithm. Support weighted round robin, consistent hashing, exponentially weighted moving average, and least connections algorithms.
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  type?: ApisixAdminRoutesPostRequestUpstreamTypeEnum;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecks}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  checks?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecks | null;
  /**
   * Type of value to hash on when `type` is `chash`.
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  hash_on?: ApisixAdminRoutesPostRequestUpstreamHashOnEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  name?: string;
  /**
   * Protocol to communicate with the upstream.
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  scheme?: ApisixAdminRoutesPostRequestUpstreamSchemeEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  service_name?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamKeepalivePool}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  keepalive_pool?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamKeepalivePool;
  /**
   *
   * @type {ApisixAdminRoutesPostRequestUpstreamTimeout}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  timeout?: ApisixAdminRoutesPostRequestUpstreamTimeout;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   * discovery type
   * @type {string}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  discovery_type?: string;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  labels?: object;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamDiscoveryArgs}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  discovery_args?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamDiscoveryArgs;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodes}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  nodes?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodes;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls}
   * @memberof ApisixAdminRoutesPostRequestUpstream
   */
  tls?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls;
}
/**
 *
 * @export
 * @interface ApisixAdminRoutesPostRequestUpstreamTimeout
 */
export interface ApisixAdminRoutesPostRequestUpstreamTimeout {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesPostRequestUpstreamTimeout
   */
  connect: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesPostRequestUpstreamTimeout
   */
  read: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminRoutesPostRequestUpstreamTimeout
   */
  send: number;
}
/**
 *
 * @export
 * @interface ApisixAdminSecretsGet200Response
 */
export interface ApisixAdminSecretsGet200Response {
  /**
   *
   * @type {Array<ApisixAdminSecretsGet200ResponseListInner>}
   * @memberof ApisixAdminSecretsGet200Response
   */
  list?: Array<ApisixAdminSecretsGet200ResponseListInner>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSecretsGet200Response
   */
  total?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminSecretsGet200ResponseListInner
 */
export interface ApisixAdminSecretsGet200ResponseListInner {
  /**
   *
   * @type {ApisixAdminSecretsGet200ResponseListInnerValue}
   * @memberof ApisixAdminSecretsGet200ResponseListInner
   */
  value?: ApisixAdminSecretsGet200ResponseListInnerValue;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsGet200ResponseListInner
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSecretsGet200ResponseListInner
   */
  modifiedIndex?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSecretsGet200ResponseListInner
   */
  createdIndex?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminSecretsGet200ResponseListInnerValue
 */
export interface ApisixAdminSecretsGet200ResponseListInnerValue {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsGet200ResponseListInnerValue
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsGet200ResponseListInnerValue
   */
  prefix: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsGet200ResponseListInnerValue
   */
  token: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSecretsGet200ResponseListInnerValue
   */
  create_time: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSecretsGet200ResponseListInnerValue
   */
  update_time: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsGet200ResponseListInnerValue
   */
  uri: string;
}
/**
 *
 * @export
 * @interface ApisixAdminSecretsSecretmanagerIdPut201Response
 */
export interface ApisixAdminSecretsSecretmanagerIdPut201Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsSecretmanagerIdPut201Response
   */
  key?: string;
  /**
   *
   * @type {ApisixAdminSecretsSecretmanagerIdPut201ResponseValue}
   * @memberof ApisixAdminSecretsSecretmanagerIdPut201Response
   */
  value?: ApisixAdminSecretsSecretmanagerIdPut201ResponseValue;
}
/**
 *
 * @export
 * @interface ApisixAdminSecretsSecretmanagerIdPut201ResponseValue
 */
export interface ApisixAdminSecretsSecretmanagerIdPut201ResponseValue {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsSecretmanagerIdPut201ResponseValue
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsSecretmanagerIdPut201ResponseValue
   */
  prefix?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsSecretmanagerIdPut201ResponseValue
   */
  token?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSecretsSecretmanagerIdPut201ResponseValue
   */
  create_time?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSecretsSecretmanagerIdPut201ResponseValue
   */
  update_time?: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsSecretmanagerIdPut201ResponseValue
   */
  uri?: string;
}
/**
 *
 * @export
 * @interface ApisixAdminSecretsSecretmanagerIdPutRequest
 */
export interface ApisixAdminSecretsSecretmanagerIdPutRequest {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsSecretmanagerIdPutRequest
   */
  uri: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsSecretmanagerIdPutRequest
   */
  prefix: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSecretsSecretmanagerIdPutRequest
   */
  token: string;
}
/**
 *
 * @export
 * @interface ApisixAdminServicesGet200Response
 */
export interface ApisixAdminServicesGet200Response {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminServicesGet200Response
   */
  total?: number;
  /**
   *
   * @type {Array<ApisixAdminServicesGet200ResponseListInner>}
   * @memberof ApisixAdminServicesGet200Response
   */
  list?: Array<ApisixAdminServicesGet200ResponseListInner>;
}
/**
 *
 * @export
 * @interface ApisixAdminServicesGet200ResponseListInner
 */
export interface ApisixAdminServicesGet200ResponseListInner {
  /**
   *
   * @type {number}
   * @memberof ApisixAdminServicesGet200ResponseListInner
   */
  createdIndex?: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminServicesGet200ResponseListInner
   */
  key?: string;
  /**
   *
   * @type {ApisixAdminServicesGet200ResponseListInnerValue}
   * @memberof ApisixAdminServicesGet200ResponseListInner
   */
  value?: ApisixAdminServicesGet200ResponseListInnerValue;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminServicesGet200ResponseListInner
   */
  modifiedIndex?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminServicesGet200ResponseListInnerValue
 */
export interface ApisixAdminServicesGet200ResponseListInnerValue {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  desc?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  name?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  upstream_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  update_time?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  create_time?: number;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  plugins?: object;
  /**
   *
   * @type {ApisixAdminServicesGet200ResponseListInnerValueUpstream}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  upstream?: ApisixAdminServicesGet200ResponseListInnerValueUpstream;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  labels?: object;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  enable_websocket?: boolean;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  script?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {Set<string>}
   * @memberof ApisixAdminServicesGet200ResponseListInnerValue
   */
  hosts?: Set<string>;
}
/**
 * @type ApisixAdminServicesGet200ResponseListInnerValueUpstream
 * @export
 */
export type ApisixAdminServicesGet200ResponseListInnerValueUpstream = string;

/**
 *
 * @export
 * @interface ApisixAdminServicesPost201Response
 */
export interface ApisixAdminServicesPost201Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminServicesPost201Response
   */
  key?: string;
  /**
   *
   * @type {ApisixAdminServicesGet200ResponseListInnerValue}
   * @memberof ApisixAdminServicesPost201Response
   */
  value?: ApisixAdminServicesGet200ResponseListInnerValue;
}
/**
 *
 * @export
 * @interface ApisixAdminServicesPostRequest
 */
export interface ApisixAdminServicesPostRequest {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminServicesPostRequest
   */
  desc?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminServicesPostRequest
   */
  name?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminServicesPostRequest
   */
  upstream_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminServicesPostRequest
   */
  plugins?: object;
  /**
   *
   * @type {ApisixAdminServicesPostRequestUpstream}
   * @memberof ApisixAdminServicesPostRequest
   */
  upstream?: ApisixAdminServicesPostRequestUpstream;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminServicesPostRequest
   */
  labels?: object;
  /**
   *
   * @type {boolean}
   * @memberof ApisixAdminServicesPostRequest
   */
  enable_websocket?: boolean;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminServicesPostRequest
   */
  script?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminServicesPostRequest
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {Set<string>}
   * @memberof ApisixAdminServicesPostRequest
   */
  hosts?: Set<string>;
}
/**
 * @type ApisixAdminServicesPostRequestUpstream
 * @export
 */
export type ApisixAdminServicesPostRequestUpstream = string;

/**
 *
 * @export
 * @interface ApisixAdminSslsGet200Response
 */
export interface ApisixAdminSslsGet200Response {
  /**
   *
   * @type {Array<ApisixAdminSslsGet200ResponseListInner>}
   * @memberof ApisixAdminSslsGet200Response
   */
  list?: Array<ApisixAdminSslsGet200ResponseListInner>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSslsGet200Response
   */
  total?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminSslsGet200ResponseListInner
 */
export interface ApisixAdminSslsGet200ResponseListInner {
  /**
   *
   * @type {ApisixAdminSslsGet200ResponseListInnerValue}
   * @memberof ApisixAdminSslsGet200ResponseListInner
   */
  value?: ApisixAdminSslsGet200ResponseListInnerValue;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsGet200ResponseListInner
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSslsGet200ResponseListInner
   */
  modifiedIndex?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSslsGet200ResponseListInner
   */
  createdIndex?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminSslsGet200ResponseListInnerValue
 */
export interface ApisixAdminSslsGet200ResponseListInnerValue {
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  labels?: object;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  create_time?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  validity_end?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  validity_start?: number;
  /**
   * SSL status. `1`: enable. `0`: disable.
   * @type {number}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  status?: ApisixAdminSslsGet200ResponseListInnerValueStatusEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  keys?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  update_time?: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  sni?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {ApisixAdminSslsGet200ResponseListInnerValueClient}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  client?: ApisixAdminSslsGet200ResponseListInnerValueClient;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  exptime?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  certs?: Array<string>;
  /**
   * APISIX acts as an SSL server or client.
   * @type {string}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  type?: ApisixAdminSslsGet200ResponseListInnerValueTypeEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  cert?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValue
   */
  snis?: Array<string>;
}

export const ApisixAdminSslsGet200ResponseListInnerValueStatusEnum = {
  NUMBER_1: 1,
  NUMBER_0: 0,
} as const;

export type ApisixAdminSslsGet200ResponseListInnerValueStatusEnum =
  (typeof ApisixAdminSslsGet200ResponseListInnerValueStatusEnum)[keyof typeof ApisixAdminSslsGet200ResponseListInnerValueStatusEnum];
export const ApisixAdminSslsGet200ResponseListInnerValueTypeEnum = {
  Server: 'server',
  Client: 'client',
} as const;

export type ApisixAdminSslsGet200ResponseListInnerValueTypeEnum =
  (typeof ApisixAdminSslsGet200ResponseListInnerValueTypeEnum)[keyof typeof ApisixAdminSslsGet200ResponseListInnerValueTypeEnum];

/**
 *
 * @export
 * @interface ApisixAdminSslsGet200ResponseListInnerValueClient
 */
export interface ApisixAdminSslsGet200ResponseListInnerValueClient {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValueClient
   */
  ca: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminSslsGet200ResponseListInnerValueClient
   */
  depth?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminSslsIdPutRequest
 */
export interface ApisixAdminSslsIdPutRequest {
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  labels?: object;
  /**
   * SSL status. `1`: enable. `0`: disable.
   * @type {number}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  status?: ApisixAdminSslsIdPutRequestStatusEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  keys?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  sni?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  ssl_protocols?: Array<ApisixAdminSslsIdPutRequestSslProtocolsEnum>;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {ApisixAdminSslsGet200ResponseListInnerValueClient}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  client?: ApisixAdminSslsGet200ResponseListInnerValueClient;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  certs?: Array<string>;
  /**
   * APISIX acts as an SSL server or client.
   * @type {string}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  type?: ApisixAdminSslsIdPutRequestTypeEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  cert?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminSslsIdPutRequest
   */
  snis?: Array<string>;
}

export const ApisixAdminSslsIdPutRequestStatusEnum = {
  NUMBER_1: 1,
  NUMBER_0: 0,
} as const;

export type ApisixAdminSslsIdPutRequestStatusEnum =
  (typeof ApisixAdminSslsIdPutRequestStatusEnum)[keyof typeof ApisixAdminSslsIdPutRequestStatusEnum];
export const ApisixAdminSslsIdPutRequestSslProtocolsEnum = {
  _2: 'TLSv1.2',
  _3: 'TLSv1.3',
} as const;

export type ApisixAdminSslsIdPutRequestSslProtocolsEnum =
  (typeof ApisixAdminSslsIdPutRequestSslProtocolsEnum)[keyof typeof ApisixAdminSslsIdPutRequestSslProtocolsEnum];
export const ApisixAdminSslsIdPutRequestTypeEnum = {
  Server: 'server',
  Client: 'client',
} as const;

export type ApisixAdminSslsIdPutRequestTypeEnum =
  (typeof ApisixAdminSslsIdPutRequestTypeEnum)[keyof typeof ApisixAdminSslsIdPutRequestTypeEnum];

/**
 *
 * @export
 * @interface ApisixAdminSslsPost201Response
 */
export interface ApisixAdminSslsPost201Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsPost201Response
   */
  key?: string;
  /**
   *
   * @type {ApisixAdminSslsGet200ResponseListInnerValue}
   * @memberof ApisixAdminSslsPost201Response
   */
  value?: ApisixAdminSslsGet200ResponseListInnerValue;
}
/**
 *
 * @export
 * @interface ApisixAdminSslsPostRequest
 */
export interface ApisixAdminSslsPostRequest {
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminSslsPostRequest
   */
  labels?: object;
  /**
   * SSL status. `1`: enable. `0`: disable.
   * @type {number}
   * @memberof ApisixAdminSslsPostRequest
   */
  status?: ApisixAdminSslsPostRequestStatusEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminSslsPostRequest
   */
  keys?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsPostRequest
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsPostRequest
   */
  sni?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminSslsPostRequest
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {ApisixAdminSslsGet200ResponseListInnerValueClient}
   * @memberof ApisixAdminSslsPostRequest
   */
  client?: ApisixAdminSslsGet200ResponseListInnerValueClient;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminSslsPostRequest
   */
  certs?: Array<string>;
  /**
   * APISIX acts as an SSL server or client.
   * @type {string}
   * @memberof ApisixAdminSslsPostRequest
   */
  type?: ApisixAdminSslsPostRequestTypeEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminSslsPostRequest
   */
  cert?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApisixAdminSslsPostRequest
   */
  snis?: Array<string>;
}

export const ApisixAdminSslsPostRequestStatusEnum = {
  NUMBER_1: 1,
  NUMBER_0: 0,
} as const;

export type ApisixAdminSslsPostRequestStatusEnum =
  (typeof ApisixAdminSslsPostRequestStatusEnum)[keyof typeof ApisixAdminSslsPostRequestStatusEnum];
export const ApisixAdminSslsPostRequestTypeEnum = {
  Server: 'server',
  Client: 'client',
} as const;

export type ApisixAdminSslsPostRequestTypeEnum =
  (typeof ApisixAdminSslsPostRequestTypeEnum)[keyof typeof ApisixAdminSslsPostRequestTypeEnum];

/**
 *
 * @export
 * @interface ApisixAdminStreamRoutesGet200Response
 */
export interface ApisixAdminStreamRoutesGet200Response {
  /**
   *
   * @type {Array<ApisixAdminStreamRoutesGet200ResponseListInner>}
   * @memberof ApisixAdminStreamRoutesGet200Response
   */
  list?: Array<ApisixAdminStreamRoutesGet200ResponseListInner>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminStreamRoutesGet200Response
   */
  total?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminStreamRoutesGet200ResponseListInner
 */
export interface ApisixAdminStreamRoutesGet200ResponseListInner {
  /**
   *
   * @type {ApisixAdminStreamRoutesGet200ResponseListInnerValue}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInner
   */
  value: ApisixAdminStreamRoutesGet200ResponseListInnerValue;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInner
   */
  key: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInner
   */
  modifiedIndex: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInner
   */
  createdIndex: number;
}
/**
 *
 * @export
 * @interface ApisixAdminStreamRoutesGet200ResponseListInnerValue
 */
export interface ApisixAdminStreamRoutesGet200ResponseListInnerValue {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  desc?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  upstream_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  update_time?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  create_time?: number;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  sni?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  remote_addr?: ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner;
  /**
   *
   * @type {ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  protocol?: ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol;
  /**
   *
   * @type {ApisixAdminStreamRoutesGet200ResponseListInnerValueServerAddr}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  server_addr?: ApisixAdminStreamRoutesGet200ResponseListInnerValueServerAddr;
  /**
   *
   * @type {ApisixAdminServicesGet200ResponseListInnerValueUpstream}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  upstream?: ApisixAdminServicesGet200ResponseListInnerValueUpstream;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  plugins?: object;
  /**
   * server port
   * @type {number}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValue
   */
  server_port?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol
 */
export interface ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol {
  /**
   *
   * @type {Array<ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocolLoggerInner>}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol
   */
  logger?: Array<ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocolLoggerInner>;
  /**
   * protocol-specific configuration
   * @type {object}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol
   */
  conf?: object;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol
   */
  superior_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol
   */
  name: string;
}
/**
 *
 * @export
 * @interface ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocolLoggerInner
 */
export interface ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocolLoggerInner {
  /**
   * logger plugin configuration
   * @type {object}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocolLoggerInner
   */
  conf?: object;
  /**
   * logger filter rules
   * @type {Array<string>}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocolLoggerInner
   */
  filter?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocolLoggerInner
   */
  name?: string;
}
/**
 * server IP
 * @export
 * @interface ApisixAdminStreamRoutesGet200ResponseListInnerValueServerAddr
 */
export interface ApisixAdminStreamRoutesGet200ResponseListInnerValueServerAddr {}
/**
 *
 * @export
 * @interface ApisixAdminStreamRoutesIdGet200Response
 */
export interface ApisixAdminStreamRoutesIdGet200Response {
  /**
   *
   * @type {ApisixAdminStreamRoutesGet200ResponseListInner}
   * @memberof ApisixAdminStreamRoutesIdGet200Response
   */
  items?: ApisixAdminStreamRoutesGet200ResponseListInner;
}
/**
 *
 * @export
 * @interface ApisixAdminStreamRoutesIdPutRequest
 */
export interface ApisixAdminStreamRoutesIdPutRequest {
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminStreamRoutesIdPutRequest
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminStreamRoutesIdPutRequest
   */
  desc?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminStreamRoutesIdPutRequest
   */
  upstream_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminStreamRoutesIdPutRequest
   */
  service_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminStreamRoutesIdPutRequest
   */
  sni?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner}
   * @memberof ApisixAdminStreamRoutesIdPutRequest
   */
  remote_addr?: ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner;
  /**
   *
   * @type {ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol}
   * @memberof ApisixAdminStreamRoutesIdPutRequest
   */
  protocol?: ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol;
  /**
   *
   * @type {ApisixAdminStreamRoutesGet200ResponseListInnerValueServerAddr}
   * @memberof ApisixAdminStreamRoutesIdPutRequest
   */
  server_addr?: ApisixAdminStreamRoutesGet200ResponseListInnerValueServerAddr;
  /**
   *
   * @type {ApisixAdminServicesPostRequestUpstream}
   * @memberof ApisixAdminStreamRoutesIdPutRequest
   */
  upstream?: ApisixAdminServicesPostRequestUpstream;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminStreamRoutesIdPutRequest
   */
  plugins?: object;
  /**
   * server port
   * @type {number}
   * @memberof ApisixAdminStreamRoutesIdPutRequest
   */
  server_port?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminStreamRoutesPost201Response
 */
export interface ApisixAdminStreamRoutesPost201Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminStreamRoutesPost201Response
   */
  key?: string;
  /**
   *
   * @type {ApisixAdminStreamRoutesGet200ResponseListInnerValue}
   * @memberof ApisixAdminStreamRoutesPost201Response
   */
  value?: ApisixAdminStreamRoutesGet200ResponseListInnerValue;
}
/**
 *
 * @export
 * @interface ApisixAdminStreamRoutesPostRequest
 */
export interface ApisixAdminStreamRoutesPostRequest {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminStreamRoutesPostRequest
   */
  desc?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminStreamRoutesPostRequest
   */
  upstream_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminStreamRoutesPostRequest
   */
  service_id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminStreamRoutesPostRequest
   */
  sni?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminStreamRoutesPostRequest
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner}
   * @memberof ApisixAdminStreamRoutesPostRequest
   */
  remote_addr?: ApisixAdminRoutesGet200ResponseListInnerValueRemoteAddrsInner;
  /**
   *
   * @type {ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol}
   * @memberof ApisixAdminStreamRoutesPostRequest
   */
  protocol?: ApisixAdminStreamRoutesGet200ResponseListInnerValueProtocol;
  /**
   *
   * @type {ApisixAdminStreamRoutesGet200ResponseListInnerValueServerAddr}
   * @memberof ApisixAdminStreamRoutesPostRequest
   */
  server_addr?: ApisixAdminStreamRoutesGet200ResponseListInnerValueServerAddr;
  /**
   *
   * @type {ApisixAdminServicesPostRequestUpstream}
   * @memberof ApisixAdminStreamRoutesPostRequest
   */
  upstream?: ApisixAdminServicesPostRequestUpstream;
  /**
   *
   * @type {object}
   * @memberof ApisixAdminStreamRoutesPostRequest
   */
  plugins?: object;
  /**
   * server port
   * @type {number}
   * @memberof ApisixAdminStreamRoutesPostRequest
   */
  server_port?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminUpstreamsGet200Response
 */
export interface ApisixAdminUpstreamsGet200Response {
  /**
   *
   * @type {Array<ApisixAdminUpstreamsGet200ResponseListInner>}
   * @memberof ApisixAdminUpstreamsGet200Response
   */
  list?: Array<ApisixAdminUpstreamsGet200ResponseListInner>;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminUpstreamsGet200Response
   */
  total?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminUpstreamsGet200ResponseListInner
 */
export interface ApisixAdminUpstreamsGet200ResponseListInner {
  /**
   *
   * @type {ApisixAdminUpstreamsGet200ResponseListInnerValue}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInner
   */
  value: ApisixAdminUpstreamsGet200ResponseListInnerValue;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInner
   */
  key: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInner
   */
  modifiedIndex: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInner
   */
  createdIndex: number;
}
/**
 *
 * @export
 * @interface ApisixAdminUpstreamsGet200ResponseListInnerValue
 */
export interface ApisixAdminUpstreamsGet200ResponseListInnerValue {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  desc?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  update_time?: number;
  /**
   * The key used with `hash_on` when `type` is `chash`. When `hash_on` is set to `header` or `cookie`, `key` is required. When `hash_on` is set to `consumer`, `key` is not required as the consumer name will be used as the key automatically.
   * @type {string}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  retries?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  retry_timeout?: number;
  /**
   * Configure the host when the request is forwarded to the upstream. `pass` is used to pass the request\'s host to the upstream without modification. `node` sets the host to the the host of the upstream node. `rewrite` sets the host to the value of `upstream_host`.
   * @type {string}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  pass_host?: ApisixAdminUpstreamsGet200ResponseListInnerValuePassHostEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  upstream_host?: string;
  /**
   * Load balancing algorithm. Support weighted round robin, consistent hashing, exponentially weighted moving average, and least connections algorithms.
   * @type {string}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  type?: ApisixAdminUpstreamsGet200ResponseListInnerValueTypeEnum;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecks}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  checks?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamChecks | null;
  /**
   * Type of value to hash on when `type` is `chash`.
   * @type {string}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  hash_on?: ApisixAdminUpstreamsGet200ResponseListInnerValueHashOnEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  name?: string;
  /**
   * Protocol to communicate with the upstream.
   * @type {string}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  scheme?: ApisixAdminUpstreamsGet200ResponseListInnerValueSchemeEnum;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  service_name?: string;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamKeepalivePool}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  keepalive_pool?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamKeepalivePool;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  timeout?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTimeout;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  id?: ApisixAdminRoutesGet200ResponseListInnerValuePluginConfigId;
  /**
   * discovery type
   * @type {string}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  discovery_type?: string;
  /**
   * Key-value pairs to specify attributes.
   * @type {object}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  labels?: object;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamDiscoveryArgs}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  discovery_args?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamDiscoveryArgs;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodes}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  nodes?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamNodes;
  /**
   *
   * @type {ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  tls?: ApisixAdminRoutesGet200ResponseListInnerValueUpstreamTls;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminUpstreamsGet200ResponseListInnerValue
   */
  create_time?: number;
}

export const ApisixAdminUpstreamsGet200ResponseListInnerValuePassHostEnum = {
  Pass: 'pass',
  Node: 'node',
  Rewrite: 'rewrite',
} as const;

export type ApisixAdminUpstreamsGet200ResponseListInnerValuePassHostEnum =
  (typeof ApisixAdminUpstreamsGet200ResponseListInnerValuePassHostEnum)[keyof typeof ApisixAdminUpstreamsGet200ResponseListInnerValuePassHostEnum];
export const ApisixAdminUpstreamsGet200ResponseListInnerValueTypeEnum = {
  Roundrobin: 'roundrobin',
  Chash: 'chash',
  Ewma: 'ewma',
  LeastConn: 'least_conn',
} as const;

export type ApisixAdminUpstreamsGet200ResponseListInnerValueTypeEnum =
  (typeof ApisixAdminUpstreamsGet200ResponseListInnerValueTypeEnum)[keyof typeof ApisixAdminUpstreamsGet200ResponseListInnerValueTypeEnum];
export const ApisixAdminUpstreamsGet200ResponseListInnerValueHashOnEnum = {
  Vars: 'vars',
  Header: 'header',
  Cookie: 'cookie',
  Consumer: 'consumer',
  VarsCombinations: 'vars_combinations',
} as const;

export type ApisixAdminUpstreamsGet200ResponseListInnerValueHashOnEnum =
  (typeof ApisixAdminUpstreamsGet200ResponseListInnerValueHashOnEnum)[keyof typeof ApisixAdminUpstreamsGet200ResponseListInnerValueHashOnEnum];
export const ApisixAdminUpstreamsGet200ResponseListInnerValueSchemeEnum = {
  Grpc: 'grpc',
  Grpcs: 'grpcs',
  Http: 'http',
  Https: 'https',
  Tcp: 'tcp',
  Tls: 'tls',
  Udp: 'udp',
  Kafka: 'kafka',
} as const;

export type ApisixAdminUpstreamsGet200ResponseListInnerValueSchemeEnum =
  (typeof ApisixAdminUpstreamsGet200ResponseListInnerValueSchemeEnum)[keyof typeof ApisixAdminUpstreamsGet200ResponseListInnerValueSchemeEnum];

/**
 *
 * @export
 * @interface ApisixAdminUpstreamsIdGet200Response
 */
export interface ApisixAdminUpstreamsIdGet200Response {
  /**
   *
   * @type {ApisixAdminServicesGet200ResponseListInnerValueUpstream}
   * @memberof ApisixAdminUpstreamsIdGet200Response
   */
  value?: ApisixAdminServicesGet200ResponseListInnerValueUpstream;
  /**
   *
   * @type {string}
   * @memberof ApisixAdminUpstreamsIdGet200Response
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminUpstreamsIdGet200Response
   */
  modifiedIndex?: number;
  /**
   *
   * @type {number}
   * @memberof ApisixAdminUpstreamsIdGet200Response
   */
  createdIndex?: number;
}
/**
 *
 * @export
 * @interface ApisixAdminUpstreamsPost201Response
 */
export interface ApisixAdminUpstreamsPost201Response {
  /**
   *
   * @type {string}
   * @memberof ApisixAdminUpstreamsPost201Response
   */
  key?: string;
  /**
   *
   * @type {ApisixAdminServicesGet200ResponseListInnerValueUpstream}
   * @memberof ApisixAdminUpstreamsPost201Response
   */
  value?: ApisixAdminServicesGet200ResponseListInnerValueUpstream;
}

/**
 * ConsumerApi - axios parameter creator
 * @export
 */
export const ConsumerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured consumers.
     * @summary Get All Consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/consumers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a consumer with a custom ID.
     * @summary Create Consumer
     * @param {ApisixAdminConsumersPutRequest} [apisixAdminConsumersPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumersPut: async (
      apisixAdminConsumersPutRequest?: ApisixAdminConsumersPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/consumers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminConsumersPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a consumer by ID.
     * @summary Delete Consumer by ID
     * @param {string} username Specified consumer username.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumersUsernameDelete: async (
      username: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists('apisixAdminConsumersUsernameDelete', 'username', username);
      const localVarPath = `/apisix/admin/consumers/{username}`.replace(
        `{${'username'}}`,
        encodeURIComponent(String(username)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a consumer by ID.
     * @summary Get Consumer by ID
     * @param {string} username Specified consumer username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumersUsernameGet: async (
      username: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists('apisixAdminConsumersUsernameGet', 'username', username);
      const localVarPath = `/apisix/admin/consumers/{username}`.replace(
        `{${'username'}}`,
        encodeURIComponent(String(username)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ConsumerApi - functional programming interface
 * @export
 */
export const ConsumerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ConsumerApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured consumers.
     * @summary Get All Consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminConsumersGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminConsumersGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminConsumersGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsumerApi.apisixAdminConsumersGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a consumer with a custom ID.
     * @summary Create Consumer
     * @param {ApisixAdminConsumersPutRequest} [apisixAdminConsumersPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminConsumersPut(
      apisixAdminConsumersPutRequest?: ApisixAdminConsumersPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminConsumersPut201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminConsumersPut(
        apisixAdminConsumersPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsumerApi.apisixAdminConsumersPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a consumer by ID.
     * @summary Delete Consumer by ID
     * @param {string} username Specified consumer username.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminConsumersUsernameDelete(
      username: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminConsumersUsernameDelete(
        username,
        force,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsumerApi.apisixAdminConsumersUsernameDelete']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a consumer by ID.
     * @summary Get Consumer by ID
     * @param {string} username Specified consumer username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminConsumersUsernameGet(
      username: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminConsumersGet200ResponseListInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminConsumersUsernameGet(username, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsumerApi.apisixAdminConsumersUsernameGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ConsumerApi - factory interface
 * @export
 */
export const ConsumerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ConsumerApiFp(configuration);
  return {
    /**
     * Get all configured consumers.
     * @summary Get All Consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumersGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminConsumersGet200Response> {
      return localVarFp.apisixAdminConsumersGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Create a consumer with a custom ID.
     * @summary Create Consumer
     * @param {ConsumerApiApisixAdminConsumersPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumersPut(
      requestParameters: ConsumerApiApisixAdminConsumersPutRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminConsumersPut201Response> {
      return localVarFp
        .apisixAdminConsumersPut(requestParameters.apisixAdminConsumersPutRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete a consumer by ID.
     * @summary Delete Consumer by ID
     * @param {ConsumerApiApisixAdminConsumersUsernameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumersUsernameDelete(
      requestParameters: ConsumerApiApisixAdminConsumersUsernameDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminConsumersUsernameDelete(requestParameters.username, requestParameters.force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a consumer by ID.
     * @summary Get Consumer by ID
     * @param {ConsumerApiApisixAdminConsumersUsernameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumersUsernameGet(
      requestParameters: ConsumerApiApisixAdminConsumersUsernameGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminConsumersGet200ResponseListInner> {
      return localVarFp
        .apisixAdminConsumersUsernameGet(requestParameters.username, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ConsumerApi - interface
 * @export
 * @interface ConsumerApi
 */
export interface ConsumerApiInterface {
  /**
   * Get all configured consumers.
   * @summary Get All Consumers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerApiInterface
   */
  apisixAdminConsumersGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminConsumersGet200Response>;

  /**
   * Create a consumer with a custom ID.
   * @summary Create Consumer
   * @param {ApisixAdminConsumersPutRequest} [apisixAdminConsumersPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerApiInterface
   */
  apisixAdminConsumersPut(
    apisixAdminConsumersPutRequest?: ApisixAdminConsumersPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminConsumersPut201Response>;

  /**
   * Delete a consumer by ID.
   * @summary Delete Consumer by ID
   * @param {string} username Specified consumer username.
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerApiInterface
   */
  apisixAdminConsumersUsernameDelete(
    username: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get a consumer by ID.
   * @summary Get Consumer by ID
   * @param {string} username Specified consumer username.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerApiInterface
   */
  apisixAdminConsumersUsernameGet(
    username: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminConsumersGet200ResponseListInner>;
}

/**
 * Request parameters for apisixAdminConsumersPut operation in ConsumerApi.
 * @export
 * @interface ConsumerApiApisixAdminConsumersPutRequest
 */
export interface ConsumerApiApisixAdminConsumersPutRequest {
  /**
   *
   * @type {ApisixAdminConsumersPutRequest}
   * @memberof ConsumerApiApisixAdminConsumersPut
   */
  readonly apisixAdminConsumersPutRequest?: ApisixAdminConsumersPutRequest;
}

/**
 * Request parameters for apisixAdminConsumersUsernameDelete operation in ConsumerApi.
 * @export
 * @interface ConsumerApiApisixAdminConsumersUsernameDeleteRequest
 */
export interface ConsumerApiApisixAdminConsumersUsernameDeleteRequest {
  /**
   * Specified consumer username.
   * @type {string}
   * @memberof ConsumerApiApisixAdminConsumersUsernameDelete
   */
  readonly username: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof ConsumerApiApisixAdminConsumersUsernameDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminConsumersUsernameGet operation in ConsumerApi.
 * @export
 * @interface ConsumerApiApisixAdminConsumersUsernameGetRequest
 */
export interface ConsumerApiApisixAdminConsumersUsernameGetRequest {
  /**
   * Specified consumer username.
   * @type {string}
   * @memberof ConsumerApiApisixAdminConsumersUsernameGet
   */
  readonly username: string;
}

/**
 * ConsumerApi - object-oriented interface
 * @export
 * @class ConsumerApi
 * @extends {BaseAPI}
 */
export class ConsumerApi extends BaseAPI implements ConsumerApiInterface {
  /**
   * Get all configured consumers.
   * @summary Get All Consumers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerApi
   */
  public apisixAdminConsumersGet(options?: RawAxiosRequestConfig) {
    return ConsumerApiFp(this.configuration)
      .apisixAdminConsumersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a consumer with a custom ID.
   * @summary Create Consumer
   * @param {ConsumerApiApisixAdminConsumersPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerApi
   */
  public apisixAdminConsumersPut(
    requestParameters: ConsumerApiApisixAdminConsumersPutRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return ConsumerApiFp(this.configuration)
      .apisixAdminConsumersPut(requestParameters.apisixAdminConsumersPutRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a consumer by ID.
   * @summary Delete Consumer by ID
   * @param {ConsumerApiApisixAdminConsumersUsernameDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerApi
   */
  public apisixAdminConsumersUsernameDelete(
    requestParameters: ConsumerApiApisixAdminConsumersUsernameDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ConsumerApiFp(this.configuration)
      .apisixAdminConsumersUsernameDelete(requestParameters.username, requestParameters.force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a consumer by ID.
   * @summary Get Consumer by ID
   * @param {ConsumerApiApisixAdminConsumersUsernameGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerApi
   */
  public apisixAdminConsumersUsernameGet(
    requestParameters: ConsumerApiApisixAdminConsumersUsernameGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ConsumerApiFp(this.configuration)
      .apisixAdminConsumersUsernameGet(requestParameters.username, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ConsumerGroupApi - axios parameter creator
 * @export
 */
export const ConsumerGroupApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured consumer groups.
     * @summary Get All Consumer Group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumerGroupsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/consumer_groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a consumer group by ID.
     * @summary Delete Consumer Group by ID
     * @param {string} id Specified consumer group ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumerGroupsIdDelete: async (
      id: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminConsumerGroupsIdDelete', 'id', id);
      const localVarPath = `/apisix/admin/consumer_groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a consumer group by ID.
     * @summary Get Consumer Group by ID
     * @param {string} id Specified consumer groups ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumerGroupsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminConsumerGroupsIdGet', 'id', id);
      const localVarPath = `/apisix/admin/consumer_groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update a consumer group.
     * @summary Update Consumer Group
     * @param {string} id Specified consumer group ID.
     * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumerGroupsIdPatch: async (
      id: string,
      apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminConsumerGroupsIdPatch', 'id', id);
      const localVarPath = `/apisix/admin/consumer_groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminConsumerGroupsIdPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a consumer group with a custom ID.
     * @summary Create Consumer Group by ID
     * @param {string} id Specified consumer groups ID.
     * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumerGroupsIdPut: async (
      id: string,
      apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminConsumerGroupsIdPut', 'id', id);
      const localVarPath = `/apisix/admin/consumer_groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminConsumerGroupsIdPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ConsumerGroupApi - functional programming interface
 * @export
 */
export const ConsumerGroupApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ConsumerGroupApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured consumer groups.
     * @summary Get All Consumer Group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminConsumerGroupsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminConsumerGroupsGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminConsumerGroupsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsumerGroupApi.apisixAdminConsumerGroupsGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a consumer group by ID.
     * @summary Delete Consumer Group by ID
     * @param {string} id Specified consumer group ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminConsumerGroupsIdDelete(
      id: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminConsumerGroupsIdDelete(id, force, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsumerGroupApi.apisixAdminConsumerGroupsIdDelete']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a consumer group by ID.
     * @summary Get Consumer Group by ID
     * @param {string} id Specified consumer groups ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminConsumerGroupsIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminConsumerGroupsGet200ResponseListInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminConsumerGroupsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsumerGroupApi.apisixAdminConsumerGroupsIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update a consumer group.
     * @summary Update Consumer Group
     * @param {string} id Specified consumer group ID.
     * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminConsumerGroupsIdPatch(
      id: string,
      apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminConsumerGroupsIdPatch(
        id,
        apisixAdminConsumerGroupsIdPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsumerGroupApi.apisixAdminConsumerGroupsIdPatch']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a consumer group with a custom ID.
     * @summary Create Consumer Group by ID
     * @param {string} id Specified consumer groups ID.
     * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminConsumerGroupsIdPut(
      id: string,
      apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminConsumerGroupsIdPut(
        id,
        apisixAdminConsumerGroupsIdPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsumerGroupApi.apisixAdminConsumerGroupsIdPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ConsumerGroupApi - factory interface
 * @export
 */
export const ConsumerGroupApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ConsumerGroupApiFp(configuration);
  return {
    /**
     * Get all configured consumer groups.
     * @summary Get All Consumer Group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumerGroupsGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminConsumerGroupsGet200Response> {
      return localVarFp.apisixAdminConsumerGroupsGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Delete a consumer group by ID.
     * @summary Delete Consumer Group by ID
     * @param {ConsumerGroupApiApisixAdminConsumerGroupsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumerGroupsIdDelete(
      requestParameters: ConsumerGroupApiApisixAdminConsumerGroupsIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminConsumerGroupsIdDelete(requestParameters.id, requestParameters.force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a consumer group by ID.
     * @summary Get Consumer Group by ID
     * @param {ConsumerGroupApiApisixAdminConsumerGroupsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumerGroupsIdGet(
      requestParameters: ConsumerGroupApiApisixAdminConsumerGroupsIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminConsumerGroupsGet200ResponseListInner> {
      return localVarFp
        .apisixAdminConsumerGroupsIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update a consumer group.
     * @summary Update Consumer Group
     * @param {ConsumerGroupApiApisixAdminConsumerGroupsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumerGroupsIdPatch(
      requestParameters: ConsumerGroupApiApisixAdminConsumerGroupsIdPatchRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response> {
      return localVarFp
        .apisixAdminConsumerGroupsIdPatch(
          requestParameters.id,
          requestParameters.apisixAdminConsumerGroupsIdPutRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a consumer group with a custom ID.
     * @summary Create Consumer Group by ID
     * @param {ConsumerGroupApiApisixAdminConsumerGroupsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminConsumerGroupsIdPut(
      requestParameters: ConsumerGroupApiApisixAdminConsumerGroupsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response> {
      return localVarFp
        .apisixAdminConsumerGroupsIdPut(
          requestParameters.id,
          requestParameters.apisixAdminConsumerGroupsIdPutRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ConsumerGroupApi - interface
 * @export
 * @interface ConsumerGroupApi
 */
export interface ConsumerGroupApiInterface {
  /**
   * Get all configured consumer groups.
   * @summary Get All Consumer Group
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerGroupApiInterface
   */
  apisixAdminConsumerGroupsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminConsumerGroupsGet200Response>;

  /**
   * Delete a consumer group by ID.
   * @summary Delete Consumer Group by ID
   * @param {string} id Specified consumer group ID.
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerGroupApiInterface
   */
  apisixAdminConsumerGroupsIdDelete(
    id: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get a consumer group by ID.
   * @summary Get Consumer Group by ID
   * @param {string} id Specified consumer groups ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerGroupApiInterface
   */
  apisixAdminConsumerGroupsIdGet(
    id: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminConsumerGroupsGet200ResponseListInner>;

  /**
   * Update a consumer group.
   * @summary Update Consumer Group
   * @param {string} id Specified consumer group ID.
   * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerGroupApiInterface
   */
  apisixAdminConsumerGroupsIdPatch(
    id: string,
    apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response>;

  /**
   * Create a consumer group with a custom ID.
   * @summary Create Consumer Group by ID
   * @param {string} id Specified consumer groups ID.
   * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerGroupApiInterface
   */
  apisixAdminConsumerGroupsIdPut(
    id: string,
    apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response>;
}

/**
 * Request parameters for apisixAdminConsumerGroupsIdDelete operation in ConsumerGroupApi.
 * @export
 * @interface ConsumerGroupApiApisixAdminConsumerGroupsIdDeleteRequest
 */
export interface ConsumerGroupApiApisixAdminConsumerGroupsIdDeleteRequest {
  /**
   * Specified consumer group ID.
   * @type {string}
   * @memberof ConsumerGroupApiApisixAdminConsumerGroupsIdDelete
   */
  readonly id: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof ConsumerGroupApiApisixAdminConsumerGroupsIdDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminConsumerGroupsIdGet operation in ConsumerGroupApi.
 * @export
 * @interface ConsumerGroupApiApisixAdminConsumerGroupsIdGetRequest
 */
export interface ConsumerGroupApiApisixAdminConsumerGroupsIdGetRequest {
  /**
   * Specified consumer groups ID.
   * @type {string}
   * @memberof ConsumerGroupApiApisixAdminConsumerGroupsIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for apisixAdminConsumerGroupsIdPatch operation in ConsumerGroupApi.
 * @export
 * @interface ConsumerGroupApiApisixAdminConsumerGroupsIdPatchRequest
 */
export interface ConsumerGroupApiApisixAdminConsumerGroupsIdPatchRequest {
  /**
   * Specified consumer group ID.
   * @type {string}
   * @memberof ConsumerGroupApiApisixAdminConsumerGroupsIdPatch
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminConsumerGroupsIdPutRequest}
   * @memberof ConsumerGroupApiApisixAdminConsumerGroupsIdPatch
   */
  readonly apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest;
}

/**
 * Request parameters for apisixAdminConsumerGroupsIdPut operation in ConsumerGroupApi.
 * @export
 * @interface ConsumerGroupApiApisixAdminConsumerGroupsIdPutRequest
 */
export interface ConsumerGroupApiApisixAdminConsumerGroupsIdPutRequest {
  /**
   * Specified consumer groups ID.
   * @type {string}
   * @memberof ConsumerGroupApiApisixAdminConsumerGroupsIdPut
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminConsumerGroupsIdPutRequest}
   * @memberof ConsumerGroupApiApisixAdminConsumerGroupsIdPut
   */
  readonly apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest;
}

/**
 * ConsumerGroupApi - object-oriented interface
 * @export
 * @class ConsumerGroupApi
 * @extends {BaseAPI}
 */
export class ConsumerGroupApi extends BaseAPI implements ConsumerGroupApiInterface {
  /**
   * Get all configured consumer groups.
   * @summary Get All Consumer Group
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerGroupApi
   */
  public apisixAdminConsumerGroupsGet(options?: RawAxiosRequestConfig) {
    return ConsumerGroupApiFp(this.configuration)
      .apisixAdminConsumerGroupsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a consumer group by ID.
   * @summary Delete Consumer Group by ID
   * @param {ConsumerGroupApiApisixAdminConsumerGroupsIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerGroupApi
   */
  public apisixAdminConsumerGroupsIdDelete(
    requestParameters: ConsumerGroupApiApisixAdminConsumerGroupsIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ConsumerGroupApiFp(this.configuration)
      .apisixAdminConsumerGroupsIdDelete(requestParameters.id, requestParameters.force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a consumer group by ID.
   * @summary Get Consumer Group by ID
   * @param {ConsumerGroupApiApisixAdminConsumerGroupsIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerGroupApi
   */
  public apisixAdminConsumerGroupsIdGet(
    requestParameters: ConsumerGroupApiApisixAdminConsumerGroupsIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ConsumerGroupApiFp(this.configuration)
      .apisixAdminConsumerGroupsIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update a consumer group.
   * @summary Update Consumer Group
   * @param {ConsumerGroupApiApisixAdminConsumerGroupsIdPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerGroupApi
   */
  public apisixAdminConsumerGroupsIdPatch(
    requestParameters: ConsumerGroupApiApisixAdminConsumerGroupsIdPatchRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ConsumerGroupApiFp(this.configuration)
      .apisixAdminConsumerGroupsIdPatch(
        requestParameters.id,
        requestParameters.apisixAdminConsumerGroupsIdPutRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a consumer group with a custom ID.
   * @summary Create Consumer Group by ID
   * @param {ConsumerGroupApiApisixAdminConsumerGroupsIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsumerGroupApi
   */
  public apisixAdminConsumerGroupsIdPut(
    requestParameters: ConsumerGroupApiApisixAdminConsumerGroupsIdPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ConsumerGroupApiFp(this.configuration)
      .apisixAdminConsumerGroupsIdPut(
        requestParameters.id,
        requestParameters.apisixAdminConsumerGroupsIdPutRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GlobalRuleApi - axios parameter creator
 * @export
 */
export const GlobalRuleApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured plugin global rules.
     * @summary Get All Global Rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminGlobalRulesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/global_rules`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a plugin global rule by ID.
     * @summary Delete Global Rule by ID
     * @param {string} id Specified global rule ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminGlobalRulesIdDelete: async (
      id: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminGlobalRulesIdDelete', 'id', id);
      const localVarPath = `/apisix/admin/global_rules/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a global rule by ID.
     * @summary Get Global Rule by ID
     * @param {string} id Specified global rule ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminGlobalRulesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminGlobalRulesIdGet', 'id', id);
      const localVarPath = `/apisix/admin/global_rules/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update a plugin global rule.
     * @summary Update Global Rule
     * @param {string} id Specified global rule ID.
     * @param {ApisixAdminGlobalRulesIdPatchRequest} [apisixAdminGlobalRulesIdPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminGlobalRulesIdPatch: async (
      id: string,
      apisixAdminGlobalRulesIdPatchRequest?: ApisixAdminGlobalRulesIdPatchRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminGlobalRulesIdPatch', 'id', id);
      const localVarPath = `/apisix/admin/global_rules/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminGlobalRulesIdPatchRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a plugin global rule with a custom ID.
     * @summary Create Global Rule by ID
     * @param {string} id Specified global rule ID.
     * @param {ApisixAdminGlobalRulesIdPutRequest} [apisixAdminGlobalRulesIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminGlobalRulesIdPut: async (
      id: string,
      apisixAdminGlobalRulesIdPutRequest?: ApisixAdminGlobalRulesIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminGlobalRulesIdPut', 'id', id);
      const localVarPath = `/apisix/admin/global_rules/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminGlobalRulesIdPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GlobalRuleApi - functional programming interface
 * @export
 */
export const GlobalRuleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GlobalRuleApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured plugin global rules.
     * @summary Get All Global Rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminGlobalRulesGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminGlobalRulesGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminGlobalRulesGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GlobalRuleApi.apisixAdminGlobalRulesGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a plugin global rule by ID.
     * @summary Delete Global Rule by ID
     * @param {string} id Specified global rule ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminGlobalRulesIdDelete(
      id: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminGlobalRulesIdDelete(id, force, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GlobalRuleApi.apisixAdminGlobalRulesIdDelete']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a global rule by ID.
     * @summary Get Global Rule by ID
     * @param {string} id Specified global rule ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminGlobalRulesIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminGlobalRulesGet200ResponseListInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminGlobalRulesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GlobalRuleApi.apisixAdminGlobalRulesIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update a plugin global rule.
     * @summary Update Global Rule
     * @param {string} id Specified global rule ID.
     * @param {ApisixAdminGlobalRulesIdPatchRequest} [apisixAdminGlobalRulesIdPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminGlobalRulesIdPatch(
      id: string,
      apisixAdminGlobalRulesIdPatchRequest?: ApisixAdminGlobalRulesIdPatchRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminGlobalRulesIdPut201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminGlobalRulesIdPatch(
        id,
        apisixAdminGlobalRulesIdPatchRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GlobalRuleApi.apisixAdminGlobalRulesIdPatch']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a plugin global rule with a custom ID.
     * @summary Create Global Rule by ID
     * @param {string} id Specified global rule ID.
     * @param {ApisixAdminGlobalRulesIdPutRequest} [apisixAdminGlobalRulesIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminGlobalRulesIdPut(
      id: string,
      apisixAdminGlobalRulesIdPutRequest?: ApisixAdminGlobalRulesIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminGlobalRulesIdPut201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminGlobalRulesIdPut(
        id,
        apisixAdminGlobalRulesIdPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['GlobalRuleApi.apisixAdminGlobalRulesIdPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GlobalRuleApi - factory interface
 * @export
 */
export const GlobalRuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = GlobalRuleApiFp(configuration);
  return {
    /**
     * Get all configured plugin global rules.
     * @summary Get All Global Rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminGlobalRulesGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminGlobalRulesGet200Response> {
      return localVarFp.apisixAdminGlobalRulesGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Delete a plugin global rule by ID.
     * @summary Delete Global Rule by ID
     * @param {GlobalRuleApiApisixAdminGlobalRulesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminGlobalRulesIdDelete(
      requestParameters: GlobalRuleApiApisixAdminGlobalRulesIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminGlobalRulesIdDelete(requestParameters.id, requestParameters.force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a global rule by ID.
     * @summary Get Global Rule by ID
     * @param {GlobalRuleApiApisixAdminGlobalRulesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminGlobalRulesIdGet(
      requestParameters: GlobalRuleApiApisixAdminGlobalRulesIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminGlobalRulesGet200ResponseListInner> {
      return localVarFp
        .apisixAdminGlobalRulesIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update a plugin global rule.
     * @summary Update Global Rule
     * @param {GlobalRuleApiApisixAdminGlobalRulesIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminGlobalRulesIdPatch(
      requestParameters: GlobalRuleApiApisixAdminGlobalRulesIdPatchRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminGlobalRulesIdPut201Response> {
      return localVarFp
        .apisixAdminGlobalRulesIdPatch(
          requestParameters.id,
          requestParameters.apisixAdminGlobalRulesIdPatchRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a plugin global rule with a custom ID.
     * @summary Create Global Rule by ID
     * @param {GlobalRuleApiApisixAdminGlobalRulesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminGlobalRulesIdPut(
      requestParameters: GlobalRuleApiApisixAdminGlobalRulesIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminGlobalRulesIdPut201Response> {
      return localVarFp
        .apisixAdminGlobalRulesIdPut(
          requestParameters.id,
          requestParameters.apisixAdminGlobalRulesIdPutRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GlobalRuleApi - interface
 * @export
 * @interface GlobalRuleApi
 */
export interface GlobalRuleApiInterface {
  /**
   * Get all configured plugin global rules.
   * @summary Get All Global Rules
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GlobalRuleApiInterface
   */
  apisixAdminGlobalRulesGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminGlobalRulesGet200Response>;

  /**
   * Delete a plugin global rule by ID.
   * @summary Delete Global Rule by ID
   * @param {string} id Specified global rule ID.
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GlobalRuleApiInterface
   */
  apisixAdminGlobalRulesIdDelete(
    id: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get a global rule by ID.
   * @summary Get Global Rule by ID
   * @param {string} id Specified global rule ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GlobalRuleApiInterface
   */
  apisixAdminGlobalRulesIdGet(
    id: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminGlobalRulesGet200ResponseListInner>;

  /**
   * Update a plugin global rule.
   * @summary Update Global Rule
   * @param {string} id Specified global rule ID.
   * @param {ApisixAdminGlobalRulesIdPatchRequest} [apisixAdminGlobalRulesIdPatchRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GlobalRuleApiInterface
   */
  apisixAdminGlobalRulesIdPatch(
    id: string,
    apisixAdminGlobalRulesIdPatchRequest?: ApisixAdminGlobalRulesIdPatchRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminGlobalRulesIdPut201Response>;

  /**
   * Create a plugin global rule with a custom ID.
   * @summary Create Global Rule by ID
   * @param {string} id Specified global rule ID.
   * @param {ApisixAdminGlobalRulesIdPutRequest} [apisixAdminGlobalRulesIdPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GlobalRuleApiInterface
   */
  apisixAdminGlobalRulesIdPut(
    id: string,
    apisixAdminGlobalRulesIdPutRequest?: ApisixAdminGlobalRulesIdPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminGlobalRulesIdPut201Response>;
}

/**
 * Request parameters for apisixAdminGlobalRulesIdDelete operation in GlobalRuleApi.
 * @export
 * @interface GlobalRuleApiApisixAdminGlobalRulesIdDeleteRequest
 */
export interface GlobalRuleApiApisixAdminGlobalRulesIdDeleteRequest {
  /**
   * Specified global rule ID.
   * @type {string}
   * @memberof GlobalRuleApiApisixAdminGlobalRulesIdDelete
   */
  readonly id: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof GlobalRuleApiApisixAdminGlobalRulesIdDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminGlobalRulesIdGet operation in GlobalRuleApi.
 * @export
 * @interface GlobalRuleApiApisixAdminGlobalRulesIdGetRequest
 */
export interface GlobalRuleApiApisixAdminGlobalRulesIdGetRequest {
  /**
   * Specified global rule ID.
   * @type {string}
   * @memberof GlobalRuleApiApisixAdminGlobalRulesIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for apisixAdminGlobalRulesIdPatch operation in GlobalRuleApi.
 * @export
 * @interface GlobalRuleApiApisixAdminGlobalRulesIdPatchRequest
 */
export interface GlobalRuleApiApisixAdminGlobalRulesIdPatchRequest {
  /**
   * Specified global rule ID.
   * @type {string}
   * @memberof GlobalRuleApiApisixAdminGlobalRulesIdPatch
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminGlobalRulesIdPatchRequest}
   * @memberof GlobalRuleApiApisixAdminGlobalRulesIdPatch
   */
  readonly apisixAdminGlobalRulesIdPatchRequest?: ApisixAdminGlobalRulesIdPatchRequest;
}

/**
 * Request parameters for apisixAdminGlobalRulesIdPut operation in GlobalRuleApi.
 * @export
 * @interface GlobalRuleApiApisixAdminGlobalRulesIdPutRequest
 */
export interface GlobalRuleApiApisixAdminGlobalRulesIdPutRequest {
  /**
   * Specified global rule ID.
   * @type {string}
   * @memberof GlobalRuleApiApisixAdminGlobalRulesIdPut
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminGlobalRulesIdPutRequest}
   * @memberof GlobalRuleApiApisixAdminGlobalRulesIdPut
   */
  readonly apisixAdminGlobalRulesIdPutRequest?: ApisixAdminGlobalRulesIdPutRequest;
}

/**
 * GlobalRuleApi - object-oriented interface
 * @export
 * @class GlobalRuleApi
 * @extends {BaseAPI}
 */
export class GlobalRuleApi extends BaseAPI implements GlobalRuleApiInterface {
  /**
   * Get all configured plugin global rules.
   * @summary Get All Global Rules
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GlobalRuleApi
   */
  public apisixAdminGlobalRulesGet(options?: RawAxiosRequestConfig) {
    return GlobalRuleApiFp(this.configuration)
      .apisixAdminGlobalRulesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a plugin global rule by ID.
   * @summary Delete Global Rule by ID
   * @param {GlobalRuleApiApisixAdminGlobalRulesIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GlobalRuleApi
   */
  public apisixAdminGlobalRulesIdDelete(
    requestParameters: GlobalRuleApiApisixAdminGlobalRulesIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GlobalRuleApiFp(this.configuration)
      .apisixAdminGlobalRulesIdDelete(requestParameters.id, requestParameters.force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a global rule by ID.
   * @summary Get Global Rule by ID
   * @param {GlobalRuleApiApisixAdminGlobalRulesIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GlobalRuleApi
   */
  public apisixAdminGlobalRulesIdGet(
    requestParameters: GlobalRuleApiApisixAdminGlobalRulesIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GlobalRuleApiFp(this.configuration)
      .apisixAdminGlobalRulesIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update a plugin global rule.
   * @summary Update Global Rule
   * @param {GlobalRuleApiApisixAdminGlobalRulesIdPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GlobalRuleApi
   */
  public apisixAdminGlobalRulesIdPatch(
    requestParameters: GlobalRuleApiApisixAdminGlobalRulesIdPatchRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GlobalRuleApiFp(this.configuration)
      .apisixAdminGlobalRulesIdPatch(
        requestParameters.id,
        requestParameters.apisixAdminGlobalRulesIdPatchRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a plugin global rule with a custom ID.
   * @summary Create Global Rule by ID
   * @param {GlobalRuleApiApisixAdminGlobalRulesIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GlobalRuleApi
   */
  public apisixAdminGlobalRulesIdPut(
    requestParameters: GlobalRuleApiApisixAdminGlobalRulesIdPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GlobalRuleApiFp(this.configuration)
      .apisixAdminGlobalRulesIdPut(requestParameters.id, requestParameters.apisixAdminGlobalRulesIdPutRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PluginApi - axios parameter creator
 * @export
 */
export const PluginApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured plugin attributes. This API is being [deprecated](https://apisix.apache.org/blog/2023/09/01/release-apache-apisix-3.5.0/#refactor-and-improve-the-plugin-interface-in-admin-api) soon.
     * @summary Get All Plugin Attributes
     * @param {string} all Get all plugin attributes.
     * @param {ApisixAdminPluginsGetSubsystemEnum} [subsystem] Get HTTP or Stream plugin attributes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginsGet: async (
      all: string,
      subsystem?: ApisixAdminPluginsGetSubsystemEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'all' is not null or undefined
      assertParamExists('apisixAdminPluginsGet', 'all', all);
      const localVarPath = `/apisix/admin/plugins`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (all !== undefined) {
        localVarQueryParameter['all'] = all;
      }

      if (subsystem !== undefined) {
        localVarQueryParameter['subsystem'] = subsystem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get all configured plugin names.
     * @summary Get All Plugin Names
     * @param {ApisixAdminPluginsListGetSubsystemEnum} [subsystem] Get HTTP or Stream plugin names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginsListGet: async (
      subsystem?: ApisixAdminPluginsListGetSubsystemEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/plugins/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (subsystem !== undefined) {
        localVarQueryParameter['subsystem'] = subsystem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get attributes of a plugin by plugin name.
     * @summary Get Plugin Attributes by Name
     * @param {string} pluginName The specified plugin name
     * @param {ApisixAdminPluginsPluginNameGetSubsystemEnum} [subsystem] Get attributes of the specified plugin name in HTTP or Stream subsystem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginsPluginNameGet: async (
      pluginName: string,
      subsystem?: ApisixAdminPluginsPluginNameGetSubsystemEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'pluginName' is not null or undefined
      assertParamExists('apisixAdminPluginsPluginNameGet', 'pluginName', pluginName);
      const localVarPath = `/apisix/admin/plugins/{plugin_name}`.replace(
        `{${'plugin_name'}}`,
        encodeURIComponent(String(pluginName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (subsystem !== undefined) {
        localVarQueryParameter['subsystem'] = subsystem;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Hot reload all plugins for changes to the plugin source files to take effect.
     * @summary Reload All Plugins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginsReloadPut: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/plugins/reload`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PluginApi - functional programming interface
 * @export
 */
export const PluginApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PluginApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured plugin attributes. This API is being [deprecated](https://apisix.apache.org/blog/2023/09/01/release-apache-apisix-3.5.0/#refactor-and-improve-the-plugin-interface-in-admin-api) soon.
     * @summary Get All Plugin Attributes
     * @param {string} all Get all plugin attributes.
     * @param {ApisixAdminPluginsGetSubsystemEnum} [subsystem] Get HTTP or Stream plugin attributes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginsGet(
      all: string,
      subsystem?: ApisixAdminPluginsGetSubsystemEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminPluginsGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginsGet(all, subsystem, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginApi.apisixAdminPluginsGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get all configured plugin names.
     * @summary Get All Plugin Names
     * @param {ApisixAdminPluginsListGetSubsystemEnum} [subsystem] Get HTTP or Stream plugin names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginsListGet(
      subsystem?: ApisixAdminPluginsListGetSubsystemEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginsListGet(subsystem, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginApi.apisixAdminPluginsListGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get attributes of a plugin by plugin name.
     * @summary Get Plugin Attributes by Name
     * @param {string} pluginName The specified plugin name
     * @param {ApisixAdminPluginsPluginNameGetSubsystemEnum} [subsystem] Get attributes of the specified plugin name in HTTP or Stream subsystem.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginsPluginNameGet(
      pluginName: string,
      subsystem?: ApisixAdminPluginsPluginNameGetSubsystemEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminPluginsPluginNameGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginsPluginNameGet(
        pluginName,
        subsystem,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginApi.apisixAdminPluginsPluginNameGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Hot reload all plugins for changes to the plugin source files to take effect.
     * @summary Reload All Plugins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginsReloadPut(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginsReloadPut(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginApi.apisixAdminPluginsReloadPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PluginApi - factory interface
 * @export
 */
export const PluginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PluginApiFp(configuration);
  return {
    /**
     * Get all configured plugin attributes. This API is being [deprecated](https://apisix.apache.org/blog/2023/09/01/release-apache-apisix-3.5.0/#refactor-and-improve-the-plugin-interface-in-admin-api) soon.
     * @summary Get All Plugin Attributes
     * @param {PluginApiApisixAdminPluginsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginsGet(
      requestParameters: PluginApiApisixAdminPluginsGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminPluginsGet200Response> {
      return localVarFp
        .apisixAdminPluginsGet(requestParameters.all, requestParameters.subsystem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get all configured plugin names.
     * @summary Get All Plugin Names
     * @param {PluginApiApisixAdminPluginsListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginsListGet(
      requestParameters: PluginApiApisixAdminPluginsListGetRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .apisixAdminPluginsListGet(requestParameters.subsystem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get attributes of a plugin by plugin name.
     * @summary Get Plugin Attributes by Name
     * @param {PluginApiApisixAdminPluginsPluginNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginsPluginNameGet(
      requestParameters: PluginApiApisixAdminPluginsPluginNameGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminPluginsPluginNameGet200Response> {
      return localVarFp
        .apisixAdminPluginsPluginNameGet(requestParameters.pluginName, requestParameters.subsystem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Hot reload all plugins for changes to the plugin source files to take effect.
     * @summary Reload All Plugins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginsReloadPut(options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.apisixAdminPluginsReloadPut(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PluginApi - interface
 * @export
 * @interface PluginApi
 */
export interface PluginApiInterface {
  /**
   * Get all configured plugin attributes. This API is being [deprecated](https://apisix.apache.org/blog/2023/09/01/release-apache-apisix-3.5.0/#refactor-and-improve-the-plugin-interface-in-admin-api) soon.
   * @summary Get All Plugin Attributes
   * @param {string} all Get all plugin attributes.
   * @param {ApisixAdminPluginsGetSubsystemEnum} [subsystem] Get HTTP or Stream plugin attributes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginApiInterface
   */
  apisixAdminPluginsGet(
    all: string,
    subsystem?: ApisixAdminPluginsGetSubsystemEnum,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminPluginsGet200Response>;

  /**
   * Get all configured plugin names.
   * @summary Get All Plugin Names
   * @param {ApisixAdminPluginsListGetSubsystemEnum} [subsystem] Get HTTP or Stream plugin names.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginApiInterface
   */
  apisixAdminPluginsListGet(
    subsystem?: ApisixAdminPluginsListGetSubsystemEnum,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<Array<string>>;

  /**
   * Get attributes of a plugin by plugin name.
   * @summary Get Plugin Attributes by Name
   * @param {string} pluginName The specified plugin name
   * @param {ApisixAdminPluginsPluginNameGetSubsystemEnum} [subsystem] Get attributes of the specified plugin name in HTTP or Stream subsystem.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginApiInterface
   */
  apisixAdminPluginsPluginNameGet(
    pluginName: string,
    subsystem?: ApisixAdminPluginsPluginNameGetSubsystemEnum,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminPluginsPluginNameGet200Response>;

  /**
   * Hot reload all plugins for changes to the plugin source files to take effect.
   * @summary Reload All Plugins
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginApiInterface
   */
  apisixAdminPluginsReloadPut(options?: RawAxiosRequestConfig): AxiosPromise<string>;
}

/**
 * Request parameters for apisixAdminPluginsGet operation in PluginApi.
 * @export
 * @interface PluginApiApisixAdminPluginsGetRequest
 */
export interface PluginApiApisixAdminPluginsGetRequest {
  /**
   * Get all plugin attributes.
   * @type {string}
   * @memberof PluginApiApisixAdminPluginsGet
   */
  readonly all: string;

  /**
   * Get HTTP or Stream plugin attributes.
   * @type {'http' | 'stream'}
   * @memberof PluginApiApisixAdminPluginsGet
   */
  readonly subsystem?: ApisixAdminPluginsGetSubsystemEnum;
}

/**
 * Request parameters for apisixAdminPluginsListGet operation in PluginApi.
 * @export
 * @interface PluginApiApisixAdminPluginsListGetRequest
 */
export interface PluginApiApisixAdminPluginsListGetRequest {
  /**
   * Get HTTP or Stream plugin names.
   * @type {'http' | 'stream'}
   * @memberof PluginApiApisixAdminPluginsListGet
   */
  readonly subsystem?: ApisixAdminPluginsListGetSubsystemEnum;
}

/**
 * Request parameters for apisixAdminPluginsPluginNameGet operation in PluginApi.
 * @export
 * @interface PluginApiApisixAdminPluginsPluginNameGetRequest
 */
export interface PluginApiApisixAdminPluginsPluginNameGetRequest {
  /**
   * The specified plugin name
   * @type {string}
   * @memberof PluginApiApisixAdminPluginsPluginNameGet
   */
  readonly pluginName: string;

  /**
   * Get attributes of the specified plugin name in HTTP or Stream subsystem.
   * @type {'http' | 'stream'}
   * @memberof PluginApiApisixAdminPluginsPluginNameGet
   */
  readonly subsystem?: ApisixAdminPluginsPluginNameGetSubsystemEnum;
}

/**
 * PluginApi - object-oriented interface
 * @export
 * @class PluginApi
 * @extends {BaseAPI}
 */
export class PluginApi extends BaseAPI implements PluginApiInterface {
  /**
   * Get all configured plugin attributes. This API is being [deprecated](https://apisix.apache.org/blog/2023/09/01/release-apache-apisix-3.5.0/#refactor-and-improve-the-plugin-interface-in-admin-api) soon.
   * @summary Get All Plugin Attributes
   * @param {PluginApiApisixAdminPluginsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginApi
   */
  public apisixAdminPluginsGet(
    requestParameters: PluginApiApisixAdminPluginsGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PluginApiFp(this.configuration)
      .apisixAdminPluginsGet(requestParameters.all, requestParameters.subsystem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get all configured plugin names.
   * @summary Get All Plugin Names
   * @param {PluginApiApisixAdminPluginsListGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginApi
   */
  public apisixAdminPluginsListGet(
    requestParameters: PluginApiApisixAdminPluginsListGetRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return PluginApiFp(this.configuration)
      .apisixAdminPluginsListGet(requestParameters.subsystem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get attributes of a plugin by plugin name.
   * @summary Get Plugin Attributes by Name
   * @param {PluginApiApisixAdminPluginsPluginNameGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginApi
   */
  public apisixAdminPluginsPluginNameGet(
    requestParameters: PluginApiApisixAdminPluginsPluginNameGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PluginApiFp(this.configuration)
      .apisixAdminPluginsPluginNameGet(requestParameters.pluginName, requestParameters.subsystem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Hot reload all plugins for changes to the plugin source files to take effect.
   * @summary Reload All Plugins
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginApi
   */
  public apisixAdminPluginsReloadPut(options?: RawAxiosRequestConfig) {
    return PluginApiFp(this.configuration)
      .apisixAdminPluginsReloadPut(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ApisixAdminPluginsGetSubsystemEnum = {
  Http: 'http',
  Stream: 'stream',
} as const;
export type ApisixAdminPluginsGetSubsystemEnum =
  (typeof ApisixAdminPluginsGetSubsystemEnum)[keyof typeof ApisixAdminPluginsGetSubsystemEnum];
/**
 * @export
 */
export const ApisixAdminPluginsListGetSubsystemEnum = {
  Http: 'http',
  Stream: 'stream',
} as const;
export type ApisixAdminPluginsListGetSubsystemEnum =
  (typeof ApisixAdminPluginsListGetSubsystemEnum)[keyof typeof ApisixAdminPluginsListGetSubsystemEnum];
/**
 * @export
 */
export const ApisixAdminPluginsPluginNameGetSubsystemEnum = {
  Http: 'http',
  Stream: 'stream',
} as const;
export type ApisixAdminPluginsPluginNameGetSubsystemEnum =
  (typeof ApisixAdminPluginsPluginNameGetSubsystemEnum)[keyof typeof ApisixAdminPluginsPluginNameGetSubsystemEnum];

/**
 * PluginConfigApi - axios parameter creator
 * @export
 */
export const PluginConfigApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured plugin configs.
     * @summary Get All Plugin Configs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginConfigsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/plugin_configs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a plugin config by ID.
     * @summary Delete Plugin Config by ID
     * @param {string} id Specified plugin config ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginConfigsIdDelete: async (
      id: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminPluginConfigsIdDelete', 'id', id);
      const localVarPath = `/apisix/admin/plugin_configs/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a plugin config by ID.
     * @summary Get Plugin Config by ID
     * @param {string} id Specified plugin config ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginConfigsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminPluginConfigsIdGet', 'id', id);
      const localVarPath = `/apisix/admin/plugin_configs/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update a plugin config.
     * @summary Update Plugin Config
     * @param {string} id Specified plugin config ID.
     * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginConfigsIdPatch: async (
      id: string,
      apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminPluginConfigsIdPatch', 'id', id);
      const localVarPath = `/apisix/admin/plugin_configs/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminConsumerGroupsIdPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a plugin config with a custom ID.
     * @summary Create Plugin Config by ID
     * @param {number} id Specified plugin config ID.
     * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginConfigsIdPut: async (
      id: number,
      apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminPluginConfigsIdPut', 'id', id);
      const localVarPath = `/apisix/admin/plugin_configs/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminConsumerGroupsIdPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PluginConfigApi - functional programming interface
 * @export
 */
export const PluginConfigApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PluginConfigApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured plugin configs.
     * @summary Get All Plugin Configs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginConfigsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminConsumerGroupsGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginConfigsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginConfigApi.apisixAdminPluginConfigsGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a plugin config by ID.
     * @summary Delete Plugin Config by ID
     * @param {string} id Specified plugin config ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginConfigsIdDelete(
      id: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginConfigsIdDelete(id, force, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginConfigApi.apisixAdminPluginConfigsIdDelete']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a plugin config by ID.
     * @summary Get Plugin Config by ID
     * @param {string} id Specified plugin config ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginConfigsIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminConsumerGroupsGet200ResponseListInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginConfigsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginConfigApi.apisixAdminPluginConfigsIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update a plugin config.
     * @summary Update Plugin Config
     * @param {string} id Specified plugin config ID.
     * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginConfigsIdPatch(
      id: string,
      apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginConfigsIdPatch(
        id,
        apisixAdminConsumerGroupsIdPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginConfigApi.apisixAdminPluginConfigsIdPatch']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a plugin config with a custom ID.
     * @summary Create Plugin Config by ID
     * @param {number} id Specified plugin config ID.
     * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginConfigsIdPut(
      id: number,
      apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginConfigsIdPut(
        id,
        apisixAdminConsumerGroupsIdPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginConfigApi.apisixAdminPluginConfigsIdPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PluginConfigApi - factory interface
 * @export
 */
export const PluginConfigApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PluginConfigApiFp(configuration);
  return {
    /**
     * Get all configured plugin configs.
     * @summary Get All Plugin Configs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginConfigsGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminConsumerGroupsGet200Response> {
      return localVarFp.apisixAdminPluginConfigsGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Delete a plugin config by ID.
     * @summary Delete Plugin Config by ID
     * @param {PluginConfigApiApisixAdminPluginConfigsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginConfigsIdDelete(
      requestParameters: PluginConfigApiApisixAdminPluginConfigsIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminPluginConfigsIdDelete(requestParameters.id, requestParameters.force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a plugin config by ID.
     * @summary Get Plugin Config by ID
     * @param {PluginConfigApiApisixAdminPluginConfigsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginConfigsIdGet(
      requestParameters: PluginConfigApiApisixAdminPluginConfigsIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminConsumerGroupsGet200ResponseListInner> {
      return localVarFp
        .apisixAdminPluginConfigsIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update a plugin config.
     * @summary Update Plugin Config
     * @param {PluginConfigApiApisixAdminPluginConfigsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginConfigsIdPatch(
      requestParameters: PluginConfigApiApisixAdminPluginConfigsIdPatchRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response> {
      return localVarFp
        .apisixAdminPluginConfigsIdPatch(
          requestParameters.id,
          requestParameters.apisixAdminConsumerGroupsIdPutRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a plugin config with a custom ID.
     * @summary Create Plugin Config by ID
     * @param {PluginConfigApiApisixAdminPluginConfigsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginConfigsIdPut(
      requestParameters: PluginConfigApiApisixAdminPluginConfigsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response> {
      return localVarFp
        .apisixAdminPluginConfigsIdPut(
          requestParameters.id,
          requestParameters.apisixAdminConsumerGroupsIdPutRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PluginConfigApi - interface
 * @export
 * @interface PluginConfigApi
 */
export interface PluginConfigApiInterface {
  /**
   * Get all configured plugin configs.
   * @summary Get All Plugin Configs
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginConfigApiInterface
   */
  apisixAdminPluginConfigsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminConsumerGroupsGet200Response>;

  /**
   * Delete a plugin config by ID.
   * @summary Delete Plugin Config by ID
   * @param {string} id Specified plugin config ID.
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginConfigApiInterface
   */
  apisixAdminPluginConfigsIdDelete(
    id: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get a plugin config by ID.
   * @summary Get Plugin Config by ID
   * @param {string} id Specified plugin config ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginConfigApiInterface
   */
  apisixAdminPluginConfigsIdGet(
    id: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminConsumerGroupsGet200ResponseListInner>;

  /**
   * Update a plugin config.
   * @summary Update Plugin Config
   * @param {string} id Specified plugin config ID.
   * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginConfigApiInterface
   */
  apisixAdminPluginConfigsIdPatch(
    id: string,
    apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response>;

  /**
   * Create a plugin config with a custom ID.
   * @summary Create Plugin Config by ID
   * @param {number} id Specified plugin config ID.
   * @param {ApisixAdminConsumerGroupsIdPutRequest} [apisixAdminConsumerGroupsIdPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginConfigApiInterface
   */
  apisixAdminPluginConfigsIdPut(
    id: number,
    apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminConsumerGroupsIdPut201Response>;
}

/**
 * Request parameters for apisixAdminPluginConfigsIdDelete operation in PluginConfigApi.
 * @export
 * @interface PluginConfigApiApisixAdminPluginConfigsIdDeleteRequest
 */
export interface PluginConfigApiApisixAdminPluginConfigsIdDeleteRequest {
  /**
   * Specified plugin config ID.
   * @type {string}
   * @memberof PluginConfigApiApisixAdminPluginConfigsIdDelete
   */
  readonly id: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof PluginConfigApiApisixAdminPluginConfigsIdDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminPluginConfigsIdGet operation in PluginConfigApi.
 * @export
 * @interface PluginConfigApiApisixAdminPluginConfigsIdGetRequest
 */
export interface PluginConfigApiApisixAdminPluginConfigsIdGetRequest {
  /**
   * Specified plugin config ID.
   * @type {string}
   * @memberof PluginConfigApiApisixAdminPluginConfigsIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for apisixAdminPluginConfigsIdPatch operation in PluginConfigApi.
 * @export
 * @interface PluginConfigApiApisixAdminPluginConfigsIdPatchRequest
 */
export interface PluginConfigApiApisixAdminPluginConfigsIdPatchRequest {
  /**
   * Specified plugin config ID.
   * @type {string}
   * @memberof PluginConfigApiApisixAdminPluginConfigsIdPatch
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminConsumerGroupsIdPutRequest}
   * @memberof PluginConfigApiApisixAdminPluginConfigsIdPatch
   */
  readonly apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest;
}

/**
 * Request parameters for apisixAdminPluginConfigsIdPut operation in PluginConfigApi.
 * @export
 * @interface PluginConfigApiApisixAdminPluginConfigsIdPutRequest
 */
export interface PluginConfigApiApisixAdminPluginConfigsIdPutRequest {
  /**
   * Specified plugin config ID.
   * @type {number}
   * @memberof PluginConfigApiApisixAdminPluginConfigsIdPut
   */
  readonly id: number;

  /**
   *
   * @type {ApisixAdminConsumerGroupsIdPutRequest}
   * @memberof PluginConfigApiApisixAdminPluginConfigsIdPut
   */
  readonly apisixAdminConsumerGroupsIdPutRequest?: ApisixAdminConsumerGroupsIdPutRequest;
}

/**
 * PluginConfigApi - object-oriented interface
 * @export
 * @class PluginConfigApi
 * @extends {BaseAPI}
 */
export class PluginConfigApi extends BaseAPI implements PluginConfigApiInterface {
  /**
   * Get all configured plugin configs.
   * @summary Get All Plugin Configs
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginConfigApi
   */
  public apisixAdminPluginConfigsGet(options?: RawAxiosRequestConfig) {
    return PluginConfigApiFp(this.configuration)
      .apisixAdminPluginConfigsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a plugin config by ID.
   * @summary Delete Plugin Config by ID
   * @param {PluginConfigApiApisixAdminPluginConfigsIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginConfigApi
   */
  public apisixAdminPluginConfigsIdDelete(
    requestParameters: PluginConfigApiApisixAdminPluginConfigsIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PluginConfigApiFp(this.configuration)
      .apisixAdminPluginConfigsIdDelete(requestParameters.id, requestParameters.force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a plugin config by ID.
   * @summary Get Plugin Config by ID
   * @param {PluginConfigApiApisixAdminPluginConfigsIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginConfigApi
   */
  public apisixAdminPluginConfigsIdGet(
    requestParameters: PluginConfigApiApisixAdminPluginConfigsIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PluginConfigApiFp(this.configuration)
      .apisixAdminPluginConfigsIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update a plugin config.
   * @summary Update Plugin Config
   * @param {PluginConfigApiApisixAdminPluginConfigsIdPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginConfigApi
   */
  public apisixAdminPluginConfigsIdPatch(
    requestParameters: PluginConfigApiApisixAdminPluginConfigsIdPatchRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PluginConfigApiFp(this.configuration)
      .apisixAdminPluginConfigsIdPatch(
        requestParameters.id,
        requestParameters.apisixAdminConsumerGroupsIdPutRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a plugin config with a custom ID.
   * @summary Create Plugin Config by ID
   * @param {PluginConfigApiApisixAdminPluginConfigsIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginConfigApi
   */
  public apisixAdminPluginConfigsIdPut(
    requestParameters: PluginConfigApiApisixAdminPluginConfigsIdPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PluginConfigApiFp(this.configuration)
      .apisixAdminPluginConfigsIdPut(
        requestParameters.id,
        requestParameters.apisixAdminConsumerGroupsIdPutRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PluginMetadataApi - axios parameter creator
 * @export
 */
export const PluginMetadataApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all plugin metadata.
     * @summary Get All Plugin Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginMetadataGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/plugin_metadata`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a plugin metadata by plugin name.
     * @summary Delete Plugin Metadata by Name
     * @param {string} pluginName The specified plugin name
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginMetadataPluginNameDelete: async (
      pluginName: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'pluginName' is not null or undefined
      assertParamExists('apisixAdminPluginMetadataPluginNameDelete', 'pluginName', pluginName);
      const localVarPath = `/apisix/admin/plugin_metadata/{plugin_name}`.replace(
        `{${'plugin_name'}}`,
        encodeURIComponent(String(pluginName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get plugin metadata by plugin name.
     * @summary Get Plugin Metadata by Name
     * @param {string} pluginName The specified plugin name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginMetadataPluginNameGet: async (
      pluginName: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'pluginName' is not null or undefined
      assertParamExists('apisixAdminPluginMetadataPluginNameGet', 'pluginName', pluginName);
      const localVarPath = `/apisix/admin/plugin_metadata/{plugin_name}`.replace(
        `{${'plugin_name'}}`,
        encodeURIComponent(String(pluginName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a plugin metadata by plugin name.
     * @summary Create Plugin Metadata by Name
     * @param {string} pluginName The specified plugin name
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginMetadataPluginNamePut: async (
      pluginName: string,
      body?: object,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'pluginName' is not null or undefined
      assertParamExists('apisixAdminPluginMetadataPluginNamePut', 'pluginName', pluginName);
      const localVarPath = `/apisix/admin/plugin_metadata/{plugin_name}`.replace(
        `{${'plugin_name'}}`,
        encodeURIComponent(String(pluginName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PluginMetadataApi - functional programming interface
 * @export
 */
export const PluginMetadataApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PluginMetadataApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all plugin metadata.
     * @summary Get All Plugin Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginMetadataGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminPluginMetadataGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginMetadataGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginMetadataApi.apisixAdminPluginMetadataGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a plugin metadata by plugin name.
     * @summary Delete Plugin Metadata by Name
     * @param {string} pluginName The specified plugin name
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginMetadataPluginNameDelete(
      pluginName: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginMetadataPluginNameDelete(
        pluginName,
        force,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginMetadataApi.apisixAdminPluginMetadataPluginNameDelete']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get plugin metadata by plugin name.
     * @summary Get Plugin Metadata by Name
     * @param {string} pluginName The specified plugin name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginMetadataPluginNameGet(
      pluginName: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminPluginMetadataGet200ResponseListInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginMetadataPluginNameGet(
        pluginName,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginMetadataApi.apisixAdminPluginMetadataPluginNameGet']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a plugin metadata by plugin name.
     * @summary Create Plugin Metadata by Name
     * @param {string} pluginName The specified plugin name
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminPluginMetadataPluginNamePut(
      pluginName: string,
      body?: object,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminPluginMetadataPluginNamePut201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminPluginMetadataPluginNamePut(
        pluginName,
        body,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PluginMetadataApi.apisixAdminPluginMetadataPluginNamePut']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PluginMetadataApi - factory interface
 * @export
 */
export const PluginMetadataApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PluginMetadataApiFp(configuration);
  return {
    /**
     * Get all plugin metadata.
     * @summary Get All Plugin Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginMetadataGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminPluginMetadataGet200Response> {
      return localVarFp.apisixAdminPluginMetadataGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Delete a plugin metadata by plugin name.
     * @summary Delete Plugin Metadata by Name
     * @param {PluginMetadataApiApisixAdminPluginMetadataPluginNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginMetadataPluginNameDelete(
      requestParameters: PluginMetadataApiApisixAdminPluginMetadataPluginNameDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminPluginMetadataPluginNameDelete(requestParameters.pluginName, requestParameters.force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get plugin metadata by plugin name.
     * @summary Get Plugin Metadata by Name
     * @param {PluginMetadataApiApisixAdminPluginMetadataPluginNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginMetadataPluginNameGet(
      requestParameters: PluginMetadataApiApisixAdminPluginMetadataPluginNameGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminPluginMetadataGet200ResponseListInner> {
      return localVarFp
        .apisixAdminPluginMetadataPluginNameGet(requestParameters.pluginName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a plugin metadata by plugin name.
     * @summary Create Plugin Metadata by Name
     * @param {PluginMetadataApiApisixAdminPluginMetadataPluginNamePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminPluginMetadataPluginNamePut(
      requestParameters: PluginMetadataApiApisixAdminPluginMetadataPluginNamePutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminPluginMetadataPluginNamePut201Response> {
      return localVarFp
        .apisixAdminPluginMetadataPluginNamePut(requestParameters.pluginName, requestParameters.body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PluginMetadataApi - interface
 * @export
 * @interface PluginMetadataApi
 */
export interface PluginMetadataApiInterface {
  /**
   * Get all plugin metadata.
   * @summary Get All Plugin Metadata
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApiInterface
   */
  apisixAdminPluginMetadataGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminPluginMetadataGet200Response>;

  /**
   * Delete a plugin metadata by plugin name.
   * @summary Delete Plugin Metadata by Name
   * @param {string} pluginName The specified plugin name
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApiInterface
   */
  apisixAdminPluginMetadataPluginNameDelete(
    pluginName: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get plugin metadata by plugin name.
   * @summary Get Plugin Metadata by Name
   * @param {string} pluginName The specified plugin name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApiInterface
   */
  apisixAdminPluginMetadataPluginNameGet(
    pluginName: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminPluginMetadataGet200ResponseListInner>;

  /**
   * Create a plugin metadata by plugin name.
   * @summary Create Plugin Metadata by Name
   * @param {string} pluginName The specified plugin name
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApiInterface
   */
  apisixAdminPluginMetadataPluginNamePut(
    pluginName: string,
    body?: object,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminPluginMetadataPluginNamePut201Response>;
}

/**
 * Request parameters for apisixAdminPluginMetadataPluginNameDelete operation in PluginMetadataApi.
 * @export
 * @interface PluginMetadataApiApisixAdminPluginMetadataPluginNameDeleteRequest
 */
export interface PluginMetadataApiApisixAdminPluginMetadataPluginNameDeleteRequest {
  /**
   * The specified plugin name
   * @type {string}
   * @memberof PluginMetadataApiApisixAdminPluginMetadataPluginNameDelete
   */
  readonly pluginName: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof PluginMetadataApiApisixAdminPluginMetadataPluginNameDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminPluginMetadataPluginNameGet operation in PluginMetadataApi.
 * @export
 * @interface PluginMetadataApiApisixAdminPluginMetadataPluginNameGetRequest
 */
export interface PluginMetadataApiApisixAdminPluginMetadataPluginNameGetRequest {
  /**
   * The specified plugin name
   * @type {string}
   * @memberof PluginMetadataApiApisixAdminPluginMetadataPluginNameGet
   */
  readonly pluginName: string;
}

/**
 * Request parameters for apisixAdminPluginMetadataPluginNamePut operation in PluginMetadataApi.
 * @export
 * @interface PluginMetadataApiApisixAdminPluginMetadataPluginNamePutRequest
 */
export interface PluginMetadataApiApisixAdminPluginMetadataPluginNamePutRequest {
  /**
   * The specified plugin name
   * @type {string}
   * @memberof PluginMetadataApiApisixAdminPluginMetadataPluginNamePut
   */
  readonly pluginName: string;

  /**
   *
   * @type {object}
   * @memberof PluginMetadataApiApisixAdminPluginMetadataPluginNamePut
   */
  readonly body?: object;
}

/**
 * PluginMetadataApi - object-oriented interface
 * @export
 * @class PluginMetadataApi
 * @extends {BaseAPI}
 */
export class PluginMetadataApi extends BaseAPI implements PluginMetadataApiInterface {
  /**
   * Get all plugin metadata.
   * @summary Get All Plugin Metadata
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApi
   */
  public apisixAdminPluginMetadataGet(options?: RawAxiosRequestConfig) {
    return PluginMetadataApiFp(this.configuration)
      .apisixAdminPluginMetadataGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a plugin metadata by plugin name.
   * @summary Delete Plugin Metadata by Name
   * @param {PluginMetadataApiApisixAdminPluginMetadataPluginNameDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApi
   */
  public apisixAdminPluginMetadataPluginNameDelete(
    requestParameters: PluginMetadataApiApisixAdminPluginMetadataPluginNameDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PluginMetadataApiFp(this.configuration)
      .apisixAdminPluginMetadataPluginNameDelete(requestParameters.pluginName, requestParameters.force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get plugin metadata by plugin name.
   * @summary Get Plugin Metadata by Name
   * @param {PluginMetadataApiApisixAdminPluginMetadataPluginNameGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApi
   */
  public apisixAdminPluginMetadataPluginNameGet(
    requestParameters: PluginMetadataApiApisixAdminPluginMetadataPluginNameGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PluginMetadataApiFp(this.configuration)
      .apisixAdminPluginMetadataPluginNameGet(requestParameters.pluginName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a plugin metadata by plugin name.
   * @summary Create Plugin Metadata by Name
   * @param {PluginMetadataApiApisixAdminPluginMetadataPluginNamePutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginMetadataApi
   */
  public apisixAdminPluginMetadataPluginNamePut(
    requestParameters: PluginMetadataApiApisixAdminPluginMetadataPluginNamePutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PluginMetadataApiFp(this.configuration)
      .apisixAdminPluginMetadataPluginNamePut(requestParameters.pluginName, requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ProtoApi - axios parameter creator
 * @export
 */
export const ProtoApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured protos.
     * @summary Get All Protos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminProtosGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/protos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a proto by ID.
     * @summary Delete Proto by ID
     * @param {string} id Specified proto ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminProtosIdDelete: async (
      id: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminProtosIdDelete', 'id', id);
      const localVarPath = `/apisix/admin/protos/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a proto configuration by ID.
     * @summary Get Proto by ID
     * @param {string} id Specified proto ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminProtosIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminProtosIdGet', 'id', id);
      const localVarPath = `/apisix/admin/protos/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a proto with a custom ID.
     * @summary Create Proto by ID
     * @param {string} id Specified proto ID.
     * @param {ApisixAdminProtosIdPutRequest} [apisixAdminProtosIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminProtosIdPut: async (
      id: string,
      apisixAdminProtosIdPutRequest?: ApisixAdminProtosIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminProtosIdPut', 'id', id);
      const localVarPath = `/apisix/admin/protos/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminProtosIdPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a proto with an ID generated.
     * @summary Create Proto
     * @param {ApisixAdminProtosIdPutRequest} [apisixAdminProtosIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminProtosPost: async (
      apisixAdminProtosIdPutRequest?: ApisixAdminProtosIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/protos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminProtosIdPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProtoApi - functional programming interface
 * @export
 */
export const ProtoApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProtoApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured protos.
     * @summary Get All Protos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminProtosGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminProtosGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminProtosGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProtoApi.apisixAdminProtosGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a proto by ID.
     * @summary Delete Proto by ID
     * @param {string} id Specified proto ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminProtosIdDelete(
      id: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminProtosIdDelete(id, force, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProtoApi.apisixAdminProtosIdDelete']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a proto configuration by ID.
     * @summary Get Proto by ID
     * @param {string} id Specified proto ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminProtosIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminProtosIdGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminProtosIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProtoApi.apisixAdminProtosIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a proto with a custom ID.
     * @summary Create Proto by ID
     * @param {string} id Specified proto ID.
     * @param {ApisixAdminProtosIdPutRequest} [apisixAdminProtosIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminProtosIdPut(
      id: string,
      apisixAdminProtosIdPutRequest?: ApisixAdminProtosIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminProtosIdPut201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminProtosIdPut(
        id,
        apisixAdminProtosIdPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProtoApi.apisixAdminProtosIdPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a proto with an ID generated.
     * @summary Create Proto
     * @param {ApisixAdminProtosIdPutRequest} [apisixAdminProtosIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminProtosPost(
      apisixAdminProtosIdPutRequest?: ApisixAdminProtosIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminProtosIdPut201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminProtosPost(
        apisixAdminProtosIdPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ProtoApi.apisixAdminProtosPost']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ProtoApi - factory interface
 * @export
 */
export const ProtoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ProtoApiFp(configuration);
  return {
    /**
     * Get all configured protos.
     * @summary Get All Protos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminProtosGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminProtosGet200Response> {
      return localVarFp.apisixAdminProtosGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Delete a proto by ID.
     * @summary Delete Proto by ID
     * @param {ProtoApiApisixAdminProtosIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminProtosIdDelete(
      requestParameters: ProtoApiApisixAdminProtosIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminProtosIdDelete(requestParameters.id, requestParameters.force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a proto configuration by ID.
     * @summary Get Proto by ID
     * @param {ProtoApiApisixAdminProtosIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminProtosIdGet(
      requestParameters: ProtoApiApisixAdminProtosIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminProtosIdGet200Response> {
      return localVarFp
        .apisixAdminProtosIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a proto with a custom ID.
     * @summary Create Proto by ID
     * @param {ProtoApiApisixAdminProtosIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminProtosIdPut(
      requestParameters: ProtoApiApisixAdminProtosIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminProtosIdPut201Response> {
      return localVarFp
        .apisixAdminProtosIdPut(requestParameters.id, requestParameters.apisixAdminProtosIdPutRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a proto with an ID generated.
     * @summary Create Proto
     * @param {ProtoApiApisixAdminProtosPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminProtosPost(
      requestParameters: ProtoApiApisixAdminProtosPostRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminProtosIdPut201Response> {
      return localVarFp
        .apisixAdminProtosPost(requestParameters.apisixAdminProtosIdPutRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProtoApi - interface
 * @export
 * @interface ProtoApi
 */
export interface ProtoApiInterface {
  /**
   * Get all configured protos.
   * @summary Get All Protos
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtoApiInterface
   */
  apisixAdminProtosGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminProtosGet200Response>;

  /**
   * Delete a proto by ID.
   * @summary Delete Proto by ID
   * @param {string} id Specified proto ID.
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtoApiInterface
   */
  apisixAdminProtosIdDelete(
    id: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get a proto configuration by ID.
   * @summary Get Proto by ID
   * @param {string} id Specified proto ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtoApiInterface
   */
  apisixAdminProtosIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminProtosIdGet200Response>;

  /**
   * Create a proto with a custom ID.
   * @summary Create Proto by ID
   * @param {string} id Specified proto ID.
   * @param {ApisixAdminProtosIdPutRequest} [apisixAdminProtosIdPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtoApiInterface
   */
  apisixAdminProtosIdPut(
    id: string,
    apisixAdminProtosIdPutRequest?: ApisixAdminProtosIdPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminProtosIdPut201Response>;

  /**
   * Create a proto with an ID generated.
   * @summary Create Proto
   * @param {ApisixAdminProtosIdPutRequest} [apisixAdminProtosIdPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtoApiInterface
   */
  apisixAdminProtosPost(
    apisixAdminProtosIdPutRequest?: ApisixAdminProtosIdPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminProtosIdPut201Response>;
}

/**
 * Request parameters for apisixAdminProtosIdDelete operation in ProtoApi.
 * @export
 * @interface ProtoApiApisixAdminProtosIdDeleteRequest
 */
export interface ProtoApiApisixAdminProtosIdDeleteRequest {
  /**
   * Specified proto ID.
   * @type {string}
   * @memberof ProtoApiApisixAdminProtosIdDelete
   */
  readonly id: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof ProtoApiApisixAdminProtosIdDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminProtosIdGet operation in ProtoApi.
 * @export
 * @interface ProtoApiApisixAdminProtosIdGetRequest
 */
export interface ProtoApiApisixAdminProtosIdGetRequest {
  /**
   * Specified proto ID.
   * @type {string}
   * @memberof ProtoApiApisixAdminProtosIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for apisixAdminProtosIdPut operation in ProtoApi.
 * @export
 * @interface ProtoApiApisixAdminProtosIdPutRequest
 */
export interface ProtoApiApisixAdminProtosIdPutRequest {
  /**
   * Specified proto ID.
   * @type {string}
   * @memberof ProtoApiApisixAdminProtosIdPut
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminProtosIdPutRequest}
   * @memberof ProtoApiApisixAdminProtosIdPut
   */
  readonly apisixAdminProtosIdPutRequest?: ApisixAdminProtosIdPutRequest;
}

/**
 * Request parameters for apisixAdminProtosPost operation in ProtoApi.
 * @export
 * @interface ProtoApiApisixAdminProtosPostRequest
 */
export interface ProtoApiApisixAdminProtosPostRequest {
  /**
   *
   * @type {ApisixAdminProtosIdPutRequest}
   * @memberof ProtoApiApisixAdminProtosPost
   */
  readonly apisixAdminProtosIdPutRequest?: ApisixAdminProtosIdPutRequest;
}

/**
 * ProtoApi - object-oriented interface
 * @export
 * @class ProtoApi
 * @extends {BaseAPI}
 */
export class ProtoApi extends BaseAPI implements ProtoApiInterface {
  /**
   * Get all configured protos.
   * @summary Get All Protos
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtoApi
   */
  public apisixAdminProtosGet(options?: RawAxiosRequestConfig) {
    return ProtoApiFp(this.configuration)
      .apisixAdminProtosGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a proto by ID.
   * @summary Delete Proto by ID
   * @param {ProtoApiApisixAdminProtosIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtoApi
   */
  public apisixAdminProtosIdDelete(
    requestParameters: ProtoApiApisixAdminProtosIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ProtoApiFp(this.configuration)
      .apisixAdminProtosIdDelete(requestParameters.id, requestParameters.force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a proto configuration by ID.
   * @summary Get Proto by ID
   * @param {ProtoApiApisixAdminProtosIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtoApi
   */
  public apisixAdminProtosIdGet(
    requestParameters: ProtoApiApisixAdminProtosIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ProtoApiFp(this.configuration)
      .apisixAdminProtosIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a proto with a custom ID.
   * @summary Create Proto by ID
   * @param {ProtoApiApisixAdminProtosIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtoApi
   */
  public apisixAdminProtosIdPut(
    requestParameters: ProtoApiApisixAdminProtosIdPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ProtoApiFp(this.configuration)
      .apisixAdminProtosIdPut(requestParameters.id, requestParameters.apisixAdminProtosIdPutRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a proto with an ID generated.
   * @summary Create Proto
   * @param {ProtoApiApisixAdminProtosPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtoApi
   */
  public apisixAdminProtosPost(
    requestParameters: ProtoApiApisixAdminProtosPostRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return ProtoApiFp(this.configuration)
      .apisixAdminProtosPost(requestParameters.apisixAdminProtosIdPutRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RouteApi - axios parameter creator
 * @export
 */
export const RouteApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured routes.
     * @summary Get All Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/routes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a route by ID.
     * @summary Delete Route by ID
     * @param {string} id The route id
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesIdDelete: async (
      id: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminRoutesIdDelete', 'id', id);
      const localVarPath = `/apisix/admin/routes/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a route by ID.
     * @summary Get Route by ID
     * @param {string} id The route id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminRoutesIdGet', 'id', id);
      const localVarPath = `/apisix/admin/routes/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update a route.
     * @summary Update Route
     * @param {string} id The target route id
     * @param {ApisixAdminRoutesPostRequest | null} [apisixAdminRoutesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesIdPatch: async (
      id: string,
      apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminRoutesIdPatch', 'id', id);
      const localVarPath = `/apisix/admin/routes/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminRoutesPostRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a route with a custom ID.
     * @summary Create Route by ID
     * @param {string} id The route id
     * @param {ApisixAdminRoutesPostRequest | null} [apisixAdminRoutesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesIdPut: async (
      id: string,
      apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminRoutesIdPut', 'id', id);
      const localVarPath = `/apisix/admin/routes/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminRoutesPostRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a route with an ID generated.
     * @summary Create Route
     * @param {ApisixAdminRoutesPostRequest | null} [apisixAdminRoutesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesPost: async (
      apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/routes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminRoutesPostRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RouteApi - functional programming interface
 * @export
 */
export const RouteApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RouteApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured routes.
     * @summary Get All Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminRoutesGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminRoutesGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RouteApi.apisixAdminRoutesGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a route by ID.
     * @summary Delete Route by ID
     * @param {string} id The route id
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminRoutesIdDelete(
      id: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminRoutesIdDelete(id, force, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RouteApi.apisixAdminRoutesIdDelete']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a route by ID.
     * @summary Get Route by ID
     * @param {string} id The route id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminRoutesIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminRoutesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RouteApi.apisixAdminRoutesIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update a route.
     * @summary Update Route
     * @param {string} id The target route id
     * @param {ApisixAdminRoutesPostRequest | null} [apisixAdminRoutesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminRoutesIdPatch(
      id: string,
      apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminRoutesIdPatch(
        id,
        apisixAdminRoutesPostRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RouteApi.apisixAdminRoutesIdPatch']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a route with a custom ID.
     * @summary Create Route by ID
     * @param {string} id The route id
     * @param {ApisixAdminRoutesPostRequest | null} [apisixAdminRoutesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminRoutesIdPut(
      id: string,
      apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminRoutesIdPut(
        id,
        apisixAdminRoutesPostRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RouteApi.apisixAdminRoutesIdPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a route with an ID generated.
     * @summary Create Route
     * @param {ApisixAdminRoutesPostRequest | null} [apisixAdminRoutesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminRoutesPost(
      apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminRoutesPost(
        apisixAdminRoutesPostRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RouteApi.apisixAdminRoutesPost']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * RouteApi - factory interface
 * @export
 */
export const RouteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = RouteApiFp(configuration);
  return {
    /**
     * Get all configured routes.
     * @summary Get All Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminRoutesGet200Response> {
      return localVarFp.apisixAdminRoutesGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Delete a route by ID.
     * @summary Delete Route by ID
     * @param {RouteApiApisixAdminRoutesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesIdDelete(
      requestParameters: RouteApiApisixAdminRoutesIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminRoutesIdDelete(requestParameters.id, requestParameters.force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a route by ID.
     * @summary Get Route by ID
     * @param {RouteApiApisixAdminRoutesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesIdGet(
      requestParameters: RouteApiApisixAdminRoutesIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdGet200Response> {
      return localVarFp
        .apisixAdminRoutesIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update a route.
     * @summary Update Route
     * @param {RouteApiApisixAdminRoutesIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesIdPatch(
      requestParameters: RouteApiApisixAdminRoutesIdPatchRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesPost201Response> {
      return localVarFp
        .apisixAdminRoutesIdPatch(requestParameters.id, requestParameters.apisixAdminRoutesPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a route with a custom ID.
     * @summary Create Route by ID
     * @param {RouteApiApisixAdminRoutesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesIdPut(
      requestParameters: RouteApiApisixAdminRoutesIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesPost201Response> {
      return localVarFp
        .apisixAdminRoutesIdPut(requestParameters.id, requestParameters.apisixAdminRoutesPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a route with an ID generated.
     * @summary Create Route
     * @param {RouteApiApisixAdminRoutesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminRoutesPost(
      requestParameters: RouteApiApisixAdminRoutesPostRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesPost201Response> {
      return localVarFp
        .apisixAdminRoutesPost(requestParameters.apisixAdminRoutesPostRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RouteApi - interface
 * @export
 * @interface RouteApi
 */
export interface RouteApiInterface {
  /**
   * Get all configured routes.
   * @summary Get All Routes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApiInterface
   */
  apisixAdminRoutesGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminRoutesGet200Response>;

  /**
   * Delete a route by ID.
   * @summary Delete Route by ID
   * @param {string} id The route id
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApiInterface
   */
  apisixAdminRoutesIdDelete(
    id: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get a route by ID.
   * @summary Get Route by ID
   * @param {string} id The route id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApiInterface
   */
  apisixAdminRoutesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminRoutesIdGet200Response>;

  /**
   * Update a route.
   * @summary Update Route
   * @param {string} id The target route id
   * @param {ApisixAdminRoutesPostRequest | null} [apisixAdminRoutesPostRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApiInterface
   */
  apisixAdminRoutesIdPatch(
    id: string,
    apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesPost201Response>;

  /**
   * Create a route with a custom ID.
   * @summary Create Route by ID
   * @param {string} id The route id
   * @param {ApisixAdminRoutesPostRequest | null} [apisixAdminRoutesPostRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApiInterface
   */
  apisixAdminRoutesIdPut(
    id: string,
    apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesPost201Response>;

  /**
   * Create a route with an ID generated.
   * @summary Create Route
   * @param {ApisixAdminRoutesPostRequest | null} [apisixAdminRoutesPostRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApiInterface
   */
  apisixAdminRoutesPost(
    apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesPost201Response>;
}

/**
 * Request parameters for apisixAdminRoutesIdDelete operation in RouteApi.
 * @export
 * @interface RouteApiApisixAdminRoutesIdDeleteRequest
 */
export interface RouteApiApisixAdminRoutesIdDeleteRequest {
  /**
   * The route id
   * @type {string}
   * @memberof RouteApiApisixAdminRoutesIdDelete
   */
  readonly id: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof RouteApiApisixAdminRoutesIdDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminRoutesIdGet operation in RouteApi.
 * @export
 * @interface RouteApiApisixAdminRoutesIdGetRequest
 */
export interface RouteApiApisixAdminRoutesIdGetRequest {
  /**
   * The route id
   * @type {string}
   * @memberof RouteApiApisixAdminRoutesIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for apisixAdminRoutesIdPatch operation in RouteApi.
 * @export
 * @interface RouteApiApisixAdminRoutesIdPatchRequest
 */
export interface RouteApiApisixAdminRoutesIdPatchRequest {
  /**
   * The target route id
   * @type {string}
   * @memberof RouteApiApisixAdminRoutesIdPatch
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminRoutesPostRequest}
   * @memberof RouteApiApisixAdminRoutesIdPatch
   */
  readonly apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null;
}

/**
 * Request parameters for apisixAdminRoutesIdPut operation in RouteApi.
 * @export
 * @interface RouteApiApisixAdminRoutesIdPutRequest
 */
export interface RouteApiApisixAdminRoutesIdPutRequest {
  /**
   * The route id
   * @type {string}
   * @memberof RouteApiApisixAdminRoutesIdPut
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminRoutesPostRequest}
   * @memberof RouteApiApisixAdminRoutesIdPut
   */
  readonly apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null;
}

/**
 * Request parameters for apisixAdminRoutesPost operation in RouteApi.
 * @export
 * @interface RouteApiApisixAdminRoutesPostRequest
 */
export interface RouteApiApisixAdminRoutesPostRequest {
  /**
   *
   * @type {ApisixAdminRoutesPostRequest}
   * @memberof RouteApiApisixAdminRoutesPost
   */
  readonly apisixAdminRoutesPostRequest?: ApisixAdminRoutesPostRequest | null;
}

/**
 * RouteApi - object-oriented interface
 * @export
 * @class RouteApi
 * @extends {BaseAPI}
 */
export class RouteApi extends BaseAPI implements RouteApiInterface {
  /**
   * Get all configured routes.
   * @summary Get All Routes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApi
   */
  public apisixAdminRoutesGet(options?: RawAxiosRequestConfig) {
    return RouteApiFp(this.configuration)
      .apisixAdminRoutesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a route by ID.
   * @summary Delete Route by ID
   * @param {RouteApiApisixAdminRoutesIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApi
   */
  public apisixAdminRoutesIdDelete(
    requestParameters: RouteApiApisixAdminRoutesIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return RouteApiFp(this.configuration)
      .apisixAdminRoutesIdDelete(requestParameters.id, requestParameters.force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a route by ID.
   * @summary Get Route by ID
   * @param {RouteApiApisixAdminRoutesIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApi
   */
  public apisixAdminRoutesIdGet(
    requestParameters: RouteApiApisixAdminRoutesIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return RouteApiFp(this.configuration)
      .apisixAdminRoutesIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update a route.
   * @summary Update Route
   * @param {RouteApiApisixAdminRoutesIdPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApi
   */
  public apisixAdminRoutesIdPatch(
    requestParameters: RouteApiApisixAdminRoutesIdPatchRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return RouteApiFp(this.configuration)
      .apisixAdminRoutesIdPatch(requestParameters.id, requestParameters.apisixAdminRoutesPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a route with a custom ID.
   * @summary Create Route by ID
   * @param {RouteApiApisixAdminRoutesIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApi
   */
  public apisixAdminRoutesIdPut(
    requestParameters: RouteApiApisixAdminRoutesIdPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return RouteApiFp(this.configuration)
      .apisixAdminRoutesIdPut(requestParameters.id, requestParameters.apisixAdminRoutesPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a route with an ID generated.
   * @summary Create Route
   * @param {RouteApiApisixAdminRoutesPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RouteApi
   */
  public apisixAdminRoutesPost(
    requestParameters: RouteApiApisixAdminRoutesPostRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return RouteApiFp(this.configuration)
      .apisixAdminRoutesPost(requestParameters.apisixAdminRoutesPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SSLApi - axios parameter creator
 * @export
 */
export const SSLApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured SSL.
     * @summary Get All SSL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSslsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/ssls`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete an SSL by ID.
     * @summary Delete SSL by ID
     * @param {string} id Specified SSL ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSslsIdDelete: async (
      id: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminSslsIdDelete', 'id', id);
      const localVarPath = `/apisix/admin/ssls/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get an SSL by ID.
     * @summary Get SSL by ID
     * @param {string} id Specified SSL ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSslsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminSslsIdGet', 'id', id);
      const localVarPath = `/apisix/admin/ssls/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create an SSL with a custom ID.
     * @summary Create an SSL by ID
     * @param {string} id Specified SSL ID.
     * @param {ApisixAdminSslsIdPutRequest} [apisixAdminSslsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSslsIdPut: async (
      id: string,
      apisixAdminSslsIdPutRequest?: ApisixAdminSslsIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminSslsIdPut', 'id', id);
      const localVarPath = `/apisix/admin/ssls/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminSslsIdPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create an SSL with an ID generated.
     * @summary Create SSL
     * @param {ApisixAdminSslsPostRequest} [apisixAdminSslsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSslsPost: async (
      apisixAdminSslsPostRequest?: ApisixAdminSslsPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/ssls`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminSslsPostRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SSLApi - functional programming interface
 * @export
 */
export const SSLApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SSLApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured SSL.
     * @summary Get All SSL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminSslsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminSslsGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminSslsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SSLApi.apisixAdminSslsGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete an SSL by ID.
     * @summary Delete SSL by ID
     * @param {string} id Specified SSL ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminSslsIdDelete(
      id: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminSslsIdDelete(id, force, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SSLApi.apisixAdminSslsIdDelete']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get an SSL by ID.
     * @summary Get SSL by ID
     * @param {string} id Specified SSL ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminSslsIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminSslsGet200ResponseListInner>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminSslsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SSLApi.apisixAdminSslsIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create an SSL with a custom ID.
     * @summary Create an SSL by ID
     * @param {string} id Specified SSL ID.
     * @param {ApisixAdminSslsIdPutRequest} [apisixAdminSslsIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminSslsIdPut(
      id: string,
      apisixAdminSslsIdPutRequest?: ApisixAdminSslsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminSslsPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminSslsIdPut(
        id,
        apisixAdminSslsIdPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SSLApi.apisixAdminSslsIdPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create an SSL with an ID generated.
     * @summary Create SSL
     * @param {ApisixAdminSslsPostRequest} [apisixAdminSslsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminSslsPost(
      apisixAdminSslsPostRequest?: ApisixAdminSslsPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminSslsPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminSslsPost(
        apisixAdminSslsPostRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SSLApi.apisixAdminSslsPost']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SSLApi - factory interface
 * @export
 */
export const SSLApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = SSLApiFp(configuration);
  return {
    /**
     * Get all configured SSL.
     * @summary Get All SSL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSslsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminSslsGet200Response> {
      return localVarFp.apisixAdminSslsGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Delete an SSL by ID.
     * @summary Delete SSL by ID
     * @param {SSLApiApisixAdminSslsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSslsIdDelete(
      requestParameters: SSLApiApisixAdminSslsIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminSslsIdDelete(requestParameters.id, requestParameters.force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get an SSL by ID.
     * @summary Get SSL by ID
     * @param {SSLApiApisixAdminSslsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSslsIdGet(
      requestParameters: SSLApiApisixAdminSslsIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminSslsGet200ResponseListInner> {
      return localVarFp.apisixAdminSslsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
    },
    /**
     * Create an SSL with a custom ID.
     * @summary Create an SSL by ID
     * @param {SSLApiApisixAdminSslsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSslsIdPut(
      requestParameters: SSLApiApisixAdminSslsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminSslsPost201Response> {
      return localVarFp
        .apisixAdminSslsIdPut(requestParameters.id, requestParameters.apisixAdminSslsIdPutRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create an SSL with an ID generated.
     * @summary Create SSL
     * @param {SSLApiApisixAdminSslsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSslsPost(
      requestParameters: SSLApiApisixAdminSslsPostRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminSslsPost201Response> {
      return localVarFp
        .apisixAdminSslsPost(requestParameters.apisixAdminSslsPostRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SSLApi - interface
 * @export
 * @interface SSLApi
 */
export interface SSLApiInterface {
  /**
   * Get all configured SSL.
   * @summary Get All SSL
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSLApiInterface
   */
  apisixAdminSslsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminSslsGet200Response>;

  /**
   * Delete an SSL by ID.
   * @summary Delete SSL by ID
   * @param {string} id Specified SSL ID.
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSLApiInterface
   */
  apisixAdminSslsIdDelete(
    id: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get an SSL by ID.
   * @summary Get SSL by ID
   * @param {string} id Specified SSL ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSLApiInterface
   */
  apisixAdminSslsIdGet(
    id: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminSslsGet200ResponseListInner>;

  /**
   * Create an SSL with a custom ID.
   * @summary Create an SSL by ID
   * @param {string} id Specified SSL ID.
   * @param {ApisixAdminSslsIdPutRequest} [apisixAdminSslsIdPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSLApiInterface
   */
  apisixAdminSslsIdPut(
    id: string,
    apisixAdminSslsIdPutRequest?: ApisixAdminSslsIdPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminSslsPost201Response>;

  /**
   * Create an SSL with an ID generated.
   * @summary Create SSL
   * @param {ApisixAdminSslsPostRequest} [apisixAdminSslsPostRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSLApiInterface
   */
  apisixAdminSslsPost(
    apisixAdminSslsPostRequest?: ApisixAdminSslsPostRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminSslsPost201Response>;
}

/**
 * Request parameters for apisixAdminSslsIdDelete operation in SSLApi.
 * @export
 * @interface SSLApiApisixAdminSslsIdDeleteRequest
 */
export interface SSLApiApisixAdminSslsIdDeleteRequest {
  /**
   * Specified SSL ID.
   * @type {string}
   * @memberof SSLApiApisixAdminSslsIdDelete
   */
  readonly id: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof SSLApiApisixAdminSslsIdDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminSslsIdGet operation in SSLApi.
 * @export
 * @interface SSLApiApisixAdminSslsIdGetRequest
 */
export interface SSLApiApisixAdminSslsIdGetRequest {
  /**
   * Specified SSL ID.
   * @type {string}
   * @memberof SSLApiApisixAdminSslsIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for apisixAdminSslsIdPut operation in SSLApi.
 * @export
 * @interface SSLApiApisixAdminSslsIdPutRequest
 */
export interface SSLApiApisixAdminSslsIdPutRequest {
  /**
   * Specified SSL ID.
   * @type {string}
   * @memberof SSLApiApisixAdminSslsIdPut
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminSslsIdPutRequest}
   * @memberof SSLApiApisixAdminSslsIdPut
   */
  readonly apisixAdminSslsIdPutRequest?: ApisixAdminSslsIdPutRequest;
}

/**
 * Request parameters for apisixAdminSslsPost operation in SSLApi.
 * @export
 * @interface SSLApiApisixAdminSslsPostRequest
 */
export interface SSLApiApisixAdminSslsPostRequest {
  /**
   *
   * @type {ApisixAdminSslsPostRequest}
   * @memberof SSLApiApisixAdminSslsPost
   */
  readonly apisixAdminSslsPostRequest?: ApisixAdminSslsPostRequest;
}

/**
 * SSLApi - object-oriented interface
 * @export
 * @class SSLApi
 * @extends {BaseAPI}
 */
export class SSLApi extends BaseAPI implements SSLApiInterface {
  /**
   * Get all configured SSL.
   * @summary Get All SSL
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSLApi
   */
  public apisixAdminSslsGet(options?: RawAxiosRequestConfig) {
    return SSLApiFp(this.configuration)
      .apisixAdminSslsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete an SSL by ID.
   * @summary Delete SSL by ID
   * @param {SSLApiApisixAdminSslsIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSLApi
   */
  public apisixAdminSslsIdDelete(
    requestParameters: SSLApiApisixAdminSslsIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return SSLApiFp(this.configuration)
      .apisixAdminSslsIdDelete(requestParameters.id, requestParameters.force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get an SSL by ID.
   * @summary Get SSL by ID
   * @param {SSLApiApisixAdminSslsIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSLApi
   */
  public apisixAdminSslsIdGet(requestParameters: SSLApiApisixAdminSslsIdGetRequest, options?: RawAxiosRequestConfig) {
    return SSLApiFp(this.configuration)
      .apisixAdminSslsIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create an SSL with a custom ID.
   * @summary Create an SSL by ID
   * @param {SSLApiApisixAdminSslsIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSLApi
   */
  public apisixAdminSslsIdPut(requestParameters: SSLApiApisixAdminSslsIdPutRequest, options?: RawAxiosRequestConfig) {
    return SSLApiFp(this.configuration)
      .apisixAdminSslsIdPut(requestParameters.id, requestParameters.apisixAdminSslsIdPutRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create an SSL with an ID generated.
   * @summary Create SSL
   * @param {SSLApiApisixAdminSslsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSLApi
   */
  public apisixAdminSslsPost(
    requestParameters: SSLApiApisixAdminSslsPostRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return SSLApiFp(this.configuration)
      .apisixAdminSslsPost(requestParameters.apisixAdminSslsPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SchemaValidationApi - axios parameter creator
 * @export
 */
export const SchemaValidationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Validate configuration schema without resource creation.
     * @summary Validate Configuration Schema
     * @param {ApisixAdminSchemaValidateResourcePostResourceEnum} resource Type of resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSchemaValidateResourcePost: async (
      resource: ApisixAdminSchemaValidateResourcePostResourceEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'resource' is not null or undefined
      assertParamExists('apisixAdminSchemaValidateResourcePost', 'resource', resource);
      const localVarPath = `/apisix/admin/schema/validate/{resource}`.replace(
        `{${'resource'}}`,
        encodeURIComponent(String(resource)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SchemaValidationApi - functional programming interface
 * @export
 */
export const SchemaValidationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SchemaValidationApiAxiosParamCreator(configuration);
  return {
    /**
     * Validate configuration schema without resource creation.
     * @summary Validate Configuration Schema
     * @param {ApisixAdminSchemaValidateResourcePostResourceEnum} resource Type of resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminSchemaValidateResourcePost(
      resource: ApisixAdminSchemaValidateResourcePostResourceEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminSchemaValidateResourcePost(
        resource,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SchemaValidationApi.apisixAdminSchemaValidateResourcePost']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SchemaValidationApi - factory interface
 * @export
 */
export const SchemaValidationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SchemaValidationApiFp(configuration);
  return {
    /**
     * Validate configuration schema without resource creation.
     * @summary Validate Configuration Schema
     * @param {SchemaValidationApiApisixAdminSchemaValidateResourcePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSchemaValidateResourcePost(
      requestParameters: SchemaValidationApiApisixAdminSchemaValidateResourcePostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apisixAdminSchemaValidateResourcePost(requestParameters.resource, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SchemaValidationApi - interface
 * @export
 * @interface SchemaValidationApi
 */
export interface SchemaValidationApiInterface {
  /**
   * Validate configuration schema without resource creation.
   * @summary Validate Configuration Schema
   * @param {ApisixAdminSchemaValidateResourcePostResourceEnum} resource Type of resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SchemaValidationApiInterface
   */
  apisixAdminSchemaValidateResourcePost(
    resource: ApisixAdminSchemaValidateResourcePostResourceEnum,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<void>;
}

/**
 * Request parameters for apisixAdminSchemaValidateResourcePost operation in SchemaValidationApi.
 * @export
 * @interface SchemaValidationApiApisixAdminSchemaValidateResourcePostRequest
 */
export interface SchemaValidationApiApisixAdminSchemaValidateResourcePostRequest {
  /**
   * Type of resource.
   * @type {'routes' | 'services' | 'upstreams' | 'consumers' | 'consumer_groups' | 'ssls' | 'gloabl_rules' | 'plugins' | 'plugin_metadata' | 'plugin_configs' | 'stream_routes' | 'secrets' | 'protos'}
   * @memberof SchemaValidationApiApisixAdminSchemaValidateResourcePost
   */
  readonly resource: ApisixAdminSchemaValidateResourcePostResourceEnum;
}

/**
 * SchemaValidationApi - object-oriented interface
 * @export
 * @class SchemaValidationApi
 * @extends {BaseAPI}
 */
export class SchemaValidationApi extends BaseAPI implements SchemaValidationApiInterface {
  /**
   * Validate configuration schema without resource creation.
   * @summary Validate Configuration Schema
   * @param {SchemaValidationApiApisixAdminSchemaValidateResourcePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SchemaValidationApi
   */
  public apisixAdminSchemaValidateResourcePost(
    requestParameters: SchemaValidationApiApisixAdminSchemaValidateResourcePostRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return SchemaValidationApiFp(this.configuration)
      .apisixAdminSchemaValidateResourcePost(requestParameters.resource, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ApisixAdminSchemaValidateResourcePostResourceEnum = {
  Routes: 'routes',
  Services: 'services',
  Upstreams: 'upstreams',
  Consumers: 'consumers',
  ConsumerGroups: 'consumer_groups',
  Ssls: 'ssls',
  GloablRules: 'gloabl_rules',
  Plugins: 'plugins',
  PluginMetadata: 'plugin_metadata',
  PluginConfigs: 'plugin_configs',
  StreamRoutes: 'stream_routes',
  Secrets: 'secrets',
  Protos: 'protos',
} as const;
export type ApisixAdminSchemaValidateResourcePostResourceEnum =
  (typeof ApisixAdminSchemaValidateResourcePostResourceEnum)[keyof typeof ApisixAdminSchemaValidateResourcePostResourceEnum];

/**
 * SecretApi - axios parameter creator
 * @export
 */
export const SecretApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured secrets.
     * @summary Get All Secrets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSecretsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/secrets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a secret by ID.
     * @summary Delete Secret by ID
     * @param {string} secretmanager Any secret manager supported, e.g. vault.
     * @param {string} id The secrets id
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSecretsSecretmanagerIdDelete: async (
      secretmanager: string,
      id: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'secretmanager' is not null or undefined
      assertParamExists('apisixAdminSecretsSecretmanagerIdDelete', 'secretmanager', secretmanager);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminSecretsSecretmanagerIdDelete', 'id', id);
      const localVarPath = `/apisix/admin/secrets/{secretmanager}/{id}`
        .replace(`{${'secretmanager'}}`, encodeURIComponent(String(secretmanager)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a secret by ID.
     * @summary Get Secrets by ID
     * @param {string} secretmanager Any secret manager supported, e.g. vault.
     * @param {string} id The specified secrets ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSecretsSecretmanagerIdGet: async (
      secretmanager: string,
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'secretmanager' is not null or undefined
      assertParamExists('apisixAdminSecretsSecretmanagerIdGet', 'secretmanager', secretmanager);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminSecretsSecretmanagerIdGet', 'id', id);
      const localVarPath = `/apisix/admin/secrets/{secretmanager}/{id}`
        .replace(`{${'secretmanager'}}`, encodeURIComponent(String(secretmanager)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update a secret configuration.
     * @summary Update Secrets
     * @param {string} secretmanager Any secret manager supported, e.g. vault.
     * @param {string} id The specified secrets ID.
     * @param {ApisixAdminSecretsSecretmanagerIdPutRequest} [apisixAdminSecretsSecretmanagerIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSecretsSecretmanagerIdPatch: async (
      secretmanager: string,
      id: string,
      apisixAdminSecretsSecretmanagerIdPutRequest?: ApisixAdminSecretsSecretmanagerIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'secretmanager' is not null or undefined
      assertParamExists('apisixAdminSecretsSecretmanagerIdPatch', 'secretmanager', secretmanager);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminSecretsSecretmanagerIdPatch', 'id', id);
      const localVarPath = `/apisix/admin/secrets/{secretmanager}/{id}`
        .replace(`{${'secretmanager'}}`, encodeURIComponent(String(secretmanager)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminSecretsSecretmanagerIdPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a secrete configuration with a custom ID.
     * @summary Create Secrets Configuration
     * @param {string} secretmanager Any secret manager supported, e.g. vault.
     * @param {string} id The specified secrets ID.
     * @param {ApisixAdminSecretsSecretmanagerIdPutRequest} [apisixAdminSecretsSecretmanagerIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSecretsSecretmanagerIdPut: async (
      secretmanager: string,
      id: string,
      apisixAdminSecretsSecretmanagerIdPutRequest?: ApisixAdminSecretsSecretmanagerIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'secretmanager' is not null or undefined
      assertParamExists('apisixAdminSecretsSecretmanagerIdPut', 'secretmanager', secretmanager);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminSecretsSecretmanagerIdPut', 'id', id);
      const localVarPath = `/apisix/admin/secrets/{secretmanager}/{id}`
        .replace(`{${'secretmanager'}}`, encodeURIComponent(String(secretmanager)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminSecretsSecretmanagerIdPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SecretApi - functional programming interface
 * @export
 */
export const SecretApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SecretApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured secrets.
     * @summary Get All Secrets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminSecretsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminSecretsGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminSecretsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SecretApi.apisixAdminSecretsGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a secret by ID.
     * @summary Delete Secret by ID
     * @param {string} secretmanager Any secret manager supported, e.g. vault.
     * @param {string} id The secrets id
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminSecretsSecretmanagerIdDelete(
      secretmanager: string,
      id: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminSecretsSecretmanagerIdDelete(
        secretmanager,
        id,
        force,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SecretApi.apisixAdminSecretsSecretmanagerIdDelete']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a secret by ID.
     * @summary Get Secrets by ID
     * @param {string} secretmanager Any secret manager supported, e.g. vault.
     * @param {string} id The specified secrets ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminSecretsSecretmanagerIdGet(
      secretmanager: string,
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminSecretsGet200ResponseListInner>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminSecretsSecretmanagerIdGet(
        secretmanager,
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SecretApi.apisixAdminSecretsSecretmanagerIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update a secret configuration.
     * @summary Update Secrets
     * @param {string} secretmanager Any secret manager supported, e.g. vault.
     * @param {string} id The specified secrets ID.
     * @param {ApisixAdminSecretsSecretmanagerIdPutRequest} [apisixAdminSecretsSecretmanagerIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminSecretsSecretmanagerIdPatch(
      secretmanager: string,
      id: string,
      apisixAdminSecretsSecretmanagerIdPutRequest?: ApisixAdminSecretsSecretmanagerIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminSecretsSecretmanagerIdPut201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminSecretsSecretmanagerIdPatch(
        secretmanager,
        id,
        apisixAdminSecretsSecretmanagerIdPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SecretApi.apisixAdminSecretsSecretmanagerIdPatch']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a secrete configuration with a custom ID.
     * @summary Create Secrets Configuration
     * @param {string} secretmanager Any secret manager supported, e.g. vault.
     * @param {string} id The specified secrets ID.
     * @param {ApisixAdminSecretsSecretmanagerIdPutRequest} [apisixAdminSecretsSecretmanagerIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminSecretsSecretmanagerIdPut(
      secretmanager: string,
      id: string,
      apisixAdminSecretsSecretmanagerIdPutRequest?: ApisixAdminSecretsSecretmanagerIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminSecretsSecretmanagerIdPut201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminSecretsSecretmanagerIdPut(
        secretmanager,
        id,
        apisixAdminSecretsSecretmanagerIdPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SecretApi.apisixAdminSecretsSecretmanagerIdPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SecretApi - factory interface
 * @export
 */
export const SecretApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = SecretApiFp(configuration);
  return {
    /**
     * Get all configured secrets.
     * @summary Get All Secrets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSecretsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminSecretsGet200Response> {
      return localVarFp.apisixAdminSecretsGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Delete a secret by ID.
     * @summary Delete Secret by ID
     * @param {SecretApiApisixAdminSecretsSecretmanagerIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSecretsSecretmanagerIdDelete(
      requestParameters: SecretApiApisixAdminSecretsSecretmanagerIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminSecretsSecretmanagerIdDelete(
          requestParameters.secretmanager,
          requestParameters.id,
          requestParameters.force,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a secret by ID.
     * @summary Get Secrets by ID
     * @param {SecretApiApisixAdminSecretsSecretmanagerIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSecretsSecretmanagerIdGet(
      requestParameters: SecretApiApisixAdminSecretsSecretmanagerIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminSecretsGet200ResponseListInner> {
      return localVarFp
        .apisixAdminSecretsSecretmanagerIdGet(requestParameters.secretmanager, requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update a secret configuration.
     * @summary Update Secrets
     * @param {SecretApiApisixAdminSecretsSecretmanagerIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSecretsSecretmanagerIdPatch(
      requestParameters: SecretApiApisixAdminSecretsSecretmanagerIdPatchRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminSecretsSecretmanagerIdPut201Response> {
      return localVarFp
        .apisixAdminSecretsSecretmanagerIdPatch(
          requestParameters.secretmanager,
          requestParameters.id,
          requestParameters.apisixAdminSecretsSecretmanagerIdPutRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a secrete configuration with a custom ID.
     * @summary Create Secrets Configuration
     * @param {SecretApiApisixAdminSecretsSecretmanagerIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminSecretsSecretmanagerIdPut(
      requestParameters: SecretApiApisixAdminSecretsSecretmanagerIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminSecretsSecretmanagerIdPut201Response> {
      return localVarFp
        .apisixAdminSecretsSecretmanagerIdPut(
          requestParameters.secretmanager,
          requestParameters.id,
          requestParameters.apisixAdminSecretsSecretmanagerIdPutRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SecretApi - interface
 * @export
 * @interface SecretApi
 */
export interface SecretApiInterface {
  /**
   * Get all configured secrets.
   * @summary Get All Secrets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecretApiInterface
   */
  apisixAdminSecretsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminSecretsGet200Response>;

  /**
   * Delete a secret by ID.
   * @summary Delete Secret by ID
   * @param {string} secretmanager Any secret manager supported, e.g. vault.
   * @param {string} id The secrets id
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecretApiInterface
   */
  apisixAdminSecretsSecretmanagerIdDelete(
    secretmanager: string,
    id: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get a secret by ID.
   * @summary Get Secrets by ID
   * @param {string} secretmanager Any secret manager supported, e.g. vault.
   * @param {string} id The specified secrets ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecretApiInterface
   */
  apisixAdminSecretsSecretmanagerIdGet(
    secretmanager: string,
    id: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminSecretsGet200ResponseListInner>;

  /**
   * Update a secret configuration.
   * @summary Update Secrets
   * @param {string} secretmanager Any secret manager supported, e.g. vault.
   * @param {string} id The specified secrets ID.
   * @param {ApisixAdminSecretsSecretmanagerIdPutRequest} [apisixAdminSecretsSecretmanagerIdPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecretApiInterface
   */
  apisixAdminSecretsSecretmanagerIdPatch(
    secretmanager: string,
    id: string,
    apisixAdminSecretsSecretmanagerIdPutRequest?: ApisixAdminSecretsSecretmanagerIdPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminSecretsSecretmanagerIdPut201Response>;

  /**
   * Create a secrete configuration with a custom ID.
   * @summary Create Secrets Configuration
   * @param {string} secretmanager Any secret manager supported, e.g. vault.
   * @param {string} id The specified secrets ID.
   * @param {ApisixAdminSecretsSecretmanagerIdPutRequest} [apisixAdminSecretsSecretmanagerIdPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecretApiInterface
   */
  apisixAdminSecretsSecretmanagerIdPut(
    secretmanager: string,
    id: string,
    apisixAdminSecretsSecretmanagerIdPutRequest?: ApisixAdminSecretsSecretmanagerIdPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminSecretsSecretmanagerIdPut201Response>;
}

/**
 * Request parameters for apisixAdminSecretsSecretmanagerIdDelete operation in SecretApi.
 * @export
 * @interface SecretApiApisixAdminSecretsSecretmanagerIdDeleteRequest
 */
export interface SecretApiApisixAdminSecretsSecretmanagerIdDeleteRequest {
  /**
   * Any secret manager supported, e.g. vault.
   * @type {string}
   * @memberof SecretApiApisixAdminSecretsSecretmanagerIdDelete
   */
  readonly secretmanager: string;

  /**
   * The secrets id
   * @type {string}
   * @memberof SecretApiApisixAdminSecretsSecretmanagerIdDelete
   */
  readonly id: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof SecretApiApisixAdminSecretsSecretmanagerIdDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminSecretsSecretmanagerIdGet operation in SecretApi.
 * @export
 * @interface SecretApiApisixAdminSecretsSecretmanagerIdGetRequest
 */
export interface SecretApiApisixAdminSecretsSecretmanagerIdGetRequest {
  /**
   * Any secret manager supported, e.g. vault.
   * @type {string}
   * @memberof SecretApiApisixAdminSecretsSecretmanagerIdGet
   */
  readonly secretmanager: string;

  /**
   * The specified secrets ID.
   * @type {string}
   * @memberof SecretApiApisixAdminSecretsSecretmanagerIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for apisixAdminSecretsSecretmanagerIdPatch operation in SecretApi.
 * @export
 * @interface SecretApiApisixAdminSecretsSecretmanagerIdPatchRequest
 */
export interface SecretApiApisixAdminSecretsSecretmanagerIdPatchRequest {
  /**
   * Any secret manager supported, e.g. vault.
   * @type {string}
   * @memberof SecretApiApisixAdminSecretsSecretmanagerIdPatch
   */
  readonly secretmanager: string;

  /**
   * The specified secrets ID.
   * @type {string}
   * @memberof SecretApiApisixAdminSecretsSecretmanagerIdPatch
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminSecretsSecretmanagerIdPutRequest}
   * @memberof SecretApiApisixAdminSecretsSecretmanagerIdPatch
   */
  readonly apisixAdminSecretsSecretmanagerIdPutRequest?: ApisixAdminSecretsSecretmanagerIdPutRequest;
}

/**
 * Request parameters for apisixAdminSecretsSecretmanagerIdPut operation in SecretApi.
 * @export
 * @interface SecretApiApisixAdminSecretsSecretmanagerIdPutRequest
 */
export interface SecretApiApisixAdminSecretsSecretmanagerIdPutRequest {
  /**
   * Any secret manager supported, e.g. vault.
   * @type {string}
   * @memberof SecretApiApisixAdminSecretsSecretmanagerIdPut
   */
  readonly secretmanager: string;

  /**
   * The specified secrets ID.
   * @type {string}
   * @memberof SecretApiApisixAdminSecretsSecretmanagerIdPut
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminSecretsSecretmanagerIdPutRequest}
   * @memberof SecretApiApisixAdminSecretsSecretmanagerIdPut
   */
  readonly apisixAdminSecretsSecretmanagerIdPutRequest?: ApisixAdminSecretsSecretmanagerIdPutRequest;
}

/**
 * SecretApi - object-oriented interface
 * @export
 * @class SecretApi
 * @extends {BaseAPI}
 */
export class SecretApi extends BaseAPI implements SecretApiInterface {
  /**
   * Get all configured secrets.
   * @summary Get All Secrets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecretApi
   */
  public apisixAdminSecretsGet(options?: RawAxiosRequestConfig) {
    return SecretApiFp(this.configuration)
      .apisixAdminSecretsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a secret by ID.
   * @summary Delete Secret by ID
   * @param {SecretApiApisixAdminSecretsSecretmanagerIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecretApi
   */
  public apisixAdminSecretsSecretmanagerIdDelete(
    requestParameters: SecretApiApisixAdminSecretsSecretmanagerIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return SecretApiFp(this.configuration)
      .apisixAdminSecretsSecretmanagerIdDelete(
        requestParameters.secretmanager,
        requestParameters.id,
        requestParameters.force,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a secret by ID.
   * @summary Get Secrets by ID
   * @param {SecretApiApisixAdminSecretsSecretmanagerIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecretApi
   */
  public apisixAdminSecretsSecretmanagerIdGet(
    requestParameters: SecretApiApisixAdminSecretsSecretmanagerIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return SecretApiFp(this.configuration)
      .apisixAdminSecretsSecretmanagerIdGet(requestParameters.secretmanager, requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update a secret configuration.
   * @summary Update Secrets
   * @param {SecretApiApisixAdminSecretsSecretmanagerIdPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecretApi
   */
  public apisixAdminSecretsSecretmanagerIdPatch(
    requestParameters: SecretApiApisixAdminSecretsSecretmanagerIdPatchRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return SecretApiFp(this.configuration)
      .apisixAdminSecretsSecretmanagerIdPatch(
        requestParameters.secretmanager,
        requestParameters.id,
        requestParameters.apisixAdminSecretsSecretmanagerIdPutRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a secrete configuration with a custom ID.
   * @summary Create Secrets Configuration
   * @param {SecretApiApisixAdminSecretsSecretmanagerIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecretApi
   */
  public apisixAdminSecretsSecretmanagerIdPut(
    requestParameters: SecretApiApisixAdminSecretsSecretmanagerIdPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return SecretApiFp(this.configuration)
      .apisixAdminSecretsSecretmanagerIdPut(
        requestParameters.secretmanager,
        requestParameters.id,
        requestParameters.apisixAdminSecretsSecretmanagerIdPutRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ServiceApi - axios parameter creator
 * @export
 */
export const ServiceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured services.
     * @summary Get All Services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/services`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a service by ID.
     * @summary Delete Service by ID
     * @param {string} id The service id
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesIdDelete: async (
      id: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminServicesIdDelete', 'id', id);
      const localVarPath = `/apisix/admin/services/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a service by ID.
     * @summary Get Service by ID
     * @param {string} id The target service id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminServicesIdGet', 'id', id);
      const localVarPath = `/apisix/admin/services/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update a service.
     * @summary Update Service
     * @param {string} id The target service id
     * @param {ApisixAdminServicesPostRequest} [apisixAdminServicesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesIdPatch: async (
      id: string,
      apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminServicesIdPatch', 'id', id);
      const localVarPath = `/apisix/admin/services/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminServicesPostRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a service with a custom ID.
     * @summary Create Service by ID
     * @param {string} id Specifies the ID of the service resource
     * @param {ApisixAdminServicesPostRequest} [apisixAdminServicesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesIdPut: async (
      id: string,
      apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminServicesIdPut', 'id', id);
      const localVarPath = `/apisix/admin/services/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminServicesPostRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a service with an ID generated.
     * @summary Create Service
     * @param {ApisixAdminServicesPostRequest} [apisixAdminServicesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesPost: async (
      apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/services`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminServicesPostRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ServiceApi - functional programming interface
 * @export
 */
export const ServiceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ServiceApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured services.
     * @summary Get All Services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminServicesGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminServicesGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminServicesGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ServiceApi.apisixAdminServicesGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a service by ID.
     * @summary Delete Service by ID
     * @param {string} id The service id
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminServicesIdDelete(
      id: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminServicesIdDelete(id, force, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ServiceApi.apisixAdminServicesIdDelete']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a service by ID.
     * @summary Get Service by ID
     * @param {string} id The target service id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminServicesIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminServicesGet200ResponseListInner>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminServicesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ServiceApi.apisixAdminServicesIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update a service.
     * @summary Update Service
     * @param {string} id The target service id
     * @param {ApisixAdminServicesPostRequest} [apisixAdminServicesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminServicesIdPatch(
      id: string,
      apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminServicesPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminServicesIdPatch(
        id,
        apisixAdminServicesPostRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ServiceApi.apisixAdminServicesIdPatch']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a service with a custom ID.
     * @summary Create Service by ID
     * @param {string} id Specifies the ID of the service resource
     * @param {ApisixAdminServicesPostRequest} [apisixAdminServicesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminServicesIdPut(
      id: string,
      apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminServicesPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminServicesIdPut(
        id,
        apisixAdminServicesPostRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ServiceApi.apisixAdminServicesIdPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a service with an ID generated.
     * @summary Create Service
     * @param {ApisixAdminServicesPostRequest} [apisixAdminServicesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminServicesPost(
      apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminServicesPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminServicesPost(
        apisixAdminServicesPostRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ServiceApi.apisixAdminServicesPost']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ServiceApi - factory interface
 * @export
 */
export const ServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ServiceApiFp(configuration);
  return {
    /**
     * Get all configured services.
     * @summary Get All Services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminServicesGet200Response> {
      return localVarFp.apisixAdminServicesGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Delete a service by ID.
     * @summary Delete Service by ID
     * @param {ServiceApiApisixAdminServicesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesIdDelete(
      requestParameters: ServiceApiApisixAdminServicesIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminServicesIdDelete(requestParameters.id, requestParameters.force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a service by ID.
     * @summary Get Service by ID
     * @param {ServiceApiApisixAdminServicesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesIdGet(
      requestParameters: ServiceApiApisixAdminServicesIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminServicesGet200ResponseListInner> {
      return localVarFp
        .apisixAdminServicesIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update a service.
     * @summary Update Service
     * @param {ServiceApiApisixAdminServicesIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesIdPatch(
      requestParameters: ServiceApiApisixAdminServicesIdPatchRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminServicesPost201Response> {
      return localVarFp
        .apisixAdminServicesIdPatch(requestParameters.id, requestParameters.apisixAdminServicesPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a service with a custom ID.
     * @summary Create Service by ID
     * @param {ServiceApiApisixAdminServicesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesIdPut(
      requestParameters: ServiceApiApisixAdminServicesIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminServicesPost201Response> {
      return localVarFp
        .apisixAdminServicesIdPut(requestParameters.id, requestParameters.apisixAdminServicesPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a service with an ID generated.
     * @summary Create Service
     * @param {ServiceApiApisixAdminServicesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminServicesPost(
      requestParameters: ServiceApiApisixAdminServicesPostRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminServicesPost201Response> {
      return localVarFp
        .apisixAdminServicesPost(requestParameters.apisixAdminServicesPostRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ServiceApi - interface
 * @export
 * @interface ServiceApi
 */
export interface ServiceApiInterface {
  /**
   * Get all configured services.
   * @summary Get All Services
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApiInterface
   */
  apisixAdminServicesGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminServicesGet200Response>;

  /**
   * Delete a service by ID.
   * @summary Delete Service by ID
   * @param {string} id The service id
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApiInterface
   */
  apisixAdminServicesIdDelete(
    id: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get a service by ID.
   * @summary Get Service by ID
   * @param {string} id The target service id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApiInterface
   */
  apisixAdminServicesIdGet(
    id: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminServicesGet200ResponseListInner>;

  /**
   * Update a service.
   * @summary Update Service
   * @param {string} id The target service id
   * @param {ApisixAdminServicesPostRequest} [apisixAdminServicesPostRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApiInterface
   */
  apisixAdminServicesIdPatch(
    id: string,
    apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminServicesPost201Response>;

  /**
   * Create a service with a custom ID.
   * @summary Create Service by ID
   * @param {string} id Specifies the ID of the service resource
   * @param {ApisixAdminServicesPostRequest} [apisixAdminServicesPostRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApiInterface
   */
  apisixAdminServicesIdPut(
    id: string,
    apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminServicesPost201Response>;

  /**
   * Create a service with an ID generated.
   * @summary Create Service
   * @param {ApisixAdminServicesPostRequest} [apisixAdminServicesPostRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApiInterface
   */
  apisixAdminServicesPost(
    apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminServicesPost201Response>;
}

/**
 * Request parameters for apisixAdminServicesIdDelete operation in ServiceApi.
 * @export
 * @interface ServiceApiApisixAdminServicesIdDeleteRequest
 */
export interface ServiceApiApisixAdminServicesIdDeleteRequest {
  /**
   * The service id
   * @type {string}
   * @memberof ServiceApiApisixAdminServicesIdDelete
   */
  readonly id: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof ServiceApiApisixAdminServicesIdDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminServicesIdGet operation in ServiceApi.
 * @export
 * @interface ServiceApiApisixAdminServicesIdGetRequest
 */
export interface ServiceApiApisixAdminServicesIdGetRequest {
  /**
   * The target service id
   * @type {string}
   * @memberof ServiceApiApisixAdminServicesIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for apisixAdminServicesIdPatch operation in ServiceApi.
 * @export
 * @interface ServiceApiApisixAdminServicesIdPatchRequest
 */
export interface ServiceApiApisixAdminServicesIdPatchRequest {
  /**
   * The target service id
   * @type {string}
   * @memberof ServiceApiApisixAdminServicesIdPatch
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminServicesPostRequest}
   * @memberof ServiceApiApisixAdminServicesIdPatch
   */
  readonly apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest;
}

/**
 * Request parameters for apisixAdminServicesIdPut operation in ServiceApi.
 * @export
 * @interface ServiceApiApisixAdminServicesIdPutRequest
 */
export interface ServiceApiApisixAdminServicesIdPutRequest {
  /**
   * Specifies the ID of the service resource
   * @type {string}
   * @memberof ServiceApiApisixAdminServicesIdPut
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminServicesPostRequest}
   * @memberof ServiceApiApisixAdminServicesIdPut
   */
  readonly apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest;
}

/**
 * Request parameters for apisixAdminServicesPost operation in ServiceApi.
 * @export
 * @interface ServiceApiApisixAdminServicesPostRequest
 */
export interface ServiceApiApisixAdminServicesPostRequest {
  /**
   *
   * @type {ApisixAdminServicesPostRequest}
   * @memberof ServiceApiApisixAdminServicesPost
   */
  readonly apisixAdminServicesPostRequest?: ApisixAdminServicesPostRequest;
}

/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
export class ServiceApi extends BaseAPI implements ServiceApiInterface {
  /**
   * Get all configured services.
   * @summary Get All Services
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public apisixAdminServicesGet(options?: RawAxiosRequestConfig) {
    return ServiceApiFp(this.configuration)
      .apisixAdminServicesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a service by ID.
   * @summary Delete Service by ID
   * @param {ServiceApiApisixAdminServicesIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public apisixAdminServicesIdDelete(
    requestParameters: ServiceApiApisixAdminServicesIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ServiceApiFp(this.configuration)
      .apisixAdminServicesIdDelete(requestParameters.id, requestParameters.force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a service by ID.
   * @summary Get Service by ID
   * @param {ServiceApiApisixAdminServicesIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public apisixAdminServicesIdGet(
    requestParameters: ServiceApiApisixAdminServicesIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ServiceApiFp(this.configuration)
      .apisixAdminServicesIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update a service.
   * @summary Update Service
   * @param {ServiceApiApisixAdminServicesIdPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public apisixAdminServicesIdPatch(
    requestParameters: ServiceApiApisixAdminServicesIdPatchRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ServiceApiFp(this.configuration)
      .apisixAdminServicesIdPatch(requestParameters.id, requestParameters.apisixAdminServicesPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a service with a custom ID.
   * @summary Create Service by ID
   * @param {ServiceApiApisixAdminServicesIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public apisixAdminServicesIdPut(
    requestParameters: ServiceApiApisixAdminServicesIdPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ServiceApiFp(this.configuration)
      .apisixAdminServicesIdPut(requestParameters.id, requestParameters.apisixAdminServicesPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a service with an ID generated.
   * @summary Create Service
   * @param {ServiceApiApisixAdminServicesPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public apisixAdminServicesPost(
    requestParameters: ServiceApiApisixAdminServicesPostRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return ServiceApiFp(this.configuration)
      .apisixAdminServicesPost(requestParameters.apisixAdminServicesPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * StreamRouteApi - axios parameter creator
 * @export
 */
export const StreamRouteApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured stream routes.
     * @summary Get All Stream Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminStreamRoutesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/stream_routes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a stream route by ID.
     * @summary Delete Stream Route  by ID
     * @param {string} id The stream route id
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminStreamRoutesIdDelete: async (
      id: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminStreamRoutesIdDelete', 'id', id);
      const localVarPath = `/apisix/admin/stream_routes/{id]`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get stream route by ID.
     * @summary Get Stream Route by ID
     * @param {string} id Specified stream route ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminStreamRoutesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminStreamRoutesIdGet', 'id', id);
      const localVarPath = `/apisix/admin/stream_routes/{id]`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a stream route with a specified ID.
     * @summary Create Stream Route by ID
     * @param {string} id Specified stream route ID.
     * @param {ApisixAdminStreamRoutesIdPutRequest} [apisixAdminStreamRoutesIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminStreamRoutesIdPut: async (
      id: string,
      apisixAdminStreamRoutesIdPutRequest?: ApisixAdminStreamRoutesIdPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminStreamRoutesIdPut', 'id', id);
      const localVarPath = `/apisix/admin/stream_routes/{id]`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminStreamRoutesIdPutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a stream route with an ID generated.
     * @summary Create Stream Route
     * @param {ApisixAdminStreamRoutesPostRequest} [apisixAdminStreamRoutesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminStreamRoutesPost: async (
      apisixAdminStreamRoutesPostRequest?: ApisixAdminStreamRoutesPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/stream_routes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminStreamRoutesPostRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StreamRouteApi - functional programming interface
 * @export
 */
export const StreamRouteApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StreamRouteApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured stream routes.
     * @summary Get All Stream Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminStreamRoutesGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminStreamRoutesGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminStreamRoutesGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['StreamRouteApi.apisixAdminStreamRoutesGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a stream route by ID.
     * @summary Delete Stream Route  by ID
     * @param {string} id The stream route id
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminStreamRoutesIdDelete(
      id: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminStreamRoutesIdDelete(id, force, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['StreamRouteApi.apisixAdminStreamRoutesIdDelete']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get stream route by ID.
     * @summary Get Stream Route by ID
     * @param {string} id Specified stream route ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminStreamRoutesIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminStreamRoutesIdGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminStreamRoutesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['StreamRouteApi.apisixAdminStreamRoutesIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a stream route with a specified ID.
     * @summary Create Stream Route by ID
     * @param {string} id Specified stream route ID.
     * @param {ApisixAdminStreamRoutesIdPutRequest} [apisixAdminStreamRoutesIdPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminStreamRoutesIdPut(
      id: string,
      apisixAdminStreamRoutesIdPutRequest?: ApisixAdminStreamRoutesIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminStreamRoutesPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminStreamRoutesIdPut(
        id,
        apisixAdminStreamRoutesIdPutRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['StreamRouteApi.apisixAdminStreamRoutesIdPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a stream route with an ID generated.
     * @summary Create Stream Route
     * @param {ApisixAdminStreamRoutesPostRequest} [apisixAdminStreamRoutesPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminStreamRoutesPost(
      apisixAdminStreamRoutesPostRequest?: ApisixAdminStreamRoutesPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminStreamRoutesPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminStreamRoutesPost(
        apisixAdminStreamRoutesPostRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['StreamRouteApi.apisixAdminStreamRoutesPost']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * StreamRouteApi - factory interface
 * @export
 */
export const StreamRouteApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = StreamRouteApiFp(configuration);
  return {
    /**
     * Get all configured stream routes.
     * @summary Get All Stream Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminStreamRoutesGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminStreamRoutesGet200Response> {
      return localVarFp.apisixAdminStreamRoutesGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Delete a stream route by ID.
     * @summary Delete Stream Route  by ID
     * @param {StreamRouteApiApisixAdminStreamRoutesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminStreamRoutesIdDelete(
      requestParameters: StreamRouteApiApisixAdminStreamRoutesIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminStreamRoutesIdDelete(requestParameters.id, requestParameters.force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get stream route by ID.
     * @summary Get Stream Route by ID
     * @param {StreamRouteApiApisixAdminStreamRoutesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminStreamRoutesIdGet(
      requestParameters: StreamRouteApiApisixAdminStreamRoutesIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminStreamRoutesIdGet200Response> {
      return localVarFp
        .apisixAdminStreamRoutesIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a stream route with a specified ID.
     * @summary Create Stream Route by ID
     * @param {StreamRouteApiApisixAdminStreamRoutesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminStreamRoutesIdPut(
      requestParameters: StreamRouteApiApisixAdminStreamRoutesIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminStreamRoutesPost201Response> {
      return localVarFp
        .apisixAdminStreamRoutesIdPut(
          requestParameters.id,
          requestParameters.apisixAdminStreamRoutesIdPutRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a stream route with an ID generated.
     * @summary Create Stream Route
     * @param {StreamRouteApiApisixAdminStreamRoutesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminStreamRoutesPost(
      requestParameters: StreamRouteApiApisixAdminStreamRoutesPostRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminStreamRoutesPost201Response> {
      return localVarFp
        .apisixAdminStreamRoutesPost(requestParameters.apisixAdminStreamRoutesPostRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * StreamRouteApi - interface
 * @export
 * @interface StreamRouteApi
 */
export interface StreamRouteApiInterface {
  /**
   * Get all configured stream routes.
   * @summary Get All Stream Routes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StreamRouteApiInterface
   */
  apisixAdminStreamRoutesGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminStreamRoutesGet200Response>;

  /**
   * Delete a stream route by ID.
   * @summary Delete Stream Route  by ID
   * @param {string} id The stream route id
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StreamRouteApiInterface
   */
  apisixAdminStreamRoutesIdDelete(
    id: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get stream route by ID.
   * @summary Get Stream Route by ID
   * @param {string} id Specified stream route ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StreamRouteApiInterface
   */
  apisixAdminStreamRoutesIdGet(
    id: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminStreamRoutesIdGet200Response>;

  /**
   * Create a stream route with a specified ID.
   * @summary Create Stream Route by ID
   * @param {string} id Specified stream route ID.
   * @param {ApisixAdminStreamRoutesIdPutRequest} [apisixAdminStreamRoutesIdPutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StreamRouteApiInterface
   */
  apisixAdminStreamRoutesIdPut(
    id: string,
    apisixAdminStreamRoutesIdPutRequest?: ApisixAdminStreamRoutesIdPutRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminStreamRoutesPost201Response>;

  /**
   * Create a stream route with an ID generated.
   * @summary Create Stream Route
   * @param {ApisixAdminStreamRoutesPostRequest} [apisixAdminStreamRoutesPostRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StreamRouteApiInterface
   */
  apisixAdminStreamRoutesPost(
    apisixAdminStreamRoutesPostRequest?: ApisixAdminStreamRoutesPostRequest,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminStreamRoutesPost201Response>;
}

/**
 * Request parameters for apisixAdminStreamRoutesIdDelete operation in StreamRouteApi.
 * @export
 * @interface StreamRouteApiApisixAdminStreamRoutesIdDeleteRequest
 */
export interface StreamRouteApiApisixAdminStreamRoutesIdDeleteRequest {
  /**
   * The stream route id
   * @type {string}
   * @memberof StreamRouteApiApisixAdminStreamRoutesIdDelete
   */
  readonly id: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof StreamRouteApiApisixAdminStreamRoutesIdDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminStreamRoutesIdGet operation in StreamRouteApi.
 * @export
 * @interface StreamRouteApiApisixAdminStreamRoutesIdGetRequest
 */
export interface StreamRouteApiApisixAdminStreamRoutesIdGetRequest {
  /**
   * Specified stream route ID.
   * @type {string}
   * @memberof StreamRouteApiApisixAdminStreamRoutesIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for apisixAdminStreamRoutesIdPut operation in StreamRouteApi.
 * @export
 * @interface StreamRouteApiApisixAdminStreamRoutesIdPutRequest
 */
export interface StreamRouteApiApisixAdminStreamRoutesIdPutRequest {
  /**
   * Specified stream route ID.
   * @type {string}
   * @memberof StreamRouteApiApisixAdminStreamRoutesIdPut
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminStreamRoutesIdPutRequest}
   * @memberof StreamRouteApiApisixAdminStreamRoutesIdPut
   */
  readonly apisixAdminStreamRoutesIdPutRequest?: ApisixAdminStreamRoutesIdPutRequest;
}

/**
 * Request parameters for apisixAdminStreamRoutesPost operation in StreamRouteApi.
 * @export
 * @interface StreamRouteApiApisixAdminStreamRoutesPostRequest
 */
export interface StreamRouteApiApisixAdminStreamRoutesPostRequest {
  /**
   *
   * @type {ApisixAdminStreamRoutesPostRequest}
   * @memberof StreamRouteApiApisixAdminStreamRoutesPost
   */
  readonly apisixAdminStreamRoutesPostRequest?: ApisixAdminStreamRoutesPostRequest;
}

/**
 * StreamRouteApi - object-oriented interface
 * @export
 * @class StreamRouteApi
 * @extends {BaseAPI}
 */
export class StreamRouteApi extends BaseAPI implements StreamRouteApiInterface {
  /**
   * Get all configured stream routes.
   * @summary Get All Stream Routes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StreamRouteApi
   */
  public apisixAdminStreamRoutesGet(options?: RawAxiosRequestConfig) {
    return StreamRouteApiFp(this.configuration)
      .apisixAdminStreamRoutesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a stream route by ID.
   * @summary Delete Stream Route  by ID
   * @param {StreamRouteApiApisixAdminStreamRoutesIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StreamRouteApi
   */
  public apisixAdminStreamRoutesIdDelete(
    requestParameters: StreamRouteApiApisixAdminStreamRoutesIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return StreamRouteApiFp(this.configuration)
      .apisixAdminStreamRoutesIdDelete(requestParameters.id, requestParameters.force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get stream route by ID.
   * @summary Get Stream Route by ID
   * @param {StreamRouteApiApisixAdminStreamRoutesIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StreamRouteApi
   */
  public apisixAdminStreamRoutesIdGet(
    requestParameters: StreamRouteApiApisixAdminStreamRoutesIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return StreamRouteApiFp(this.configuration)
      .apisixAdminStreamRoutesIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a stream route with a specified ID.
   * @summary Create Stream Route by ID
   * @param {StreamRouteApiApisixAdminStreamRoutesIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StreamRouteApi
   */
  public apisixAdminStreamRoutesIdPut(
    requestParameters: StreamRouteApiApisixAdminStreamRoutesIdPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return StreamRouteApiFp(this.configuration)
      .apisixAdminStreamRoutesIdPut(
        requestParameters.id,
        requestParameters.apisixAdminStreamRoutesIdPutRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a stream route with an ID generated.
   * @summary Create Stream Route
   * @param {StreamRouteApiApisixAdminStreamRoutesPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StreamRouteApi
   */
  public apisixAdminStreamRoutesPost(
    requestParameters: StreamRouteApiApisixAdminStreamRoutesPostRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return StreamRouteApiFp(this.configuration)
      .apisixAdminStreamRoutesPost(requestParameters.apisixAdminStreamRoutesPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UpstreamApi - axios parameter creator
 * @export
 */
export const UpstreamApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get all configured upstreams.
     * @summary Get All Upstreams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/upstreams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete an upstream by ID.
     * @summary Delete Upstream by ID
     * @param {string} id Specified upstream ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsIdDelete: async (
      id: string,
      force?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminUpstreamsIdDelete', 'id', id);
      const localVarPath = `/apisix/admin/upstreams/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (force !== undefined) {
        localVarQueryParameter['force'] = force;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get an upstream by ID.
     * @summary Get Upstream by ID
     * @param {string} id Specified upstream ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminUpstreamsIdGet', 'id', id);
      const localVarPath = `/apisix/admin/upstreams/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update an upstream.
     * @summary Update Upstream
     * @param {string} id Specified upstream ID.
     * @param {ApisixAdminRoutesPostRequestUpstream | null} [apisixAdminRoutesPostRequestUpstream]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsIdPatch: async (
      id: string,
      apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminUpstreamsIdPatch', 'id', id);
      const localVarPath = `/apisix/admin/upstreams/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminRoutesPostRequestUpstream,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create an upstream with a custom ID.
     * @summary Create an Upstream by ID
     * @param {string} id Specified upstream ID.
     * @param {ApisixAdminRoutesPostRequestUpstream | null} [apisixAdminRoutesPostRequestUpstream]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsIdPut: async (
      id: string,
      apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apisixAdminUpstreamsIdPut', 'id', id);
      const localVarPath = `/apisix/admin/upstreams/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminRoutesPostRequestUpstream,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create an upstream with an ID generated.
     * @summary Create Upstream
     * @param {ApisixAdminRoutesPostRequestUpstream | null} [apisixAdminRoutesPostRequestUpstream]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsPost: async (
      apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apisix/admin/upstreams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        apisixAdminRoutesPostRequestUpstream,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UpstreamApi - functional programming interface
 * @export
 */
export const UpstreamApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UpstreamApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all configured upstreams.
     * @summary Get All Upstreams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminUpstreamsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminUpstreamsGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminUpstreamsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UpstreamApi.apisixAdminUpstreamsGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete an upstream by ID.
     * @summary Delete Upstream by ID
     * @param {string} id Specified upstream ID.
     * @param {string} [force] Delete resource by force even if the resource is in use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminUpstreamsIdDelete(
      id: string,
      force?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminRoutesIdDelete200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminUpstreamsIdDelete(id, force, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UpstreamApi.apisixAdminUpstreamsIdDelete']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get an upstream by ID.
     * @summary Get Upstream by ID
     * @param {string} id Specified upstream ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminUpstreamsIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminUpstreamsIdGet200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminUpstreamsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UpstreamApi.apisixAdminUpstreamsIdGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update an upstream.
     * @summary Update Upstream
     * @param {string} id Specified upstream ID.
     * @param {ApisixAdminRoutesPostRequestUpstream | null} [apisixAdminRoutesPostRequestUpstream]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminUpstreamsIdPatch(
      id: string,
      apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminUpstreamsPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminUpstreamsIdPatch(
        id,
        apisixAdminRoutesPostRequestUpstream,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UpstreamApi.apisixAdminUpstreamsIdPatch']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create an upstream with a custom ID.
     * @summary Create an Upstream by ID
     * @param {string} id Specified upstream ID.
     * @param {ApisixAdminRoutesPostRequestUpstream | null} [apisixAdminRoutesPostRequestUpstream]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminUpstreamsIdPut(
      id: string,
      apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminUpstreamsPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminUpstreamsIdPut(
        id,
        apisixAdminRoutesPostRequestUpstream,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UpstreamApi.apisixAdminUpstreamsIdPut']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create an upstream with an ID generated.
     * @summary Create Upstream
     * @param {ApisixAdminRoutesPostRequestUpstream | null} [apisixAdminRoutesPostRequestUpstream]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apisixAdminUpstreamsPost(
      apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApisixAdminUpstreamsPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apisixAdminUpstreamsPost(
        apisixAdminRoutesPostRequestUpstream,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UpstreamApi.apisixAdminUpstreamsPost']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UpstreamApi - factory interface
 * @export
 */
export const UpstreamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UpstreamApiFp(configuration);
  return {
    /**
     * Get all configured upstreams.
     * @summary Get All Upstreams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminUpstreamsGet200Response> {
      return localVarFp.apisixAdminUpstreamsGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Delete an upstream by ID.
     * @summary Delete Upstream by ID
     * @param {UpstreamApiApisixAdminUpstreamsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsIdDelete(
      requestParameters: UpstreamApiApisixAdminUpstreamsIdDeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminRoutesIdDelete200Response> {
      return localVarFp
        .apisixAdminUpstreamsIdDelete(requestParameters.id, requestParameters.force, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get an upstream by ID.
     * @summary Get Upstream by ID
     * @param {UpstreamApiApisixAdminUpstreamsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsIdGet(
      requestParameters: UpstreamApiApisixAdminUpstreamsIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminUpstreamsIdGet200Response> {
      return localVarFp
        .apisixAdminUpstreamsIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update an upstream.
     * @summary Update Upstream
     * @param {UpstreamApiApisixAdminUpstreamsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsIdPatch(
      requestParameters: UpstreamApiApisixAdminUpstreamsIdPatchRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminUpstreamsPost201Response> {
      return localVarFp
        .apisixAdminUpstreamsIdPatch(
          requestParameters.id,
          requestParameters.apisixAdminRoutesPostRequestUpstream,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Create an upstream with a custom ID.
     * @summary Create an Upstream by ID
     * @param {UpstreamApiApisixAdminUpstreamsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsIdPut(
      requestParameters: UpstreamApiApisixAdminUpstreamsIdPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminUpstreamsPost201Response> {
      return localVarFp
        .apisixAdminUpstreamsIdPut(
          requestParameters.id,
          requestParameters.apisixAdminRoutesPostRequestUpstream,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Create an upstream with an ID generated.
     * @summary Create Upstream
     * @param {UpstreamApiApisixAdminUpstreamsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apisixAdminUpstreamsPost(
      requestParameters: UpstreamApiApisixAdminUpstreamsPostRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApisixAdminUpstreamsPost201Response> {
      return localVarFp
        .apisixAdminUpstreamsPost(requestParameters.apisixAdminRoutesPostRequestUpstream, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UpstreamApi - interface
 * @export
 * @interface UpstreamApi
 */
export interface UpstreamApiInterface {
  /**
   * Get all configured upstreams.
   * @summary Get All Upstreams
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApiInterface
   */
  apisixAdminUpstreamsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApisixAdminUpstreamsGet200Response>;

  /**
   * Delete an upstream by ID.
   * @summary Delete Upstream by ID
   * @param {string} id Specified upstream ID.
   * @param {string} [force] Delete resource by force even if the resource is in use.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApiInterface
   */
  apisixAdminUpstreamsIdDelete(
    id: string,
    force?: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminRoutesIdDelete200Response>;

  /**
   * Get an upstream by ID.
   * @summary Get Upstream by ID
   * @param {string} id Specified upstream ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApiInterface
   */
  apisixAdminUpstreamsIdGet(
    id: string,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminUpstreamsIdGet200Response>;

  /**
   * Update an upstream.
   * @summary Update Upstream
   * @param {string} id Specified upstream ID.
   * @param {ApisixAdminRoutesPostRequestUpstream | null} [apisixAdminRoutesPostRequestUpstream]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApiInterface
   */
  apisixAdminUpstreamsIdPatch(
    id: string,
    apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminUpstreamsPost201Response>;

  /**
   * Create an upstream with a custom ID.
   * @summary Create an Upstream by ID
   * @param {string} id Specified upstream ID.
   * @param {ApisixAdminRoutesPostRequestUpstream | null} [apisixAdminRoutesPostRequestUpstream]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApiInterface
   */
  apisixAdminUpstreamsIdPut(
    id: string,
    apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminUpstreamsPost201Response>;

  /**
   * Create an upstream with an ID generated.
   * @summary Create Upstream
   * @param {ApisixAdminRoutesPostRequestUpstream | null} [apisixAdminRoutesPostRequestUpstream]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApiInterface
   */
  apisixAdminUpstreamsPost(
    apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null,
    options?: RawAxiosRequestConfig,
  ): AxiosPromise<ApisixAdminUpstreamsPost201Response>;
}

/**
 * Request parameters for apisixAdminUpstreamsIdDelete operation in UpstreamApi.
 * @export
 * @interface UpstreamApiApisixAdminUpstreamsIdDeleteRequest
 */
export interface UpstreamApiApisixAdminUpstreamsIdDeleteRequest {
  /**
   * Specified upstream ID.
   * @type {string}
   * @memberof UpstreamApiApisixAdminUpstreamsIdDelete
   */
  readonly id: string;

  /**
   * Delete resource by force even if the resource is in use.
   * @type {string}
   * @memberof UpstreamApiApisixAdminUpstreamsIdDelete
   */
  readonly force?: string;
}

/**
 * Request parameters for apisixAdminUpstreamsIdGet operation in UpstreamApi.
 * @export
 * @interface UpstreamApiApisixAdminUpstreamsIdGetRequest
 */
export interface UpstreamApiApisixAdminUpstreamsIdGetRequest {
  /**
   * Specified upstream ID.
   * @type {string}
   * @memberof UpstreamApiApisixAdminUpstreamsIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for apisixAdminUpstreamsIdPatch operation in UpstreamApi.
 * @export
 * @interface UpstreamApiApisixAdminUpstreamsIdPatchRequest
 */
export interface UpstreamApiApisixAdminUpstreamsIdPatchRequest {
  /**
   * Specified upstream ID.
   * @type {string}
   * @memberof UpstreamApiApisixAdminUpstreamsIdPatch
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminRoutesPostRequestUpstream}
   * @memberof UpstreamApiApisixAdminUpstreamsIdPatch
   */
  readonly apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null;
}

/**
 * Request parameters for apisixAdminUpstreamsIdPut operation in UpstreamApi.
 * @export
 * @interface UpstreamApiApisixAdminUpstreamsIdPutRequest
 */
export interface UpstreamApiApisixAdminUpstreamsIdPutRequest {
  /**
   * Specified upstream ID.
   * @type {string}
   * @memberof UpstreamApiApisixAdminUpstreamsIdPut
   */
  readonly id: string;

  /**
   *
   * @type {ApisixAdminRoutesPostRequestUpstream}
   * @memberof UpstreamApiApisixAdminUpstreamsIdPut
   */
  readonly apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null;
}

/**
 * Request parameters for apisixAdminUpstreamsPost operation in UpstreamApi.
 * @export
 * @interface UpstreamApiApisixAdminUpstreamsPostRequest
 */
export interface UpstreamApiApisixAdminUpstreamsPostRequest {
  /**
   *
   * @type {ApisixAdminRoutesPostRequestUpstream}
   * @memberof UpstreamApiApisixAdminUpstreamsPost
   */
  readonly apisixAdminRoutesPostRequestUpstream?: ApisixAdminRoutesPostRequestUpstream | null;
}

/**
 * UpstreamApi - object-oriented interface
 * @export
 * @class UpstreamApi
 * @extends {BaseAPI}
 */
export class UpstreamApi extends BaseAPI implements UpstreamApiInterface {
  /**
   * Get all configured upstreams.
   * @summary Get All Upstreams
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApi
   */
  public apisixAdminUpstreamsGet(options?: RawAxiosRequestConfig) {
    return UpstreamApiFp(this.configuration)
      .apisixAdminUpstreamsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete an upstream by ID.
   * @summary Delete Upstream by ID
   * @param {UpstreamApiApisixAdminUpstreamsIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApi
   */
  public apisixAdminUpstreamsIdDelete(
    requestParameters: UpstreamApiApisixAdminUpstreamsIdDeleteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UpstreamApiFp(this.configuration)
      .apisixAdminUpstreamsIdDelete(requestParameters.id, requestParameters.force, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get an upstream by ID.
   * @summary Get Upstream by ID
   * @param {UpstreamApiApisixAdminUpstreamsIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApi
   */
  public apisixAdminUpstreamsIdGet(
    requestParameters: UpstreamApiApisixAdminUpstreamsIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UpstreamApiFp(this.configuration)
      .apisixAdminUpstreamsIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update an upstream.
   * @summary Update Upstream
   * @param {UpstreamApiApisixAdminUpstreamsIdPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApi
   */
  public apisixAdminUpstreamsIdPatch(
    requestParameters: UpstreamApiApisixAdminUpstreamsIdPatchRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UpstreamApiFp(this.configuration)
      .apisixAdminUpstreamsIdPatch(
        requestParameters.id,
        requestParameters.apisixAdminRoutesPostRequestUpstream,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create an upstream with a custom ID.
   * @summary Create an Upstream by ID
   * @param {UpstreamApiApisixAdminUpstreamsIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApi
   */
  public apisixAdminUpstreamsIdPut(
    requestParameters: UpstreamApiApisixAdminUpstreamsIdPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UpstreamApiFp(this.configuration)
      .apisixAdminUpstreamsIdPut(requestParameters.id, requestParameters.apisixAdminRoutesPostRequestUpstream, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create an upstream with an ID generated.
   * @summary Create Upstream
   * @param {UpstreamApiApisixAdminUpstreamsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpstreamApi
   */
  public apisixAdminUpstreamsPost(
    requestParameters: UpstreamApiApisixAdminUpstreamsPostRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return UpstreamApiFp(this.configuration)
      .apisixAdminUpstreamsPost(requestParameters.apisixAdminRoutesPostRequestUpstream, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
